
mcu_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004b00  08004b00  00014b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b6c  08004b6c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08004b6c  08004b6c  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b6c  08004b6c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b6c  08004b6c  00014b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  2000008c  08004c00  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08004c00  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019091  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000312d  00000000  00000000  00039146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  0003c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  0003cfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a091  00000000  00000000  0003dbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001245b  00000000  00000000  00057c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b0da  00000000  00000000  0006a0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f519e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000383c  00000000  00000000  000f51f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ae8 	.word	0x08004ae8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08004ae8 	.word	0x08004ae8

0800014c <isButtonPressed>:

//Array to find which button
static int button_flag[NUMBER_BUTTONS];

//RESET FLAG
int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000e8 	.word	0x200000e8

08000180 <button_processing>:

//READ BUTTON
void button_processing(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < NUMBER_BUTTONS; i++){
 8000186:	2300      	movs	r3, #0
 8000188:	71fb      	strb	r3, [r7, #7]
 800018a:	e069      	b.n	8000260 <button_processing+0xe0>
        //Debounce
		db_3[i] = db_2[i];
 800018c:	79fa      	ldrb	r2, [r7, #7]
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	4937      	ldr	r1, [pc, #220]	; (8000270 <button_processing+0xf0>)
 8000192:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000196:	4937      	ldr	r1, [pc, #220]	; (8000274 <button_processing+0xf4>)
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		db_2[i] = db_1[i];
 800019c:	79fa      	ldrb	r2, [r7, #7]
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	4935      	ldr	r1, [pc, #212]	; (8000278 <button_processing+0xf8>)
 80001a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80001a6:	4932      	ldr	r1, [pc, #200]	; (8000270 <button_processing+0xf0>)
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//DO STH

		if(i == 0) db_1[i] = HAL_GPIO_ReadPin(PedestrianButton_GPIO_Port, PedestrianButton_Pin);
 80001ac:	79fb      	ldrb	r3, [r7, #7]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d10b      	bne.n	80001ca <button_processing+0x4a>
 80001b2:	2101      	movs	r1, #1
 80001b4:	4831      	ldr	r0, [pc, #196]	; (800027c <button_processing+0xfc>)
 80001b6:	f002 f82b 	bl	8002210 <HAL_GPIO_ReadPin>
 80001ba:	4603      	mov	r3, r0
 80001bc:	461a      	mov	r2, r3
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	4611      	mov	r1, r2
 80001c2:	4a2d      	ldr	r2, [pc, #180]	; (8000278 <button_processing+0xf8>)
 80001c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001c8:	e02b      	b.n	8000222 <button_processing+0xa2>
		else if(i == 1) db_1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d10b      	bne.n	80001e8 <button_processing+0x68>
 80001d0:	2102      	movs	r1, #2
 80001d2:	482a      	ldr	r0, [pc, #168]	; (800027c <button_processing+0xfc>)
 80001d4:	f002 f81c 	bl	8002210 <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	461a      	mov	r2, r3
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	4611      	mov	r1, r2
 80001e0:	4a25      	ldr	r2, [pc, #148]	; (8000278 <button_processing+0xf8>)
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e6:	e01c      	b.n	8000222 <button_processing+0xa2>
		else if(i == 2) db_1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	2b02      	cmp	r3, #2
 80001ec:	d10b      	bne.n	8000206 <button_processing+0x86>
 80001ee:	2110      	movs	r1, #16
 80001f0:	4822      	ldr	r0, [pc, #136]	; (800027c <button_processing+0xfc>)
 80001f2:	f002 f80d 	bl	8002210 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	461a      	mov	r2, r3
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	4611      	mov	r1, r2
 80001fe:	4a1e      	ldr	r2, [pc, #120]	; (8000278 <button_processing+0xf8>)
 8000200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000204:	e00d      	b.n	8000222 <button_processing+0xa2>
		else if(i == 3) db_1[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	2b03      	cmp	r3, #3
 800020a:	d10a      	bne.n	8000222 <button_processing+0xa2>
 800020c:	2101      	movs	r1, #1
 800020e:	481c      	ldr	r0, [pc, #112]	; (8000280 <button_processing+0x100>)
 8000210:	f001 fffe 	bl	8002210 <HAL_GPIO_ReadPin>
 8000214:	4603      	mov	r3, r0
 8000216:	461a      	mov	r2, r3
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	4611      	mov	r1, r2
 800021c:	4a16      	ldr	r2, [pc, #88]	; (8000278 <button_processing+0xf8>)
 800021e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        //DO AFTER DEBOUNCE
		if((db_3[i] == db_2[i]) && db_2[i] == db_1[i]){
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	4a13      	ldr	r2, [pc, #76]	; (8000274 <button_processing+0xf4>)
 8000226:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	4910      	ldr	r1, [pc, #64]	; (8000270 <button_processing+0xf0>)
 800022e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000232:	429a      	cmp	r2, r3
 8000234:	d111      	bne.n	800025a <button_processing+0xda>
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4a0d      	ldr	r2, [pc, #52]	; (8000270 <button_processing+0xf0>)
 800023a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	490d      	ldr	r1, [pc, #52]	; (8000278 <button_processing+0xf8>)
 8000242:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000246:	429a      	cmp	r2, r3
 8000248:	d107      	bne.n	800025a <button_processing+0xda>
			button_buffer[i] = db_3[i];
 800024a:	79fa      	ldrb	r2, [r7, #7]
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	4909      	ldr	r1, [pc, #36]	; (8000274 <button_processing+0xf4>)
 8000250:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000254:	490b      	ldr	r1, [pc, #44]	; (8000284 <button_processing+0x104>)
 8000256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i = 0 ; i < NUMBER_BUTTONS; i++){
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	3301      	adds	r3, #1
 800025e:	71fb      	strb	r3, [r7, #7]
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	2b03      	cmp	r3, #3
 8000264:	d992      	bls.n	800018c <button_processing+0xc>
		}
	}
}
 8000266:	bf00      	nop
 8000268:	bf00      	nop
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	200000c8 	.word	0x200000c8
 8000274:	200000d8 	.word	0x200000d8
 8000278:	200000b8 	.word	0x200000b8
 800027c:	40010800 	.word	0x40010800
 8000280:	40010c00 	.word	0x40010c00
 8000284:	200000a8 	.word	0x200000a8

08000288 <mode_selector>:

//INIT
enum ButtonState {BUTTON_RELEASED, BUTTON1_PRESSED} ;
enum ButtonState buttonState = BUTTON_RELEASED;

void mode_selector(void) {
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	switch (buttonState) {
 800028c:	4b3c      	ldr	r3, [pc, #240]	; (8000380 <mode_selector+0xf8>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d002      	beq.n	800029a <mode_selector+0x12>
 8000294:	2b01      	cmp	r3, #1
 8000296:	d00f      	beq.n	80002b8 <mode_selector+0x30>
			 	mode = 1;
			 	status = INIT;//RESET MODE CYLCE
			 }
			 break;
		}
}
 8000298:	e070      	b.n	800037c <mode_selector+0xf4>
			 if(isButtonPressed(1)) {
 800029a:	2001      	movs	r0, #1
 800029c:	f7ff ff56 	bl	800014c <isButtonPressed>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d067      	beq.n	8000376 <mode_selector+0xee>
				 buttonState = BUTTON1_PRESSED;
 80002a6:	4b36      	ldr	r3, [pc, #216]	; (8000380 <mode_selector+0xf8>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	701a      	strb	r2, [r3, #0]
				 mode++;
 80002ac:	4b35      	ldr	r3, [pc, #212]	; (8000384 <mode_selector+0xfc>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	3301      	adds	r3, #1
 80002b2:	4a34      	ldr	r2, [pc, #208]	; (8000384 <mode_selector+0xfc>)
 80002b4:	6013      	str	r3, [r2, #0]
			 break;
 80002b6:	e05e      	b.n	8000376 <mode_selector+0xee>
			 if (!isButtonPressed(1)) {
 80002b8:	2001      	movs	r0, #1
 80002ba:	f7ff ff47 	bl	800014c <isButtonPressed>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d102      	bne.n	80002ca <mode_selector+0x42>
				 buttonState = BUTTON_RELEASED;
 80002c4:	4b2e      	ldr	r3, [pc, #184]	; (8000380 <mode_selector+0xf8>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]
			 if(mode == 2) {
 80002ca:	4b2e      	ldr	r3, [pc, #184]	; (8000384 <mode_selector+0xfc>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2b02      	cmp	r3, #2
 80002d0:	d120      	bne.n	8000314 <mode_selector+0x8c>
				status = MAN_RED_GREEN;
 80002d2:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <mode_selector+0x100>)
 80002d4:	220b      	movs	r2, #11
 80002d6:	601a      	str	r2, [r3, #0]
				setTimer1(60000);
 80002d8:	f64e 2060 	movw	r0, #60000	; 0xea60
 80002dc:	f001 fb48 	bl	8001970 <setTimer1>
				counter = 0;
 80002e0:	4b2a      	ldr	r3, [pc, #168]	; (800038c <mode_selector+0x104>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 80002e6:	2201      	movs	r2, #1
 80002e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ec:	4828      	ldr	r0, [pc, #160]	; (8000390 <mode_selector+0x108>)
 80002ee:	f001 ffa6 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2108      	movs	r1, #8
 80002f6:	4827      	ldr	r0, [pc, #156]	; (8000394 <mode_selector+0x10c>)
 80002f8:	f001 ffa1 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2120      	movs	r1, #32
 8000300:	4824      	ldr	r0, [pc, #144]	; (8000394 <mode_selector+0x10c>)
 8000302:	f001 ff9c 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8000306:	2201      	movs	r2, #1
 8000308:	2110      	movs	r1, #16
 800030a:	4822      	ldr	r0, [pc, #136]	; (8000394 <mode_selector+0x10c>)
 800030c:	f001 ff97 	bl	800223e <HAL_GPIO_WritePin>
				displayCounter();
 8000310:	f000 f844 	bl	800039c <displayCounter>
			 if(mode == 3){
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <mode_selector+0xfc>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2b03      	cmp	r3, #3
 800031a:	d121      	bne.n	8000360 <mode_selector+0xd8>
				status = TUNING_RED1;
 800031c:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <mode_selector+0x100>)
 800031e:	2215      	movs	r2, #21
 8000320:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000326:	f001 fb23 	bl	8001970 <setTimer1>
				counter = timer_red1;
 800032a:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <mode_selector+0x110>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a17      	ldr	r2, [pc, #92]	; (800038c <mode_selector+0x104>)
 8000330:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000338:	4815      	ldr	r0, [pc, #84]	; (8000390 <mode_selector+0x108>)
 800033a:	f001 ff80 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	2108      	movs	r1, #8
 8000342:	4814      	ldr	r0, [pc, #80]	; (8000394 <mode_selector+0x10c>)
 8000344:	f001 ff7b 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2120      	movs	r1, #32
 800034c:	4811      	ldr	r0, [pc, #68]	; (8000394 <mode_selector+0x10c>)
 800034e:	f001 ff76 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	2110      	movs	r1, #16
 8000356:	480f      	ldr	r0, [pc, #60]	; (8000394 <mode_selector+0x10c>)
 8000358:	f001 ff71 	bl	800223e <HAL_GPIO_WritePin>
				displayCounter();
 800035c:	f000 f81e 	bl	800039c <displayCounter>
			 if(mode > 3){
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <mode_selector+0xfc>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b03      	cmp	r3, #3
 8000366:	dd08      	ble.n	800037a <mode_selector+0xf2>
			 	mode = 1;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <mode_selector+0xfc>)
 800036a:	2201      	movs	r2, #1
 800036c:	601a      	str	r2, [r3, #0]
			 	status = INIT;//RESET MODE CYLCE
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <mode_selector+0x100>)
 8000370:	2201      	movs	r2, #1
 8000372:	601a      	str	r2, [r3, #0]
			 break;
 8000374:	e001      	b.n	800037a <mode_selector+0xf2>
			 break;
 8000376:	bf00      	nop
 8000378:	e000      	b.n	800037c <mode_selector+0xf4>
			 break;
 800037a:	bf00      	nop
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	200000f8 	.word	0x200000f8
 8000384:	20000000 	.word	0x20000000
 8000388:	20000100 	.word	0x20000100
 800038c:	20000108 	.word	0x20000108
 8000390:	40010800 	.word	0x40010800
 8000394:	40010c00 	.word	0x40010c00
 8000398:	20000004 	.word	0x20000004

0800039c <displayCounter>:
#include "display7seg.h"

//Display the counter using UART
void displayCounter() {
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	sprintf(str, "!7SEG:%d%d#\r\n", counter/10, counter%10);//TENS = Counter/10 ; UNITS = Counter%10
 80003a0:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <displayCounter+0x48>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a10      	ldr	r2, [pc, #64]	; (80003e8 <displayCounter+0x4c>)
 80003a6:	fb82 1203 	smull	r1, r2, r2, r3
 80003aa:	1092      	asrs	r2, r2, #2
 80003ac:	17db      	asrs	r3, r3, #31
 80003ae:	1ad0      	subs	r0, r2, r3
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <displayCounter+0x48>)
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <displayCounter+0x4c>)
 80003b6:	fb83 1302 	smull	r1, r3, r3, r2
 80003ba:	1099      	asrs	r1, r3, #2
 80003bc:	17d3      	asrs	r3, r2, #31
 80003be:	1ac9      	subs	r1, r1, r3
 80003c0:	460b      	mov	r3, r1
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	440b      	add	r3, r1
 80003c6:	005b      	lsls	r3, r3, #1
 80003c8:	1ad1      	subs	r1, r2, r3
 80003ca:	460b      	mov	r3, r1
 80003cc:	4602      	mov	r2, r0
 80003ce:	4907      	ldr	r1, [pc, #28]	; (80003ec <displayCounter+0x50>)
 80003d0:	4807      	ldr	r0, [pc, #28]	; (80003f0 <displayCounter+0x54>)
 80003d2:	f003 ff4f 	bl	8004274 <siprintf>
	HAL_UART_Transmit_IT(&huart2, (void*)str, 15);
 80003d6:	220f      	movs	r2, #15
 80003d8:	4905      	ldr	r1, [pc, #20]	; (80003f0 <displayCounter+0x54>)
 80003da:	4806      	ldr	r0, [pc, #24]	; (80003f4 <displayCounter+0x58>)
 80003dc:	f003 fb25 	bl	8003a2a <HAL_UART_Transmit_IT>
}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000108 	.word	0x20000108
 80003e8:	66666667 	.word	0x66666667
 80003ec:	08004b00 	.word	0x08004b00
 80003f0:	2000010c 	.word	0x2000010c
 80003f4:	200001cc 	.word	0x200001cc

080003f8 <fsm_automatic>:
#include "fsm_auto.h"

//FSM = 4 STATES = R-G -> R-Y -> G-R -> Y-R
void fsm_automatic() {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	switch(status) {
 80003fc:	4b75      	ldr	r3, [pc, #468]	; (80005d4 <fsm_automatic+0x1dc>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	3b01      	subs	r3, #1
 8000402:	2b04      	cmp	r3, #4
 8000404:	f200 80e3 	bhi.w	80005ce <fsm_automatic+0x1d6>
 8000408:	a201      	add	r2, pc, #4	; (adr r2, 8000410 <fsm_automatic+0x18>)
 800040a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040e:	bf00      	nop
 8000410:	08000425 	.word	0x08000425
 8000414:	0800046b 	.word	0x0800046b
 8000418:	080004b3 	.word	0x080004b3
 800041c:	08000515 	.word	0x08000515
 8000420:	08000561 	.word	0x08000561
		case INIT: //FIRST a.k.a INIT case R-G, to setup
			status=AUTO_RED_GREEN;
 8000424:	4b6b      	ldr	r3, [pc, #428]	; (80005d4 <fsm_automatic+0x1dc>)
 8000426:	2202      	movs	r2, #2
 8000428:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800042a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800042e:	f001 fa9f 	bl	8001970 <setTimer1>
			counter = timer_red1;
 8000432:	4b69      	ldr	r3, [pc, #420]	; (80005d8 <fsm_automatic+0x1e0>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a69      	ldr	r2, [pc, #420]	; (80005dc <fsm_automatic+0x1e4>)
 8000438:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 800043a:	2201      	movs	r2, #1
 800043c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000440:	4867      	ldr	r0, [pc, #412]	; (80005e0 <fsm_automatic+0x1e8>)
 8000442:	f001 fefc 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2108      	movs	r1, #8
 800044a:	4866      	ldr	r0, [pc, #408]	; (80005e4 <fsm_automatic+0x1ec>)
 800044c:	f001 fef7 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2120      	movs	r1, #32
 8000454:	4863      	ldr	r0, [pc, #396]	; (80005e4 <fsm_automatic+0x1ec>)
 8000456:	f001 fef2 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 800045a:	2201      	movs	r2, #1
 800045c:	2110      	movs	r1, #16
 800045e:	4861      	ldr	r0, [pc, #388]	; (80005e4 <fsm_automatic+0x1ec>)
 8000460:	f001 feed 	bl	800223e <HAL_GPIO_WritePin>

			displayCounter();
 8000464:	f7ff ff9a 	bl	800039c <displayCounter>
			break;
 8000468:	e0b1      	b.n	80005ce <fsm_automatic+0x1d6>
		case AUTO_RED_GREEN: //FIRST again R-G
			if(timer1_flag == 1){
 800046a:	4b5f      	ldr	r3, [pc, #380]	; (80005e8 <fsm_automatic+0x1f0>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b01      	cmp	r3, #1
 8000470:	f040 80a6 	bne.w	80005c0 <fsm_automatic+0x1c8>
				counter--;
 8000474:	4b59      	ldr	r3, [pc, #356]	; (80005dc <fsm_automatic+0x1e4>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	3b01      	subs	r3, #1
 800047a:	4a58      	ldr	r2, [pc, #352]	; (80005dc <fsm_automatic+0x1e4>)
 800047c:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 800047e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000482:	f001 fa75 	bl	8001970 <setTimer1>
				if(counter == timer_yellow2){
 8000486:	4b55      	ldr	r3, [pc, #340]	; (80005dc <fsm_automatic+0x1e4>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	4b58      	ldr	r3, [pc, #352]	; (80005ec <fsm_automatic+0x1f4>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	429a      	cmp	r2, r3
 8000490:	d10c      	bne.n	80004ac <fsm_automatic+0xb4>
					HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8000492:	2201      	movs	r2, #1
 8000494:	2120      	movs	r1, #32
 8000496:	4853      	ldr	r0, [pc, #332]	; (80005e4 <fsm_automatic+0x1ec>)
 8000498:	f001 fed1 	bl	800223e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 800049c:	2201      	movs	r2, #1
 800049e:	2110      	movs	r1, #16
 80004a0:	4850      	ldr	r0, [pc, #320]	; (80005e4 <fsm_automatic+0x1ec>)
 80004a2:	f001 fecc 	bl	800223e <HAL_GPIO_WritePin>
					status = AUTO_RED_YELLOW;
 80004a6:	4b4b      	ldr	r3, [pc, #300]	; (80005d4 <fsm_automatic+0x1dc>)
 80004a8:	2203      	movs	r2, #3
 80004aa:	601a      	str	r2, [r3, #0]
				}
				displayCounter();
 80004ac:	f7ff ff76 	bl	800039c <displayCounter>
			}
			break;
 80004b0:	e086      	b.n	80005c0 <fsm_automatic+0x1c8>
		case AUTO_RED_YELLOW: //SECOND R-Y
			if(timer1_flag == 1){
 80004b2:	4b4d      	ldr	r3, [pc, #308]	; (80005e8 <fsm_automatic+0x1f0>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	f040 8084 	bne.w	80005c4 <fsm_automatic+0x1cc>
				counter--;
 80004bc:	4b47      	ldr	r3, [pc, #284]	; (80005dc <fsm_automatic+0x1e4>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	3b01      	subs	r3, #1
 80004c2:	4a46      	ldr	r2, [pc, #280]	; (80005dc <fsm_automatic+0x1e4>)
 80004c4:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 80004c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ca:	f001 fa51 	bl	8001970 <setTimer1>
				if(counter == 0){
 80004ce:	4b43      	ldr	r3, [pc, #268]	; (80005dc <fsm_automatic+0x1e4>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d11b      	bne.n	800050e <fsm_automatic+0x116>
					counter = timer_green1;
 80004d6:	4b46      	ldr	r3, [pc, #280]	; (80005f0 <fsm_automatic+0x1f8>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a40      	ldr	r2, [pc, #256]	; (80005dc <fsm_automatic+0x1e4>)
 80004dc:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e4:	483e      	ldr	r0, [pc, #248]	; (80005e0 <fsm_automatic+0x1e8>)
 80004e6:	f001 feaa 	bl	800223e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	2108      	movs	r1, #8
 80004ee:	483d      	ldr	r0, [pc, #244]	; (80005e4 <fsm_automatic+0x1ec>)
 80004f0:	f001 fea5 	bl	800223e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2120      	movs	r1, #32
 80004f8:	483a      	ldr	r0, [pc, #232]	; (80005e4 <fsm_automatic+0x1ec>)
 80004fa:	f001 fea0 	bl	800223e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2110      	movs	r1, #16
 8000502:	4838      	ldr	r0, [pc, #224]	; (80005e4 <fsm_automatic+0x1ec>)
 8000504:	f001 fe9b 	bl	800223e <HAL_GPIO_WritePin>
					status = AUTO_GREEN_RED;
 8000508:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <fsm_automatic+0x1dc>)
 800050a:	2204      	movs	r2, #4
 800050c:	601a      	str	r2, [r3, #0]
				}
				displayCounter();
 800050e:	f7ff ff45 	bl	800039c <displayCounter>
			}
			break;
 8000512:	e057      	b.n	80005c4 <fsm_automatic+0x1cc>
		case AUTO_GREEN_RED: //THIRD G-R
			if(timer1_flag == 1){
 8000514:	4b34      	ldr	r3, [pc, #208]	; (80005e8 <fsm_automatic+0x1f0>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d155      	bne.n	80005c8 <fsm_automatic+0x1d0>
				counter--;
 800051c:	4b2f      	ldr	r3, [pc, #188]	; (80005dc <fsm_automatic+0x1e4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3b01      	subs	r3, #1
 8000522:	4a2e      	ldr	r2, [pc, #184]	; (80005dc <fsm_automatic+0x1e4>)
 8000524:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 8000526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052a:	f001 fa21 	bl	8001970 <setTimer1>
				if(counter == 0){
 800052e:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <fsm_automatic+0x1e4>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d111      	bne.n	800055a <fsm_automatic+0x162>
					counter = timer_yellow1;
 8000536:	4b2f      	ldr	r3, [pc, #188]	; (80005f4 <fsm_automatic+0x1fc>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a28      	ldr	r2, [pc, #160]	; (80005dc <fsm_automatic+0x1e4>)
 800053c:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000544:	4826      	ldr	r0, [pc, #152]	; (80005e0 <fsm_automatic+0x1e8>)
 8000546:	f001 fe7a 	bl	800223e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2108      	movs	r1, #8
 800054e:	4825      	ldr	r0, [pc, #148]	; (80005e4 <fsm_automatic+0x1ec>)
 8000550:	f001 fe75 	bl	800223e <HAL_GPIO_WritePin>
					status = AUTO_YELLOW_RED;
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <fsm_automatic+0x1dc>)
 8000556:	2205      	movs	r2, #5
 8000558:	601a      	str	r2, [r3, #0]
				}
				displayCounter();
 800055a:	f7ff ff1f 	bl	800039c <displayCounter>
			}
			break;
 800055e:	e033      	b.n	80005c8 <fsm_automatic+0x1d0>
		case AUTO_YELLOW_RED: //FOURTH Y-R
			if(timer1_flag == 1){
 8000560:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <fsm_automatic+0x1f0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d131      	bne.n	80005cc <fsm_automatic+0x1d4>
				counter--;
 8000568:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <fsm_automatic+0x1e4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3b01      	subs	r3, #1
 800056e:	4a1b      	ldr	r2, [pc, #108]	; (80005dc <fsm_automatic+0x1e4>)
 8000570:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 8000572:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000576:	f001 f9fb 	bl	8001970 <setTimer1>
				if(counter == 0){
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <fsm_automatic+0x1e4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d11b      	bne.n	80005ba <fsm_automatic+0x1c2>
					counter = timer_red1;
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <fsm_automatic+0x1e0>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a15      	ldr	r2, [pc, #84]	; (80005dc <fsm_automatic+0x1e4>)
 8000588:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <fsm_automatic+0x1e8>)
 8000592:	f001 fe54 	bl	800223e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2108      	movs	r1, #8
 800059a:	4812      	ldr	r0, [pc, #72]	; (80005e4 <fsm_automatic+0x1ec>)
 800059c:	f001 fe4f 	bl	800223e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2120      	movs	r1, #32
 80005a4:	480f      	ldr	r0, [pc, #60]	; (80005e4 <fsm_automatic+0x1ec>)
 80005a6:	f001 fe4a 	bl	800223e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2110      	movs	r1, #16
 80005ae:	480d      	ldr	r0, [pc, #52]	; (80005e4 <fsm_automatic+0x1ec>)
 80005b0:	f001 fe45 	bl	800223e <HAL_GPIO_WritePin>
					status = AUTO_RED_GREEN;
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <fsm_automatic+0x1dc>)
 80005b6:	2202      	movs	r2, #2
 80005b8:	601a      	str	r2, [r3, #0]
				}
				displayCounter();
 80005ba:	f7ff feef 	bl	800039c <displayCounter>
			}
			break;
 80005be:	e005      	b.n	80005cc <fsm_automatic+0x1d4>
			break;
 80005c0:	bf00      	nop
 80005c2:	e004      	b.n	80005ce <fsm_automatic+0x1d6>
			break;
 80005c4:	bf00      	nop
 80005c6:	e002      	b.n	80005ce <fsm_automatic+0x1d6>
			break;
 80005c8:	bf00      	nop
 80005ca:	e000      	b.n	80005ce <fsm_automatic+0x1d6>
			break;
 80005cc:	bf00      	nop
		//AND RESET TO FIRST
	}
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000100 	.word	0x20000100
 80005d8:	20000004 	.word	0x20000004
 80005dc:	20000108 	.word	0x20000108
 80005e0:	40010800 	.word	0x40010800
 80005e4:	40010c00 	.word	0x40010c00
 80005e8:	2000011c 	.word	0x2000011c
 80005ec:	20000018 	.word	0x20000018
 80005f0:	20000008 	.word	0x20000008
 80005f4:	2000000c 	.word	0x2000000c

080005f8 <fsm_manual>:
#include "fsm_manual.h"

void fsm_manual() {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	switch(status) {
 80005fc:	4ba1      	ldr	r3, [pc, #644]	; (8000884 <fsm_manual+0x28c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	3b0b      	subs	r3, #11
 8000602:	2b03      	cmp	r3, #3
 8000604:	f200 8132 	bhi.w	800086c <fsm_manual+0x274>
 8000608:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <fsm_manual+0x18>)
 800060a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060e:	bf00      	nop
 8000610:	08000621 	.word	0x08000621
 8000614:	080006b5 	.word	0x080006b5
 8000618:	08000749 	.word	0x08000749
 800061c:	080007db 	.word	0x080007db
		case MAN_RED_GREEN:
			if(timer1_flag==1) {
 8000620:	4b99      	ldr	r3, [pc, #612]	; (8000888 <fsm_manual+0x290>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d121      	bne.n	800066c <fsm_manual+0x74>
				status = AUTO_RED_GREEN;
 8000628:	4b96      	ldr	r3, [pc, #600]	; (8000884 <fsm_manual+0x28c>)
 800062a:	2202      	movs	r2, #2
 800062c:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 800062e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000632:	f001 f99d 	bl	8001970 <setTimer1>
				counter = timer_red1;
 8000636:	4b95      	ldr	r3, [pc, #596]	; (800088c <fsm_manual+0x294>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a95      	ldr	r2, [pc, #596]	; (8000890 <fsm_manual+0x298>)
 800063c:	6013      	str	r3, [r2, #0]
				displayCounter();
 800063e:	f7ff fead 	bl	800039c <displayCounter>

				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8000642:	2201      	movs	r2, #1
 8000644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000648:	4892      	ldr	r0, [pc, #584]	; (8000894 <fsm_manual+0x29c>)
 800064a:	f001 fdf8 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2108      	movs	r1, #8
 8000652:	4891      	ldr	r0, [pc, #580]	; (8000898 <fsm_manual+0x2a0>)
 8000654:	f001 fdf3 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2120      	movs	r1, #32
 800065c:	488e      	ldr	r0, [pc, #568]	; (8000898 <fsm_manual+0x2a0>)
 800065e:	f001 fdee 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2110      	movs	r1, #16
 8000666:	488c      	ldr	r0, [pc, #560]	; (8000898 <fsm_manual+0x2a0>)
 8000668:	f001 fde9 	bl	800223e <HAL_GPIO_WritePin>
			}

			if (isButtonPressed(2)) {
 800066c:	2002      	movs	r0, #2
 800066e:	f7ff fd6d 	bl	800014c <isButtonPressed>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	f000 80fb 	beq.w	8000870 <fsm_manual+0x278>
				status = MAN_RED_YELLOW;
 800067a:	4b82      	ldr	r3, [pc, #520]	; (8000884 <fsm_manual+0x28c>)
 800067c:	220c      	movs	r2, #12
 800067e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000686:	4883      	ldr	r0, [pc, #524]	; (8000894 <fsm_manual+0x29c>)
 8000688:	f001 fdd9 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2108      	movs	r1, #8
 8000690:	4881      	ldr	r0, [pc, #516]	; (8000898 <fsm_manual+0x2a0>)
 8000692:	f001 fdd4 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2120      	movs	r1, #32
 800069a:	487f      	ldr	r0, [pc, #508]	; (8000898 <fsm_manual+0x2a0>)
 800069c:	f001 fdcf 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2110      	movs	r1, #16
 80006a4:	487c      	ldr	r0, [pc, #496]	; (8000898 <fsm_manual+0x2a0>)
 80006a6:	f001 fdca 	bl	800223e <HAL_GPIO_WritePin>
				setTimer1(60000);
 80006aa:	f64e 2060 	movw	r0, #60000	; 0xea60
 80006ae:	f001 f95f 	bl	8001970 <setTimer1>
			}
			break;
 80006b2:	e0dd      	b.n	8000870 <fsm_manual+0x278>
		case MAN_RED_YELLOW:
			if(timer1_flag==1) {
 80006b4:	4b74      	ldr	r3, [pc, #464]	; (8000888 <fsm_manual+0x290>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d121      	bne.n	8000700 <fsm_manual+0x108>
				status = AUTO_RED_GREEN;
 80006bc:	4b71      	ldr	r3, [pc, #452]	; (8000884 <fsm_manual+0x28c>)
 80006be:	2202      	movs	r2, #2
 80006c0:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 80006c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c6:	f001 f953 	bl	8001970 <setTimer1>
				counter = timer_red1;
 80006ca:	4b70      	ldr	r3, [pc, #448]	; (800088c <fsm_manual+0x294>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a70      	ldr	r2, [pc, #448]	; (8000890 <fsm_manual+0x298>)
 80006d0:	6013      	str	r3, [r2, #0]
				displayCounter();
 80006d2:	f7ff fe63 	bl	800039c <displayCounter>

				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006dc:	486d      	ldr	r0, [pc, #436]	; (8000894 <fsm_manual+0x29c>)
 80006de:	f001 fdae 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2108      	movs	r1, #8
 80006e6:	486c      	ldr	r0, [pc, #432]	; (8000898 <fsm_manual+0x2a0>)
 80006e8:	f001 fda9 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2120      	movs	r1, #32
 80006f0:	4869      	ldr	r0, [pc, #420]	; (8000898 <fsm_manual+0x2a0>)
 80006f2:	f001 fda4 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2110      	movs	r1, #16
 80006fa:	4867      	ldr	r0, [pc, #412]	; (8000898 <fsm_manual+0x2a0>)
 80006fc:	f001 fd9f 	bl	800223e <HAL_GPIO_WritePin>
			}

			if (isButtonPressed(2)) {
 8000700:	2002      	movs	r0, #2
 8000702:	f7ff fd23 	bl	800014c <isButtonPressed>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	f000 80b3 	beq.w	8000874 <fsm_manual+0x27c>
				status = MAN_GREEN_RED;
 800070e:	4b5d      	ldr	r3, [pc, #372]	; (8000884 <fsm_manual+0x28c>)
 8000710:	220d      	movs	r2, #13
 8000712:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071a:	485e      	ldr	r0, [pc, #376]	; (8000894 <fsm_manual+0x29c>)
 800071c:	f001 fd8f 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2108      	movs	r1, #8
 8000724:	485c      	ldr	r0, [pc, #368]	; (8000898 <fsm_manual+0x2a0>)
 8000726:	f001 fd8a 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2120      	movs	r1, #32
 800072e:	485a      	ldr	r0, [pc, #360]	; (8000898 <fsm_manual+0x2a0>)
 8000730:	f001 fd85 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2110      	movs	r1, #16
 8000738:	4857      	ldr	r0, [pc, #348]	; (8000898 <fsm_manual+0x2a0>)
 800073a:	f001 fd80 	bl	800223e <HAL_GPIO_WritePin>
				setTimer1(60000);
 800073e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000742:	f001 f915 	bl	8001970 <setTimer1>
			}
			break;
 8000746:	e095      	b.n	8000874 <fsm_manual+0x27c>
		case MAN_GREEN_RED:
			if(timer1_flag==1) {
 8000748:	4b4f      	ldr	r3, [pc, #316]	; (8000888 <fsm_manual+0x290>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d121      	bne.n	8000794 <fsm_manual+0x19c>
				status = AUTO_RED_GREEN;
 8000750:	4b4c      	ldr	r3, [pc, #304]	; (8000884 <fsm_manual+0x28c>)
 8000752:	2202      	movs	r2, #2
 8000754:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000756:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800075a:	f001 f909 	bl	8001970 <setTimer1>
				counter = timer_red1;
 800075e:	4b4b      	ldr	r3, [pc, #300]	; (800088c <fsm_manual+0x294>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a4b      	ldr	r2, [pc, #300]	; (8000890 <fsm_manual+0x298>)
 8000764:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000766:	f7ff fe19 	bl	800039c <displayCounter>

				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000770:	4848      	ldr	r0, [pc, #288]	; (8000894 <fsm_manual+0x29c>)
 8000772:	f001 fd64 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2108      	movs	r1, #8
 800077a:	4847      	ldr	r0, [pc, #284]	; (8000898 <fsm_manual+0x2a0>)
 800077c:	f001 fd5f 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8000780:	2201      	movs	r2, #1
 8000782:	2120      	movs	r1, #32
 8000784:	4844      	ldr	r0, [pc, #272]	; (8000898 <fsm_manual+0x2a0>)
 8000786:	f001 fd5a 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 800078a:	2201      	movs	r2, #1
 800078c:	2110      	movs	r1, #16
 800078e:	4842      	ldr	r0, [pc, #264]	; (8000898 <fsm_manual+0x2a0>)
 8000790:	f001 fd55 	bl	800223e <HAL_GPIO_WritePin>

			}

			if (isButtonPressed(2)) {
 8000794:	2002      	movs	r0, #2
 8000796:	f7ff fcd9 	bl	800014c <isButtonPressed>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d06b      	beq.n	8000878 <fsm_manual+0x280>
				status = MAN_YELLOW_RED;
 80007a0:	4b38      	ldr	r3, [pc, #224]	; (8000884 <fsm_manual+0x28c>)
 80007a2:	220e      	movs	r2, #14
 80007a4:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ac:	4839      	ldr	r0, [pc, #228]	; (8000894 <fsm_manual+0x29c>)
 80007ae:	f001 fd46 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2108      	movs	r1, #8
 80007b6:	4838      	ldr	r0, [pc, #224]	; (8000898 <fsm_manual+0x2a0>)
 80007b8:	f001 fd41 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2120      	movs	r1, #32
 80007c0:	4835      	ldr	r0, [pc, #212]	; (8000898 <fsm_manual+0x2a0>)
 80007c2:	f001 fd3c 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2110      	movs	r1, #16
 80007ca:	4833      	ldr	r0, [pc, #204]	; (8000898 <fsm_manual+0x2a0>)
 80007cc:	f001 fd37 	bl	800223e <HAL_GPIO_WritePin>
				setTimer1(60000);
 80007d0:	f64e 2060 	movw	r0, #60000	; 0xea60
 80007d4:	f001 f8cc 	bl	8001970 <setTimer1>
			}
			break;
 80007d8:	e04e      	b.n	8000878 <fsm_manual+0x280>
		case MAN_YELLOW_RED:
			if(timer1_flag==1) {
 80007da:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <fsm_manual+0x290>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d121      	bne.n	8000826 <fsm_manual+0x22e>
				status = AUTO_RED_GREEN;
 80007e2:	4b28      	ldr	r3, [pc, #160]	; (8000884 <fsm_manual+0x28c>)
 80007e4:	2202      	movs	r2, #2
 80007e6:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 80007e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ec:	f001 f8c0 	bl	8001970 <setTimer1>
				counter = timer_red1;
 80007f0:	4b26      	ldr	r3, [pc, #152]	; (800088c <fsm_manual+0x294>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a26      	ldr	r2, [pc, #152]	; (8000890 <fsm_manual+0x298>)
 80007f6:	6013      	str	r3, [r2, #0]
				displayCounter();
 80007f8:	f7ff fdd0 	bl	800039c <displayCounter>

				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000802:	4824      	ldr	r0, [pc, #144]	; (8000894 <fsm_manual+0x29c>)
 8000804:	f001 fd1b 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2108      	movs	r1, #8
 800080c:	4822      	ldr	r0, [pc, #136]	; (8000898 <fsm_manual+0x2a0>)
 800080e:	f001 fd16 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2120      	movs	r1, #32
 8000816:	4820      	ldr	r0, [pc, #128]	; (8000898 <fsm_manual+0x2a0>)
 8000818:	f001 fd11 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2110      	movs	r1, #16
 8000820:	481d      	ldr	r0, [pc, #116]	; (8000898 <fsm_manual+0x2a0>)
 8000822:	f001 fd0c 	bl	800223e <HAL_GPIO_WritePin>
			}

			if (isButtonPressed(2)) {
 8000826:	2002      	movs	r0, #2
 8000828:	f7ff fc90 	bl	800014c <isButtonPressed>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d024      	beq.n	800087c <fsm_manual+0x284>
				status = MAN_RED_GREEN;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <fsm_manual+0x28c>)
 8000834:	220b      	movs	r2, #11
 8000836:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083e:	4815      	ldr	r0, [pc, #84]	; (8000894 <fsm_manual+0x29c>)
 8000840:	f001 fcfd 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2108      	movs	r1, #8
 8000848:	4813      	ldr	r0, [pc, #76]	; (8000898 <fsm_manual+0x2a0>)
 800084a:	f001 fcf8 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2120      	movs	r1, #32
 8000852:	4811      	ldr	r0, [pc, #68]	; (8000898 <fsm_manual+0x2a0>)
 8000854:	f001 fcf3 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2110      	movs	r1, #16
 800085c:	480e      	ldr	r0, [pc, #56]	; (8000898 <fsm_manual+0x2a0>)
 800085e:	f001 fcee 	bl	800223e <HAL_GPIO_WritePin>
				setTimer1(60000);
 8000862:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000866:	f001 f883 	bl	8001970 <setTimer1>
			}
			break;
 800086a:	e007      	b.n	800087c <fsm_manual+0x284>
		default: //DO NOTHING
			break;
 800086c:	bf00      	nop
 800086e:	e006      	b.n	800087e <fsm_manual+0x286>
			break;
 8000870:	bf00      	nop
 8000872:	e004      	b.n	800087e <fsm_manual+0x286>
			break;
 8000874:	bf00      	nop
 8000876:	e002      	b.n	800087e <fsm_manual+0x286>
			break;
 8000878:	bf00      	nop
 800087a:	e000      	b.n	800087e <fsm_manual+0x286>
			break;
 800087c:	bf00      	nop
	}
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000100 	.word	0x20000100
 8000888:	2000011c 	.word	0x2000011c
 800088c:	20000004 	.word	0x20000004
 8000890:	20000108 	.word	0x20000108
 8000894:	40010800 	.word	0x40010800
 8000898:	40010c00 	.word	0x40010c00

0800089c <fsm_pedestrian_run>:
#include "fsm_pedestrian.h"
int PWM = 0;
void fsm_pedestrian_run() {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	switch(pedestrianStatus) {
 80008a0:	4b8e      	ldr	r3, [pc, #568]	; (8000adc <fsm_pedestrian_run+0x240>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	f200 810e 	bhi.w	8000ac8 <fsm_pedestrian_run+0x22c>
 80008ac:	a201      	add	r2, pc, #4	; (adr r2, 80008b4 <fsm_pedestrian_run+0x18>)
 80008ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b2:	bf00      	nop
 80008b4:	080008c5 	.word	0x080008c5
 80008b8:	080008e5 	.word	0x080008e5
 80008bc:	080009a3 	.word	0x080009a3
 80008c0:	08000a2d 	.word	0x08000a2d
		case INIT:
			HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ca:	4885      	ldr	r0, [pc, #532]	; (8000ae0 <fsm_pedestrian_run+0x244>)
 80008cc:	f001 fcb7 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d6:	4883      	ldr	r0, [pc, #524]	; (8000ae4 <fsm_pedestrian_run+0x248>)
 80008d8:	f001 fcb1 	bl	800223e <HAL_GPIO_WritePin>
			pedestrianStatus = PED_NONE;
 80008dc:	4b7f      	ldr	r3, [pc, #508]	; (8000adc <fsm_pedestrian_run+0x240>)
 80008de:	2202      	movs	r2, #2
 80008e0:	601a      	str	r2, [r3, #0]
			break;
 80008e2:	e0f8      	b.n	8000ad6 <fsm_pedestrian_run+0x23a>
		case PED_NONE:
			if(isButtonPressed(0)) {
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff fc31 	bl	800014c <isButtonPressed>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	f000 80ed 	beq.w	8000acc <fsm_pedestrian_run+0x230>
				if(status == AUTO_RED_GREEN || status == AUTO_RED_YELLOW) {
 80008f2:	4b7d      	ldr	r3, [pc, #500]	; (8000ae8 <fsm_pedestrian_run+0x24c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d003      	beq.n	8000902 <fsm_pedestrian_run+0x66>
 80008fa:	4b7b      	ldr	r3, [pc, #492]	; (8000ae8 <fsm_pedestrian_run+0x24c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d112      	bne.n	8000928 <fsm_pedestrian_run+0x8c>
					pedestrianStatus = PED_GREEN;
 8000902:	4b76      	ldr	r3, [pc, #472]	; (8000adc <fsm_pedestrian_run+0x240>)
 8000904:	2204      	movs	r2, #4
 8000906:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800090e:	4874      	ldr	r0, [pc, #464]	; (8000ae0 <fsm_pedestrian_run+0x244>)
 8000910:	f001 fc95 	bl	800223e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091a:	4872      	ldr	r0, [pc, #456]	; (8000ae4 <fsm_pedestrian_run+0x248>)
 800091c:	f001 fc8f 	bl	800223e <HAL_GPIO_WritePin>
					setTimer2(250);
 8000920:	20fa      	movs	r0, #250	; 0xfa
 8000922:	f001 f841 	bl	80019a8 <setTimer2>
 8000926:	e03b      	b.n	80009a0 <fsm_pedestrian_run+0x104>
				}else if(status == MAN_RED_GREEN || status == MAN_RED_YELLOW ) {
 8000928:	4b6f      	ldr	r3, [pc, #444]	; (8000ae8 <fsm_pedestrian_run+0x24c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b0b      	cmp	r3, #11
 800092e:	d003      	beq.n	8000938 <fsm_pedestrian_run+0x9c>
 8000930:	4b6d      	ldr	r3, [pc, #436]	; (8000ae8 <fsm_pedestrian_run+0x24c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b0c      	cmp	r3, #12
 8000936:	d112      	bne.n	800095e <fsm_pedestrian_run+0xc2>
					pedestrianStatus = PED_GREEN;
 8000938:	4b68      	ldr	r3, [pc, #416]	; (8000adc <fsm_pedestrian_run+0x240>)
 800093a:	2204      	movs	r2, #4
 800093c:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000944:	4866      	ldr	r0, [pc, #408]	; (8000ae0 <fsm_pedestrian_run+0x244>)
 8000946:	f001 fc7a 	bl	800223e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000950:	4864      	ldr	r0, [pc, #400]	; (8000ae4 <fsm_pedestrian_run+0x248>)
 8000952:	f001 fc74 	bl	800223e <HAL_GPIO_WritePin>
					setTimer2(0);
 8000956:	2000      	movs	r0, #0
 8000958:	f001 f826 	bl	80019a8 <setTimer2>
 800095c:	e020      	b.n	80009a0 <fsm_pedestrian_run+0x104>
				}
				else if(status == AUTO_GREEN_RED || status == MAN_GREEN_RED || status == AUTO_YELLOW_RED || status == MAN_YELLOW_RED){
 800095e:	4b62      	ldr	r3, [pc, #392]	; (8000ae8 <fsm_pedestrian_run+0x24c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b04      	cmp	r3, #4
 8000964:	d00c      	beq.n	8000980 <fsm_pedestrian_run+0xe4>
 8000966:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <fsm_pedestrian_run+0x24c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b0d      	cmp	r3, #13
 800096c:	d008      	beq.n	8000980 <fsm_pedestrian_run+0xe4>
 800096e:	4b5e      	ldr	r3, [pc, #376]	; (8000ae8 <fsm_pedestrian_run+0x24c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b05      	cmp	r3, #5
 8000974:	d004      	beq.n	8000980 <fsm_pedestrian_run+0xe4>
 8000976:	4b5c      	ldr	r3, [pc, #368]	; (8000ae8 <fsm_pedestrian_run+0x24c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b0e      	cmp	r3, #14
 800097c:	f040 80a6 	bne.w	8000acc <fsm_pedestrian_run+0x230>
					pedestrianStatus = PED_RED;
 8000980:	4b56      	ldr	r3, [pc, #344]	; (8000adc <fsm_pedestrian_run+0x240>)
 8000982:	2203      	movs	r2, #3
 8000984:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098c:	4854      	ldr	r0, [pc, #336]	; (8000ae0 <fsm_pedestrian_run+0x244>)
 800098e:	f001 fc56 	bl	800223e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000998:	4852      	ldr	r0, [pc, #328]	; (8000ae4 <fsm_pedestrian_run+0x248>)
 800099a:	f001 fc50 	bl	800223e <HAL_GPIO_WritePin>
				}
			}
			break;
 800099e:	e095      	b.n	8000acc <fsm_pedestrian_run+0x230>
 80009a0:	e094      	b.n	8000acc <fsm_pedestrian_run+0x230>
		case PED_RED:
			if(timer2_flag==1) {
 80009a2:	4b52      	ldr	r3, [pc, #328]	; (8000aec <fsm_pedestrian_run+0x250>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d112      	bne.n	80009d0 <fsm_pedestrian_run+0x134>
				timer2_flag = 0;
 80009aa:	4b50      	ldr	r3, [pc, #320]	; (8000aec <fsm_pedestrian_run+0x250>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
				pedestrianStatus = PED_NONE;
 80009b0:	4b4a      	ldr	r3, [pc, #296]	; (8000adc <fsm_pedestrian_run+0x240>)
 80009b2:	2202      	movs	r2, #2
 80009b4:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009bc:	4848      	ldr	r0, [pc, #288]	; (8000ae0 <fsm_pedestrian_run+0x244>)
 80009be:	f001 fc3e 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c8:	4846      	ldr	r0, [pc, #280]	; (8000ae4 <fsm_pedestrian_run+0x248>)
 80009ca:	f001 fc38 	bl	800223e <HAL_GPIO_WritePin>
				break;
 80009ce:	e082      	b.n	8000ad6 <fsm_pedestrian_run+0x23a>
			}
			else if(status == AUTO_RED_GREEN) {
 80009d0:	4b45      	ldr	r3, [pc, #276]	; (8000ae8 <fsm_pedestrian_run+0x24c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d112      	bne.n	80009fe <fsm_pedestrian_run+0x162>
				pedestrianStatus = PED_GREEN;
 80009d8:	4b40      	ldr	r3, [pc, #256]	; (8000adc <fsm_pedestrian_run+0x240>)
 80009da:	2204      	movs	r2, #4
 80009dc:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e4:	483e      	ldr	r0, [pc, #248]	; (8000ae0 <fsm_pedestrian_run+0x244>)
 80009e6:	f001 fc2a 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f0:	483c      	ldr	r0, [pc, #240]	; (8000ae4 <fsm_pedestrian_run+0x248>)
 80009f2:	f001 fc24 	bl	800223e <HAL_GPIO_WritePin>
				setTimer2(250);
 80009f6:	20fa      	movs	r0, #250	; 0xfa
 80009f8:	f000 ffd6 	bl	80019a8 <setTimer2>
				pedestrianStatus = PED_GREEN;
				HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
				setTimer2(0);
			}
			break;
 80009fc:	e068      	b.n	8000ad0 <fsm_pedestrian_run+0x234>
			else if (status == MAN_RED_GREEN) {
 80009fe:	4b3a      	ldr	r3, [pc, #232]	; (8000ae8 <fsm_pedestrian_run+0x24c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b0b      	cmp	r3, #11
 8000a04:	d164      	bne.n	8000ad0 <fsm_pedestrian_run+0x234>
				pedestrianStatus = PED_GREEN;
 8000a06:	4b35      	ldr	r3, [pc, #212]	; (8000adc <fsm_pedestrian_run+0x240>)
 8000a08:	2204      	movs	r2, #4
 8000a0a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a12:	4833      	ldr	r0, [pc, #204]	; (8000ae0 <fsm_pedestrian_run+0x244>)
 8000a14:	f001 fc13 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1e:	4831      	ldr	r0, [pc, #196]	; (8000ae4 <fsm_pedestrian_run+0x248>)
 8000a20:	f001 fc0d 	bl	800223e <HAL_GPIO_WritePin>
				setTimer2(0);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 ffbf 	bl	80019a8 <setTimer2>
			break;
 8000a2a:	e051      	b.n	8000ad0 <fsm_pedestrian_run+0x234>
		case PED_GREEN:
			if(timer2_flag==1) {
 8000a2c:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <fsm_pedestrian_run+0x250>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d121      	bne.n	8000a78 <fsm_pedestrian_run+0x1dc>
				if(PWM == 0) {
 8000a34:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <fsm_pedestrian_run+0x254>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d112      	bne.n	8000a62 <fsm_pedestrian_run+0x1c6>
					PWM = 63-63*counter/timer_red1;
 8000a3c:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <fsm_pedestrian_run+0x258>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4613      	mov	r3, r2
 8000a42:	019b      	lsls	r3, r3, #6
 8000a44:	1a9a      	subs	r2, r3, r2
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <fsm_pedestrian_run+0x25c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a4e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000a52:	4a27      	ldr	r2, [pc, #156]	; (8000af0 <fsm_pedestrian_run+0x254>)
 8000a54:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
 8000a56:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <fsm_pedestrian_run+0x254>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	4b28      	ldr	r3, [pc, #160]	; (8000afc <fsm_pedestrian_run+0x260>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000a60:	e007      	b.n	8000a72 <fsm_pedestrian_run+0x1d6>
				} else {
					PWM = 0;
 8000a62:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <fsm_pedestrian_run+0x254>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
 8000a68:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <fsm_pedestrian_run+0x254>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b23      	ldr	r3, [pc, #140]	; (8000afc <fsm_pedestrian_run+0x260>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	635a      	str	r2, [r3, #52]	; 0x34
				}
				setTimer2(250);
 8000a72:	20fa      	movs	r0, #250	; 0xfa
 8000a74:	f000 ff98 	bl	80019a8 <setTimer2>
			}
			if(status == AUTO_GREEN_RED || status == MAN_GREEN_RED || status == AUTO_YELLOW_RED || status == MAN_YELLOW_RED) {
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <fsm_pedestrian_run+0x24c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d00b      	beq.n	8000a98 <fsm_pedestrian_run+0x1fc>
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <fsm_pedestrian_run+0x24c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b0d      	cmp	r3, #13
 8000a86:	d007      	beq.n	8000a98 <fsm_pedestrian_run+0x1fc>
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <fsm_pedestrian_run+0x24c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b05      	cmp	r3, #5
 8000a8e:	d003      	beq.n	8000a98 <fsm_pedestrian_run+0x1fc>
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <fsm_pedestrian_run+0x24c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b0e      	cmp	r3, #14
 8000a96:	d11d      	bne.n	8000ad4 <fsm_pedestrian_run+0x238>
				pedestrianStatus = PED_RED;
 8000a98:	4b10      	ldr	r3, [pc, #64]	; (8000adc <fsm_pedestrian_run+0x240>)
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	601a      	str	r2, [r3, #0]
				setTimer2(2000);
 8000a9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000aa2:	f000 ff81 	bl	80019a8 <setTimer2>
				HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <fsm_pedestrian_run+0x244>)
 8000aae:	f001 fbc6 	bl	800223e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab8:	480a      	ldr	r0, [pc, #40]	; (8000ae4 <fsm_pedestrian_run+0x248>)
 8000aba:	f001 fbc0 	bl	800223e <HAL_GPIO_WritePin>
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,0);
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <fsm_pedestrian_run+0x260>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	635a      	str	r2, [r3, #52]	; 0x34
			}
			break;
 8000ac6:	e005      	b.n	8000ad4 <fsm_pedestrian_run+0x238>
		default:
			break;
 8000ac8:	bf00      	nop
 8000aca:	e004      	b.n	8000ad6 <fsm_pedestrian_run+0x23a>
			break;
 8000acc:	bf00      	nop
 8000ace:	e002      	b.n	8000ad6 <fsm_pedestrian_run+0x23a>
			break;
 8000ad0:	bf00      	nop
 8000ad2:	e000      	b.n	8000ad6 <fsm_pedestrian_run+0x23a>
			break;
 8000ad4:	bf00      	nop
	}
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000104 	.word	0x20000104
 8000ae0:	40010c00 	.word	0x40010c00
 8000ae4:	40010800 	.word	0x40010800
 8000ae8:	20000100 	.word	0x20000100
 8000aec:	20000124 	.word	0x20000124
 8000af0:	200000fc 	.word	0x200000fc
 8000af4:	20000108 	.word	0x20000108
 8000af8:	20000004 	.word	0x20000004
 8000afc:	2000013c 	.word	0x2000013c

08000b00 <fsm_tuning>:
#include "fsm_tuning.h"

void fsm_tuning() {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	switch(status) {
 8000b04:	4baa      	ldr	r3, [pc, #680]	; (8000db0 <fsm_tuning+0x2b0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3b15      	subs	r3, #21
 8000b0a:	2b05      	cmp	r3, #5
 8000b0c:	f200 83c0 	bhi.w	8001290 <fsm_tuning+0x790>
 8000b10:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <fsm_tuning+0x18>)
 8000b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b16:	bf00      	nop
 8000b18:	08000b31 	.word	0x08000b31
 8000b1c:	08000c71 	.word	0x08000c71
 8000b20:	08000ddd 	.word	0x08000ddd
 8000b24:	08000efb 	.word	0x08000efb
 8000b28:	08001045 	.word	0x08001045
 8000b2c:	0800116d 	.word	0x0800116d
	case TUNING_RED1:
		if(timer1_flag==1){
 8000b30:	4ba0      	ldr	r3, [pc, #640]	; (8000db4 <fsm_tuning+0x2b4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d10b      	bne.n	8000b50 <fsm_tuning+0x50>
			timer1_flag = 0;
 8000b38:	4b9e      	ldr	r3, [pc, #632]	; (8000db4 <fsm_tuning+0x2b4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000b3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b42:	f000 ff15 	bl	8001970 <setTimer1>
			HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 8000b46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b4a:	489b      	ldr	r0, [pc, #620]	; (8000db8 <fsm_tuning+0x2b8>)
 8000b4c:	f001 fb8f 	bl	800226e <HAL_GPIO_TogglePin>
		}
		if(isButtonPressed(1)) {
 8000b50:	2001      	movs	r0, #1
 8000b52:	f7ff fafb 	bl	800014c <isButtonPressed>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d036      	beq.n	8000bca <fsm_tuning+0xca>
			status = AUTO_RED_GREEN;
 8000b5c:	4b94      	ldr	r3, [pc, #592]	; (8000db0 <fsm_tuning+0x2b0>)
 8000b5e:	2202      	movs	r2, #2
 8000b60:	601a      	str	r2, [r3, #0]
			timer_red1 = counter;
 8000b62:	4b96      	ldr	r3, [pc, #600]	; (8000dbc <fsm_tuning+0x2bc>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a96      	ldr	r2, [pc, #600]	; (8000dc0 <fsm_tuning+0x2c0>)
 8000b68:	6013      	str	r3, [r2, #0]
			if(timer_red1 <= timer_yellow2) timer_yellow2 = 1;
 8000b6a:	4b95      	ldr	r3, [pc, #596]	; (8000dc0 <fsm_tuning+0x2c0>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	4b95      	ldr	r3, [pc, #596]	; (8000dc4 <fsm_tuning+0x2c4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	dc02      	bgt.n	8000b7c <fsm_tuning+0x7c>
 8000b76:	4b93      	ldr	r3, [pc, #588]	; (8000dc4 <fsm_tuning+0x2c4>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]
			timer_green2 = timer_red1 - timer_yellow2;
 8000b7c:	4b90      	ldr	r3, [pc, #576]	; (8000dc0 <fsm_tuning+0x2c0>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b90      	ldr	r3, [pc, #576]	; (8000dc4 <fsm_tuning+0x2c4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	4a90      	ldr	r2, [pc, #576]	; (8000dc8 <fsm_tuning+0x2c8>)
 8000b88:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000b8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b8e:	f000 feef 	bl	8001970 <setTimer1>
			counter = timer_red1;
 8000b92:	4b8b      	ldr	r3, [pc, #556]	; (8000dc0 <fsm_tuning+0x2c0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a89      	ldr	r2, [pc, #548]	; (8000dbc <fsm_tuning+0x2bc>)
 8000b98:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba0:	4885      	ldr	r0, [pc, #532]	; (8000db8 <fsm_tuning+0x2b8>)
 8000ba2:	f001 fb4c 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2108      	movs	r1, #8
 8000baa:	4888      	ldr	r0, [pc, #544]	; (8000dcc <fsm_tuning+0x2cc>)
 8000bac:	f001 fb47 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2120      	movs	r1, #32
 8000bb4:	4885      	ldr	r0, [pc, #532]	; (8000dcc <fsm_tuning+0x2cc>)
 8000bb6:	f001 fb42 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2110      	movs	r1, #16
 8000bbe:	4883      	ldr	r0, [pc, #524]	; (8000dcc <fsm_tuning+0x2cc>)
 8000bc0:	f001 fb3d 	bl	800223e <HAL_GPIO_WritePin>
			displayCounter();
 8000bc4:	f7ff fbea 	bl	800039c <displayCounter>
			break;
 8000bc8:	e36f      	b.n	80012aa <fsm_tuning+0x7aa>
		}
		if(isButtonPressed(2)) {
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f7ff fabe 	bl	800014c <isButtonPressed>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d036      	beq.n	8000c44 <fsm_tuning+0x144>
			status = TUNING_RED2;
 8000bd6:	4b76      	ldr	r3, [pc, #472]	; (8000db0 <fsm_tuning+0x2b0>)
 8000bd8:	2216      	movs	r2, #22
 8000bda:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be0:	f000 fec6 	bl	8001970 <setTimer1>
			timer_red1 = counter;
 8000be4:	4b75      	ldr	r3, [pc, #468]	; (8000dbc <fsm_tuning+0x2bc>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a75      	ldr	r2, [pc, #468]	; (8000dc0 <fsm_tuning+0x2c0>)
 8000bea:	6013      	str	r3, [r2, #0]
			if(timer_red1 <= timer_yellow2) timer_yellow2 = 1;
 8000bec:	4b74      	ldr	r3, [pc, #464]	; (8000dc0 <fsm_tuning+0x2c0>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b74      	ldr	r3, [pc, #464]	; (8000dc4 <fsm_tuning+0x2c4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dc02      	bgt.n	8000bfe <fsm_tuning+0xfe>
 8000bf8:	4b72      	ldr	r3, [pc, #456]	; (8000dc4 <fsm_tuning+0x2c4>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	601a      	str	r2, [r3, #0]
			timer_green2 = timer_red1 - timer_yellow2;
 8000bfe:	4b70      	ldr	r3, [pc, #448]	; (8000dc0 <fsm_tuning+0x2c0>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4b70      	ldr	r3, [pc, #448]	; (8000dc4 <fsm_tuning+0x2c4>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	4a6f      	ldr	r2, [pc, #444]	; (8000dc8 <fsm_tuning+0x2c8>)
 8000c0a:	6013      	str	r3, [r2, #0]
			counter = timer_red2;
 8000c0c:	4b70      	ldr	r3, [pc, #448]	; (8000dd0 <fsm_tuning+0x2d0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a6a      	ldr	r2, [pc, #424]	; (8000dbc <fsm_tuning+0x2bc>)
 8000c12:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c1a:	4867      	ldr	r0, [pc, #412]	; (8000db8 <fsm_tuning+0x2b8>)
 8000c1c:	f001 fb0f 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2108      	movs	r1, #8
 8000c24:	4869      	ldr	r0, [pc, #420]	; (8000dcc <fsm_tuning+0x2cc>)
 8000c26:	f001 fb0a 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2120      	movs	r1, #32
 8000c2e:	4867      	ldr	r0, [pc, #412]	; (8000dcc <fsm_tuning+0x2cc>)
 8000c30:	f001 fb05 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2110      	movs	r1, #16
 8000c38:	4864      	ldr	r0, [pc, #400]	; (8000dcc <fsm_tuning+0x2cc>)
 8000c3a:	f001 fb00 	bl	800223e <HAL_GPIO_WritePin>
			displayCounter();
 8000c3e:	f7ff fbad 	bl	800039c <displayCounter>
			break;
 8000c42:	e332      	b.n	80012aa <fsm_tuning+0x7aa>
		}
		if(isButtonPressed(3)) {
 8000c44:	2003      	movs	r0, #3
 8000c46:	f7ff fa81 	bl	800014c <isButtonPressed>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f000 8321 	beq.w	8001294 <fsm_tuning+0x794>
			counter++;
 8000c52:	4b5a      	ldr	r3, [pc, #360]	; (8000dbc <fsm_tuning+0x2bc>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3301      	adds	r3, #1
 8000c58:	4a58      	ldr	r2, [pc, #352]	; (8000dbc <fsm_tuning+0x2bc>)
 8000c5a:	6013      	str	r3, [r2, #0]
			if(counter > 99) {
 8000c5c:	4b57      	ldr	r3, [pc, #348]	; (8000dbc <fsm_tuning+0x2bc>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b63      	cmp	r3, #99	; 0x63
 8000c62:	dd02      	ble.n	8000c6a <fsm_tuning+0x16a>
				counter = 2;
 8000c64:	4b55      	ldr	r3, [pc, #340]	; (8000dbc <fsm_tuning+0x2bc>)
 8000c66:	2202      	movs	r2, #2
 8000c68:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000c6a:	f7ff fb97 	bl	800039c <displayCounter>
		}
		break;
 8000c6e:	e311      	b.n	8001294 <fsm_tuning+0x794>
	case TUNING_RED2:
		if(timer1_flag==1) {
 8000c70:	4b50      	ldr	r3, [pc, #320]	; (8000db4 <fsm_tuning+0x2b4>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d10a      	bne.n	8000c8e <fsm_tuning+0x18e>
			timer1_flag = 0;
 8000c78:	4b4e      	ldr	r3, [pc, #312]	; (8000db4 <fsm_tuning+0x2b4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000c7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c82:	f000 fe75 	bl	8001970 <setTimer1>
			HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 8000c86:	2120      	movs	r1, #32
 8000c88:	4850      	ldr	r0, [pc, #320]	; (8000dcc <fsm_tuning+0x2cc>)
 8000c8a:	f001 faf0 	bl	800226e <HAL_GPIO_TogglePin>
		}
		if(isButtonPressed(1)) {
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f7ff fa5c 	bl	800014c <isButtonPressed>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d036      	beq.n	8000d08 <fsm_tuning+0x208>
			timer_red2 = counter;
 8000c9a:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <fsm_tuning+0x2bc>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a4c      	ldr	r2, [pc, #304]	; (8000dd0 <fsm_tuning+0x2d0>)
 8000ca0:	6013      	str	r3, [r2, #0]
			if(timer_red2 <= timer_yellow1) timer_yellow1 = 1;
 8000ca2:	4b4b      	ldr	r3, [pc, #300]	; (8000dd0 <fsm_tuning+0x2d0>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b4b      	ldr	r3, [pc, #300]	; (8000dd4 <fsm_tuning+0x2d4>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	dc02      	bgt.n	8000cb4 <fsm_tuning+0x1b4>
 8000cae:	4b49      	ldr	r3, [pc, #292]	; (8000dd4 <fsm_tuning+0x2d4>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
			timer_green1 = timer_red2 - timer_yellow1;
 8000cb4:	4b46      	ldr	r3, [pc, #280]	; (8000dd0 <fsm_tuning+0x2d0>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b46      	ldr	r3, [pc, #280]	; (8000dd4 <fsm_tuning+0x2d4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	4a46      	ldr	r2, [pc, #280]	; (8000dd8 <fsm_tuning+0x2d8>)
 8000cc0:	6013      	str	r3, [r2, #0]
			status = AUTO_RED_GREEN;
 8000cc2:	4b3b      	ldr	r3, [pc, #236]	; (8000db0 <fsm_tuning+0x2b0>)
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000cc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ccc:	f000 fe50 	bl	8001970 <setTimer1>
			counter = timer_red1;
 8000cd0:	4b3b      	ldr	r3, [pc, #236]	; (8000dc0 <fsm_tuning+0x2c0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a39      	ldr	r2, [pc, #228]	; (8000dbc <fsm_tuning+0x2bc>)
 8000cd6:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cde:	4836      	ldr	r0, [pc, #216]	; (8000db8 <fsm_tuning+0x2b8>)
 8000ce0:	f001 faad 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	4838      	ldr	r0, [pc, #224]	; (8000dcc <fsm_tuning+0x2cc>)
 8000cea:	f001 faa8 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	4836      	ldr	r0, [pc, #216]	; (8000dcc <fsm_tuning+0x2cc>)
 8000cf4:	f001 faa3 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2110      	movs	r1, #16
 8000cfc:	4833      	ldr	r0, [pc, #204]	; (8000dcc <fsm_tuning+0x2cc>)
 8000cfe:	f001 fa9e 	bl	800223e <HAL_GPIO_WritePin>
			displayCounter();
 8000d02:	f7ff fb4b 	bl	800039c <displayCounter>
			break;
 8000d06:	e2d0      	b.n	80012aa <fsm_tuning+0x7aa>
		}
		if(isButtonPressed(2)) {
 8000d08:	2002      	movs	r0, #2
 8000d0a:	f7ff fa1f 	bl	800014c <isButtonPressed>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d036      	beq.n	8000d82 <fsm_tuning+0x282>
			status = TUNING_GREEN1;
 8000d14:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <fsm_tuning+0x2b0>)
 8000d16:	2217      	movs	r2, #23
 8000d18:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000d1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d1e:	f000 fe27 	bl	8001970 <setTimer1>
			timer_red2 = counter;
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <fsm_tuning+0x2bc>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a2a      	ldr	r2, [pc, #168]	; (8000dd0 <fsm_tuning+0x2d0>)
 8000d28:	6013      	str	r3, [r2, #0]
			if(timer_red2 <= timer_yellow1) timer_yellow1 = 1;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <fsm_tuning+0x2d0>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <fsm_tuning+0x2d4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	dc02      	bgt.n	8000d3c <fsm_tuning+0x23c>
 8000d36:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <fsm_tuning+0x2d4>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	601a      	str	r2, [r3, #0]
			timer_green1 = timer_red2 - timer_yellow1;
 8000d3c:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <fsm_tuning+0x2d0>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <fsm_tuning+0x2d4>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	4a24      	ldr	r2, [pc, #144]	; (8000dd8 <fsm_tuning+0x2d8>)
 8000d48:	6013      	str	r3, [r2, #0]
			counter = timer_green1;
 8000d4a:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <fsm_tuning+0x2d8>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a1b      	ldr	r2, [pc, #108]	; (8000dbc <fsm_tuning+0x2bc>)
 8000d50:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d58:	4817      	ldr	r0, [pc, #92]	; (8000db8 <fsm_tuning+0x2b8>)
 8000d5a:	f001 fa70 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2108      	movs	r1, #8
 8000d62:	481a      	ldr	r0, [pc, #104]	; (8000dcc <fsm_tuning+0x2cc>)
 8000d64:	f001 fa6b 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2120      	movs	r1, #32
 8000d6c:	4817      	ldr	r0, [pc, #92]	; (8000dcc <fsm_tuning+0x2cc>)
 8000d6e:	f001 fa66 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2110      	movs	r1, #16
 8000d76:	4815      	ldr	r0, [pc, #84]	; (8000dcc <fsm_tuning+0x2cc>)
 8000d78:	f001 fa61 	bl	800223e <HAL_GPIO_WritePin>
			displayCounter();
 8000d7c:	f7ff fb0e 	bl	800039c <displayCounter>
			break;
 8000d80:	e293      	b.n	80012aa <fsm_tuning+0x7aa>
		}
		if(isButtonPressed(3)) {
 8000d82:	2003      	movs	r0, #3
 8000d84:	f7ff f9e2 	bl	800014c <isButtonPressed>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 8284 	beq.w	8001298 <fsm_tuning+0x798>
			counter++;
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <fsm_tuning+0x2bc>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <fsm_tuning+0x2bc>)
 8000d98:	6013      	str	r3, [r2, #0]
			if(counter > 99) {
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <fsm_tuning+0x2bc>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b63      	cmp	r3, #99	; 0x63
 8000da0:	dd02      	ble.n	8000da8 <fsm_tuning+0x2a8>
				counter = 2;
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <fsm_tuning+0x2bc>)
 8000da4:	2202      	movs	r2, #2
 8000da6:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000da8:	f7ff faf8 	bl	800039c <displayCounter>
		}
		break;
 8000dac:	e274      	b.n	8001298 <fsm_tuning+0x798>
 8000dae:	bf00      	nop
 8000db0:	20000100 	.word	0x20000100
 8000db4:	2000011c 	.word	0x2000011c
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	20000108 	.word	0x20000108
 8000dc0:	20000004 	.word	0x20000004
 8000dc4:	20000018 	.word	0x20000018
 8000dc8:	20000014 	.word	0x20000014
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	20000010 	.word	0x20000010
 8000dd4:	2000000c 	.word	0x2000000c
 8000dd8:	20000008 	.word	0x20000008
	case TUNING_GREEN1:
		if(timer1_flag==1) {
 8000ddc:	4b8e      	ldr	r3, [pc, #568]	; (8001018 <fsm_tuning+0x518>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d10a      	bne.n	8000dfa <fsm_tuning+0x2fa>
			timer1_flag = 0;
 8000de4:	4b8c      	ldr	r3, [pc, #560]	; (8001018 <fsm_tuning+0x518>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000dea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dee:	f000 fdbf 	bl	8001970 <setTimer1>
			HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 8000df2:	2108      	movs	r1, #8
 8000df4:	4889      	ldr	r0, [pc, #548]	; (800101c <fsm_tuning+0x51c>)
 8000df6:	f001 fa3a 	bl	800226e <HAL_GPIO_TogglePin>
		}
		if(isButtonPressed(1)) {
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f7ff f9a6 	bl	800014c <isButtonPressed>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d02d      	beq.n	8000e62 <fsm_tuning+0x362>
			timer_green1 = counter;
 8000e06:	4b86      	ldr	r3, [pc, #536]	; (8001020 <fsm_tuning+0x520>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a86      	ldr	r2, [pc, #536]	; (8001024 <fsm_tuning+0x524>)
 8000e0c:	6013      	str	r3, [r2, #0]
			timer_yellow1 = timer_red2 - timer_green1;
 8000e0e:	4b86      	ldr	r3, [pc, #536]	; (8001028 <fsm_tuning+0x528>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4b84      	ldr	r3, [pc, #528]	; (8001024 <fsm_tuning+0x524>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	4a84      	ldr	r2, [pc, #528]	; (800102c <fsm_tuning+0x52c>)
 8000e1a:	6013      	str	r3, [r2, #0]
			status = AUTO_RED_GREEN;
 8000e1c:	4b84      	ldr	r3, [pc, #528]	; (8001030 <fsm_tuning+0x530>)
 8000e1e:	2202      	movs	r2, #2
 8000e20:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000e22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e26:	f000 fda3 	bl	8001970 <setTimer1>
			counter = timer_red1;
 8000e2a:	4b82      	ldr	r3, [pc, #520]	; (8001034 <fsm_tuning+0x534>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a7c      	ldr	r2, [pc, #496]	; (8001020 <fsm_tuning+0x520>)
 8000e30:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e38:	487f      	ldr	r0, [pc, #508]	; (8001038 <fsm_tuning+0x538>)
 8000e3a:	f001 fa00 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2108      	movs	r1, #8
 8000e42:	4876      	ldr	r0, [pc, #472]	; (800101c <fsm_tuning+0x51c>)
 8000e44:	f001 f9fb 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	4873      	ldr	r0, [pc, #460]	; (800101c <fsm_tuning+0x51c>)
 8000e4e:	f001 f9f6 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2110      	movs	r1, #16
 8000e56:	4871      	ldr	r0, [pc, #452]	; (800101c <fsm_tuning+0x51c>)
 8000e58:	f001 f9f1 	bl	800223e <HAL_GPIO_WritePin>
			displayCounter();
 8000e5c:	f7ff fa9e 	bl	800039c <displayCounter>
			break;
 8000e60:	e223      	b.n	80012aa <fsm_tuning+0x7aa>
		}
		if(isButtonPressed(2)) {
 8000e62:	2002      	movs	r0, #2
 8000e64:	f7ff f972 	bl	800014c <isButtonPressed>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d02d      	beq.n	8000eca <fsm_tuning+0x3ca>
			status = TUNING_GREEN2;
 8000e6e:	4b70      	ldr	r3, [pc, #448]	; (8001030 <fsm_tuning+0x530>)
 8000e70:	2218      	movs	r2, #24
 8000e72:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000e74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e78:	f000 fd7a 	bl	8001970 <setTimer1>
			timer_green1 = counter;
 8000e7c:	4b68      	ldr	r3, [pc, #416]	; (8001020 <fsm_tuning+0x520>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a68      	ldr	r2, [pc, #416]	; (8001024 <fsm_tuning+0x524>)
 8000e82:	6013      	str	r3, [r2, #0]
			timer_yellow1 = timer_red2 - timer_green1;
 8000e84:	4b68      	ldr	r3, [pc, #416]	; (8001028 <fsm_tuning+0x528>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b66      	ldr	r3, [pc, #408]	; (8001024 <fsm_tuning+0x524>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	4a67      	ldr	r2, [pc, #412]	; (800102c <fsm_tuning+0x52c>)
 8000e90:	6013      	str	r3, [r2, #0]
			counter = timer_green2;
 8000e92:	4b6a      	ldr	r3, [pc, #424]	; (800103c <fsm_tuning+0x53c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a62      	ldr	r2, [pc, #392]	; (8001020 <fsm_tuning+0x520>)
 8000e98:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea0:	4865      	ldr	r0, [pc, #404]	; (8001038 <fsm_tuning+0x538>)
 8000ea2:	f001 f9cc 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2108      	movs	r1, #8
 8000eaa:	485c      	ldr	r0, [pc, #368]	; (800101c <fsm_tuning+0x51c>)
 8000eac:	f001 f9c7 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2120      	movs	r1, #32
 8000eb4:	4859      	ldr	r0, [pc, #356]	; (800101c <fsm_tuning+0x51c>)
 8000eb6:	f001 f9c2 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2110      	movs	r1, #16
 8000ebe:	4857      	ldr	r0, [pc, #348]	; (800101c <fsm_tuning+0x51c>)
 8000ec0:	f001 f9bd 	bl	800223e <HAL_GPIO_WritePin>
			displayCounter();
 8000ec4:	f7ff fa6a 	bl	800039c <displayCounter>
			break;
 8000ec8:	e1ef      	b.n	80012aa <fsm_tuning+0x7aa>
		}
		if(isButtonPressed(3)) {
 8000eca:	2003      	movs	r0, #3
 8000ecc:	f7ff f93e 	bl	800014c <isButtonPressed>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 81e2 	beq.w	800129c <fsm_tuning+0x79c>
			counter++;
 8000ed8:	4b51      	ldr	r3, [pc, #324]	; (8001020 <fsm_tuning+0x520>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	4a50      	ldr	r2, [pc, #320]	; (8001020 <fsm_tuning+0x520>)
 8000ee0:	6013      	str	r3, [r2, #0]
			if(counter > timer_red2 - 1){
 8000ee2:	4b51      	ldr	r3, [pc, #324]	; (8001028 <fsm_tuning+0x528>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4b4e      	ldr	r3, [pc, #312]	; (8001020 <fsm_tuning+0x520>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	dc02      	bgt.n	8000ef4 <fsm_tuning+0x3f4>
				counter = 1;
 8000eee:	4b4c      	ldr	r3, [pc, #304]	; (8001020 <fsm_tuning+0x520>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000ef4:	f7ff fa52 	bl	800039c <displayCounter>
		}
		break;
 8000ef8:	e1d0      	b.n	800129c <fsm_tuning+0x79c>
	case TUNING_GREEN2:
		if(timer1_flag==1) {
 8000efa:	4b47      	ldr	r3, [pc, #284]	; (8001018 <fsm_tuning+0x518>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d10a      	bne.n	8000f18 <fsm_tuning+0x418>
			timer1_flag = 0;
 8000f02:	4b45      	ldr	r3, [pc, #276]	; (8001018 <fsm_tuning+0x518>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f0c:	f000 fd30 	bl	8001970 <setTimer1>
			HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 8000f10:	2110      	movs	r1, #16
 8000f12:	4842      	ldr	r0, [pc, #264]	; (800101c <fsm_tuning+0x51c>)
 8000f14:	f001 f9ab 	bl	800226e <HAL_GPIO_TogglePin>
		}
		if(isButtonPressed(1)) {
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f7ff f917 	bl	800014c <isButtonPressed>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d02d      	beq.n	8000f80 <fsm_tuning+0x480>
			status = AUTO_RED_GREEN;
 8000f24:	4b42      	ldr	r3, [pc, #264]	; (8001030 <fsm_tuning+0x530>)
 8000f26:	2202      	movs	r2, #2
 8000f28:	601a      	str	r2, [r3, #0]
			timer_green2 = counter;
 8000f2a:	4b3d      	ldr	r3, [pc, #244]	; (8001020 <fsm_tuning+0x520>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a43      	ldr	r2, [pc, #268]	; (800103c <fsm_tuning+0x53c>)
 8000f30:	6013      	str	r3, [r2, #0]
			timer_yellow2 = timer_red1 - timer_green2;
 8000f32:	4b40      	ldr	r3, [pc, #256]	; (8001034 <fsm_tuning+0x534>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4b41      	ldr	r3, [pc, #260]	; (800103c <fsm_tuning+0x53c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	4a40      	ldr	r2, [pc, #256]	; (8001040 <fsm_tuning+0x540>)
 8000f3e:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000f40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f44:	f000 fd14 	bl	8001970 <setTimer1>
			counter = timer_red1;
 8000f48:	4b3a      	ldr	r3, [pc, #232]	; (8001034 <fsm_tuning+0x534>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a34      	ldr	r2, [pc, #208]	; (8001020 <fsm_tuning+0x520>)
 8000f4e:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f56:	4838      	ldr	r0, [pc, #224]	; (8001038 <fsm_tuning+0x538>)
 8000f58:	f001 f971 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2108      	movs	r1, #8
 8000f60:	482e      	ldr	r0, [pc, #184]	; (800101c <fsm_tuning+0x51c>)
 8000f62:	f001 f96c 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2120      	movs	r1, #32
 8000f6a:	482c      	ldr	r0, [pc, #176]	; (800101c <fsm_tuning+0x51c>)
 8000f6c:	f001 f967 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2110      	movs	r1, #16
 8000f74:	4829      	ldr	r0, [pc, #164]	; (800101c <fsm_tuning+0x51c>)
 8000f76:	f001 f962 	bl	800223e <HAL_GPIO_WritePin>
			displayCounter();
 8000f7a:	f7ff fa0f 	bl	800039c <displayCounter>
			break;
 8000f7e:	e194      	b.n	80012aa <fsm_tuning+0x7aa>
		}
		if(isButtonPressed(2)) {
 8000f80:	2002      	movs	r0, #2
 8000f82:	f7ff f8e3 	bl	800014c <isButtonPressed>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d02d      	beq.n	8000fe8 <fsm_tuning+0x4e8>
			status = TUNING_YELLOW1;
 8000f8c:	4b28      	ldr	r3, [pc, #160]	; (8001030 <fsm_tuning+0x530>)
 8000f8e:	2219      	movs	r2, #25
 8000f90:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000f92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f96:	f000 fceb 	bl	8001970 <setTimer1>
			timer_green2 = counter;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <fsm_tuning+0x520>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a27      	ldr	r2, [pc, #156]	; (800103c <fsm_tuning+0x53c>)
 8000fa0:	6013      	str	r3, [r2, #0]
			timer_yellow2 = timer_red1 - timer_green2;
 8000fa2:	4b24      	ldr	r3, [pc, #144]	; (8001034 <fsm_tuning+0x534>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4b25      	ldr	r3, [pc, #148]	; (800103c <fsm_tuning+0x53c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	4a24      	ldr	r2, [pc, #144]	; (8001040 <fsm_tuning+0x540>)
 8000fae:	6013      	str	r3, [r2, #0]
			counter = timer_yellow1;
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <fsm_tuning+0x52c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a1a      	ldr	r2, [pc, #104]	; (8001020 <fsm_tuning+0x520>)
 8000fb6:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fbe:	481e      	ldr	r0, [pc, #120]	; (8001038 <fsm_tuning+0x538>)
 8000fc0:	f001 f93d 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	4814      	ldr	r0, [pc, #80]	; (800101c <fsm_tuning+0x51c>)
 8000fca:	f001 f938 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4812      	ldr	r0, [pc, #72]	; (800101c <fsm_tuning+0x51c>)
 8000fd4:	f001 f933 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2110      	movs	r1, #16
 8000fdc:	480f      	ldr	r0, [pc, #60]	; (800101c <fsm_tuning+0x51c>)
 8000fde:	f001 f92e 	bl	800223e <HAL_GPIO_WritePin>
			displayCounter();
 8000fe2:	f7ff f9db 	bl	800039c <displayCounter>
			break;
 8000fe6:	e160      	b.n	80012aa <fsm_tuning+0x7aa>
		}
		if(isButtonPressed(3)) {
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f7ff f8af 	bl	800014c <isButtonPressed>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 8155 	beq.w	80012a0 <fsm_tuning+0x7a0>
			counter++;
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <fsm_tuning+0x520>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	4a08      	ldr	r2, [pc, #32]	; (8001020 <fsm_tuning+0x520>)
 8000ffe:	6013      	str	r3, [r2, #0]
			if(counter > timer_red1 - 1){
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <fsm_tuning+0x534>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <fsm_tuning+0x520>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	429a      	cmp	r2, r3
 800100a:	dc02      	bgt.n	8001012 <fsm_tuning+0x512>
				counter = 1;
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <fsm_tuning+0x520>)
 800100e:	2201      	movs	r2, #1
 8001010:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8001012:	f7ff f9c3 	bl	800039c <displayCounter>
		}
		break;
 8001016:	e143      	b.n	80012a0 <fsm_tuning+0x7a0>
 8001018:	2000011c 	.word	0x2000011c
 800101c:	40010c00 	.word	0x40010c00
 8001020:	20000108 	.word	0x20000108
 8001024:	20000008 	.word	0x20000008
 8001028:	20000010 	.word	0x20000010
 800102c:	2000000c 	.word	0x2000000c
 8001030:	20000100 	.word	0x20000100
 8001034:	20000004 	.word	0x20000004
 8001038:	40010800 	.word	0x40010800
 800103c:	20000014 	.word	0x20000014
 8001040:	20000018 	.word	0x20000018
	case TUNING_YELLOW1:
		if(timer1_flag==1) {
 8001044:	4b9a      	ldr	r3, [pc, #616]	; (80012b0 <fsm_tuning+0x7b0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d10f      	bne.n	800106c <fsm_tuning+0x56c>
			timer1_flag = 0;
 800104c:	4b98      	ldr	r3, [pc, #608]	; (80012b0 <fsm_tuning+0x7b0>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001052:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001056:	f000 fc8b 	bl	8001970 <setTimer1>
			HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 800105a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105e:	4895      	ldr	r0, [pc, #596]	; (80012b4 <fsm_tuning+0x7b4>)
 8001060:	f001 f905 	bl	800226e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 8001064:	2108      	movs	r1, #8
 8001066:	4894      	ldr	r0, [pc, #592]	; (80012b8 <fsm_tuning+0x7b8>)
 8001068:	f001 f901 	bl	800226e <HAL_GPIO_TogglePin>
		}
		if(isButtonPressed(1)) {
 800106c:	2001      	movs	r0, #1
 800106e:	f7ff f86d 	bl	800014c <isButtonPressed>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d02d      	beq.n	80010d4 <fsm_tuning+0x5d4>
			status = AUTO_RED_GREEN;
 8001078:	4b90      	ldr	r3, [pc, #576]	; (80012bc <fsm_tuning+0x7bc>)
 800107a:	2202      	movs	r2, #2
 800107c:	601a      	str	r2, [r3, #0]
			timer_yellow1 = counter;
 800107e:	4b90      	ldr	r3, [pc, #576]	; (80012c0 <fsm_tuning+0x7c0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a90      	ldr	r2, [pc, #576]	; (80012c4 <fsm_tuning+0x7c4>)
 8001084:	6013      	str	r3, [r2, #0]
			timer_green1 = timer_red2 - timer_yellow1;
 8001086:	4b90      	ldr	r3, [pc, #576]	; (80012c8 <fsm_tuning+0x7c8>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4b8e      	ldr	r3, [pc, #568]	; (80012c4 <fsm_tuning+0x7c4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	4a8e      	ldr	r2, [pc, #568]	; (80012cc <fsm_tuning+0x7cc>)
 8001092:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8001094:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001098:	f000 fc6a 	bl	8001970 <setTimer1>
			counter = timer_red1;
 800109c:	4b8c      	ldr	r3, [pc, #560]	; (80012d0 <fsm_tuning+0x7d0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a87      	ldr	r2, [pc, #540]	; (80012c0 <fsm_tuning+0x7c0>)
 80010a2:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010aa:	4882      	ldr	r0, [pc, #520]	; (80012b4 <fsm_tuning+0x7b4>)
 80010ac:	f001 f8c7 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2108      	movs	r1, #8
 80010b4:	4880      	ldr	r0, [pc, #512]	; (80012b8 <fsm_tuning+0x7b8>)
 80010b6:	f001 f8c2 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2120      	movs	r1, #32
 80010be:	487e      	ldr	r0, [pc, #504]	; (80012b8 <fsm_tuning+0x7b8>)
 80010c0:	f001 f8bd 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	2110      	movs	r1, #16
 80010c8:	487b      	ldr	r0, [pc, #492]	; (80012b8 <fsm_tuning+0x7b8>)
 80010ca:	f001 f8b8 	bl	800223e <HAL_GPIO_WritePin>
			displayCounter();
 80010ce:	f7ff f965 	bl	800039c <displayCounter>
			break;
 80010d2:	e0ea      	b.n	80012aa <fsm_tuning+0x7aa>
		}



		if(isButtonPressed(2)) {
 80010d4:	2002      	movs	r0, #2
 80010d6:	f7ff f839 	bl	800014c <isButtonPressed>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d02d      	beq.n	800113c <fsm_tuning+0x63c>
			status = TUNING_YELLOW2;
 80010e0:	4b76      	ldr	r3, [pc, #472]	; (80012bc <fsm_tuning+0x7bc>)
 80010e2:	221a      	movs	r2, #26
 80010e4:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80010e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ea:	f000 fc41 	bl	8001970 <setTimer1>
			timer_yellow1 = counter;
 80010ee:	4b74      	ldr	r3, [pc, #464]	; (80012c0 <fsm_tuning+0x7c0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a74      	ldr	r2, [pc, #464]	; (80012c4 <fsm_tuning+0x7c4>)
 80010f4:	6013      	str	r3, [r2, #0]
			timer_green1 = timer_red2 - timer_yellow1;
 80010f6:	4b74      	ldr	r3, [pc, #464]	; (80012c8 <fsm_tuning+0x7c8>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4b72      	ldr	r3, [pc, #456]	; (80012c4 <fsm_tuning+0x7c4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	4a72      	ldr	r2, [pc, #456]	; (80012cc <fsm_tuning+0x7cc>)
 8001102:	6013      	str	r3, [r2, #0]
			counter = timer_yellow2;
 8001104:	4b73      	ldr	r3, [pc, #460]	; (80012d4 <fsm_tuning+0x7d4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a6d      	ldr	r2, [pc, #436]	; (80012c0 <fsm_tuning+0x7c0>)
 800110a:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001112:	4868      	ldr	r0, [pc, #416]	; (80012b4 <fsm_tuning+0x7b4>)
 8001114:	f001 f893 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	2108      	movs	r1, #8
 800111c:	4866      	ldr	r0, [pc, #408]	; (80012b8 <fsm_tuning+0x7b8>)
 800111e:	f001 f88e 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2120      	movs	r1, #32
 8001126:	4864      	ldr	r0, [pc, #400]	; (80012b8 <fsm_tuning+0x7b8>)
 8001128:	f001 f889 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2110      	movs	r1, #16
 8001130:	4861      	ldr	r0, [pc, #388]	; (80012b8 <fsm_tuning+0x7b8>)
 8001132:	f001 f884 	bl	800223e <HAL_GPIO_WritePin>
			displayCounter();
 8001136:	f7ff f931 	bl	800039c <displayCounter>
			break;
 800113a:	e0b6      	b.n	80012aa <fsm_tuning+0x7aa>
		}

		if(isButtonPressed(3)) {
 800113c:	2003      	movs	r0, #3
 800113e:	f7ff f805 	bl	800014c <isButtonPressed>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80ad 	beq.w	80012a4 <fsm_tuning+0x7a4>
			counter++;
 800114a:	4b5d      	ldr	r3, [pc, #372]	; (80012c0 <fsm_tuning+0x7c0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	4a5b      	ldr	r2, [pc, #364]	; (80012c0 <fsm_tuning+0x7c0>)
 8001152:	6013      	str	r3, [r2, #0]
			if(counter > timer_red2 - 1){
 8001154:	4b5c      	ldr	r3, [pc, #368]	; (80012c8 <fsm_tuning+0x7c8>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b59      	ldr	r3, [pc, #356]	; (80012c0 <fsm_tuning+0x7c0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	dc02      	bgt.n	8001166 <fsm_tuning+0x666>
				counter = 1;
 8001160:	4b57      	ldr	r3, [pc, #348]	; (80012c0 <fsm_tuning+0x7c0>)
 8001162:	2201      	movs	r2, #1
 8001164:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8001166:	f7ff f919 	bl	800039c <displayCounter>
		}
		break;
 800116a:	e09b      	b.n	80012a4 <fsm_tuning+0x7a4>
	case TUNING_YELLOW2:
		if(timer1_flag==1) {
 800116c:	4b50      	ldr	r3, [pc, #320]	; (80012b0 <fsm_tuning+0x7b0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d10e      	bne.n	8001192 <fsm_tuning+0x692>
			timer1_flag = 0;
 8001174:	4b4e      	ldr	r3, [pc, #312]	; (80012b0 <fsm_tuning+0x7b0>)
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800117a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800117e:	f000 fbf7 	bl	8001970 <setTimer1>
			HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 8001182:	2120      	movs	r1, #32
 8001184:	484c      	ldr	r0, [pc, #304]	; (80012b8 <fsm_tuning+0x7b8>)
 8001186:	f001 f872 	bl	800226e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 800118a:	2110      	movs	r1, #16
 800118c:	484a      	ldr	r0, [pc, #296]	; (80012b8 <fsm_tuning+0x7b8>)
 800118e:	f001 f86e 	bl	800226e <HAL_GPIO_TogglePin>
		}

		if(isButtonPressed(1)) {
 8001192:	2001      	movs	r0, #1
 8001194:	f7fe ffda 	bl	800014c <isButtonPressed>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d02d      	beq.n	80011fa <fsm_tuning+0x6fa>
			status = AUTO_RED_GREEN;
 800119e:	4b47      	ldr	r3, [pc, #284]	; (80012bc <fsm_tuning+0x7bc>)
 80011a0:	2202      	movs	r2, #2
 80011a2:	601a      	str	r2, [r3, #0]
			timer_yellow2 = counter;
 80011a4:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <fsm_tuning+0x7c0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a4a      	ldr	r2, [pc, #296]	; (80012d4 <fsm_tuning+0x7d4>)
 80011aa:	6013      	str	r3, [r2, #0]
			timer_green2 = timer_red1 - timer_yellow2;
 80011ac:	4b48      	ldr	r3, [pc, #288]	; (80012d0 <fsm_tuning+0x7d0>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b48      	ldr	r3, [pc, #288]	; (80012d4 <fsm_tuning+0x7d4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	4a48      	ldr	r2, [pc, #288]	; (80012d8 <fsm_tuning+0x7d8>)
 80011b8:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 80011ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011be:	f000 fbd7 	bl	8001970 <setTimer1>
			counter = timer_red1;
 80011c2:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <fsm_tuning+0x7d0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a3e      	ldr	r2, [pc, #248]	; (80012c0 <fsm_tuning+0x7c0>)
 80011c8:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d0:	4838      	ldr	r0, [pc, #224]	; (80012b4 <fsm_tuning+0x7b4>)
 80011d2:	f001 f834 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2108      	movs	r1, #8
 80011da:	4837      	ldr	r0, [pc, #220]	; (80012b8 <fsm_tuning+0x7b8>)
 80011dc:	f001 f82f 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2120      	movs	r1, #32
 80011e4:	4834      	ldr	r0, [pc, #208]	; (80012b8 <fsm_tuning+0x7b8>)
 80011e6:	f001 f82a 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2110      	movs	r1, #16
 80011ee:	4832      	ldr	r0, [pc, #200]	; (80012b8 <fsm_tuning+0x7b8>)
 80011f0:	f001 f825 	bl	800223e <HAL_GPIO_WritePin>
			displayCounter();
 80011f4:	f7ff f8d2 	bl	800039c <displayCounter>
			break;
 80011f8:	e057      	b.n	80012aa <fsm_tuning+0x7aa>
		}



		if(isButtonPressed(2)) {
 80011fa:	2002      	movs	r0, #2
 80011fc:	f7fe ffa6 	bl	800014c <isButtonPressed>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d02d      	beq.n	8001262 <fsm_tuning+0x762>
			status = TUNING_RED1;
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <fsm_tuning+0x7bc>)
 8001208:	2215      	movs	r2, #21
 800120a:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800120c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001210:	f000 fbae 	bl	8001970 <setTimer1>
			timer_yellow2 = counter;
 8001214:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <fsm_tuning+0x7c0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a2e      	ldr	r2, [pc, #184]	; (80012d4 <fsm_tuning+0x7d4>)
 800121a:	6013      	str	r3, [r2, #0]
			timer_green2 = timer_red1 - timer_yellow2;
 800121c:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <fsm_tuning+0x7d0>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <fsm_tuning+0x7d4>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	4a2c      	ldr	r2, [pc, #176]	; (80012d8 <fsm_tuning+0x7d8>)
 8001228:	6013      	str	r3, [r2, #0]
			counter = timer_red1;
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <fsm_tuning+0x7d0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a24      	ldr	r2, [pc, #144]	; (80012c0 <fsm_tuning+0x7c0>)
 8001230:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001238:	481e      	ldr	r0, [pc, #120]	; (80012b4 <fsm_tuning+0x7b4>)
 800123a:	f001 f800 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2108      	movs	r1, #8
 8001242:	481d      	ldr	r0, [pc, #116]	; (80012b8 <fsm_tuning+0x7b8>)
 8001244:	f000 fffb 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	2120      	movs	r1, #32
 800124c:	481a      	ldr	r0, [pc, #104]	; (80012b8 <fsm_tuning+0x7b8>)
 800124e:	f000 fff6 	bl	800223e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	2110      	movs	r1, #16
 8001256:	4818      	ldr	r0, [pc, #96]	; (80012b8 <fsm_tuning+0x7b8>)
 8001258:	f000 fff1 	bl	800223e <HAL_GPIO_WritePin>
			displayCounter();
 800125c:	f7ff f89e 	bl	800039c <displayCounter>
			break;
 8001260:	e023      	b.n	80012aa <fsm_tuning+0x7aa>
		}

		if(isButtonPressed(3)) {
 8001262:	2003      	movs	r0, #3
 8001264:	f7fe ff72 	bl	800014c <isButtonPressed>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d01c      	beq.n	80012a8 <fsm_tuning+0x7a8>
			counter++;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <fsm_tuning+0x7c0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <fsm_tuning+0x7c0>)
 8001276:	6013      	str	r3, [r2, #0]
			if(counter > timer_red1 - 1){
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <fsm_tuning+0x7d0>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <fsm_tuning+0x7c0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	dc02      	bgt.n	800128a <fsm_tuning+0x78a>
				counter = 1;
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <fsm_tuning+0x7c0>)
 8001286:	2201      	movs	r2, #1
 8001288:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 800128a:	f7ff f887 	bl	800039c <displayCounter>
		}
		break;
 800128e:	e00b      	b.n	80012a8 <fsm_tuning+0x7a8>
	default:
		break;
 8001290:	bf00      	nop
 8001292:	e00a      	b.n	80012aa <fsm_tuning+0x7aa>
		break;
 8001294:	bf00      	nop
 8001296:	e008      	b.n	80012aa <fsm_tuning+0x7aa>
		break;
 8001298:	bf00      	nop
 800129a:	e006      	b.n	80012aa <fsm_tuning+0x7aa>
		break;
 800129c:	bf00      	nop
 800129e:	e004      	b.n	80012aa <fsm_tuning+0x7aa>
		break;
 80012a0:	bf00      	nop
 80012a2:	e002      	b.n	80012aa <fsm_tuning+0x7aa>
		break;
 80012a4:	bf00      	nop
 80012a6:	e000      	b.n	80012aa <fsm_tuning+0x7aa>
		break;
 80012a8:	bf00      	nop
	}
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000011c 	.word	0x2000011c
 80012b4:	40010800 	.word	0x40010800
 80012b8:	40010c00 	.word	0x40010c00
 80012bc:	20000100 	.word	0x20000100
 80012c0:	20000108 	.word	0x20000108
 80012c4:	2000000c 	.word	0x2000000c
 80012c8:	20000010 	.word	0x20000010
 80012cc:	20000008 	.word	0x20000008
 80012d0:	20000004 	.word	0x20000004
 80012d4:	20000018 	.word	0x20000018
 80012d8:	20000014 	.word	0x20000014

080012dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e0:	f000 fbf2 	bl	8001ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e4:	f000 f824 	bl	8001330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e8:	f000 f950 	bl	800158c <MX_GPIO_Init>
  MX_TIM2_Init();
 80012ec:	f000 f862 	bl	80013b4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80012f0:	f000 f922 	bl	8001538 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80012f4:	f000 f8aa 	bl	800144c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80012f8:	4809      	ldr	r0, [pc, #36]	; (8001320 <main+0x44>)
 80012fa:	f001 fc3b 	bl	8002b74 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012fe:	2100      	movs	r1, #0
 8001300:	4808      	ldr	r0, [pc, #32]	; (8001324 <main+0x48>)
 8001302:	f001 fce1 	bl	8002cc8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <main+0x4c>)
 8001308:	2201      	movs	r2, #1
 800130a:	601a      	str	r2, [r3, #0]
  pedestrianStatus = INIT;
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <main+0x50>)
 800130e:	2201      	movs	r2, #1
 8001310:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  mode_selector();
 8001312:	f7fe ffb9 	bl	8000288 <mode_selector>
	  mode_run();
 8001316:	f000 f9ad 	bl	8001674 <mode_run>
	  fsm_pedestrian_run();
 800131a:	f7ff fabf 	bl	800089c <fsm_pedestrian_run>
	  mode_selector();
 800131e:	e7f8      	b.n	8001312 <main+0x36>
 8001320:	20000184 	.word	0x20000184
 8001324:	2000013c 	.word	0x2000013c
 8001328:	20000100 	.word	0x20000100
 800132c:	20000104 	.word	0x20000104

08001330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b090      	sub	sp, #64	; 0x40
 8001334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001336:	f107 0318 	add.w	r3, r7, #24
 800133a:	2228      	movs	r2, #40	; 0x28
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f002 ff90 	bl	8004264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001356:	2301      	movs	r3, #1
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800135a:	2310      	movs	r3, #16
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135e:	2302      	movs	r3, #2
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001362:	2300      	movs	r3, #0
 8001364:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001366:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136c:	f107 0318 	add.w	r3, r7, #24
 8001370:	4618      	mov	r0, r3
 8001372:	f000 ff95 	bl	80022a0 <HAL_RCC_OscConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800137c:	f000 f974 	bl	8001668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001380:	230f      	movs	r3, #15
 8001382:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001384:	2302      	movs	r3, #2
 8001386:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2102      	movs	r1, #2
 800139a:	4618      	mov	r0, r3
 800139c:	f001 fa00 	bl	80027a0 <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80013a6:	f000 f95f 	bl	8001668 <Error_Handler>
  }
}
 80013aa:	bf00      	nop
 80013ac:	3740      	adds	r7, #64	; 0x40
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c8:	463b      	mov	r3, r7
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <MX_TIM2_Init+0x94>)
 80013d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <MX_TIM2_Init+0x94>)
 80013da:	f242 720f 	movw	r2, #9999	; 0x270f
 80013de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <MX_TIM2_Init+0x94>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <MX_TIM2_Init+0x94>)
 80013e8:	223f      	movs	r2, #63	; 0x3f
 80013ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ec:	4b16      	ldr	r3, [pc, #88]	; (8001448 <MX_TIM2_Init+0x94>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_TIM2_Init+0x94>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f8:	4813      	ldr	r0, [pc, #76]	; (8001448 <MX_TIM2_Init+0x94>)
 80013fa:	f001 fb6b 	bl	8002ad4 <HAL_TIM_Base_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001404:	f000 f930 	bl	8001668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800140e:	f107 0308 	add.w	r3, r7, #8
 8001412:	4619      	mov	r1, r3
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <MX_TIM2_Init+0x94>)
 8001416:	f001 febf 	bl	8003198 <HAL_TIM_ConfigClockSource>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001420:	f000 f922 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_TIM2_Init+0x94>)
 8001432:	f002 fa3d 	bl	80038b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800143c:	f000 f914 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000184 	.word	0x20000184

0800144c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08e      	sub	sp, #56	; 0x38
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001460:	f107 0320 	add.w	r3, r7, #32
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	615a      	str	r2, [r3, #20]
 800147a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800147c:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <MX_TIM3_Init+0xe4>)
 800147e:	4a2d      	ldr	r2, [pc, #180]	; (8001534 <MX_TIM3_Init+0xe8>)
 8001480:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8001482:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <MX_TIM3_Init+0xe4>)
 8001484:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001488:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b29      	ldr	r3, [pc, #164]	; (8001530 <MX_TIM3_Init+0xe4>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63;
 8001490:	4b27      	ldr	r3, [pc, #156]	; (8001530 <MX_TIM3_Init+0xe4>)
 8001492:	223f      	movs	r2, #63	; 0x3f
 8001494:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <MX_TIM3_Init+0xe4>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <MX_TIM3_Init+0xe4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014a2:	4823      	ldr	r0, [pc, #140]	; (8001530 <MX_TIM3_Init+0xe4>)
 80014a4:	f001 fb16 	bl	8002ad4 <HAL_TIM_Base_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80014ae:	f000 f8db 	bl	8001668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014bc:	4619      	mov	r1, r3
 80014be:	481c      	ldr	r0, [pc, #112]	; (8001530 <MX_TIM3_Init+0xe4>)
 80014c0:	f001 fe6a 	bl	8003198 <HAL_TIM_ConfigClockSource>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80014ca:	f000 f8cd 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014ce:	4818      	ldr	r0, [pc, #96]	; (8001530 <MX_TIM3_Init+0xe4>)
 80014d0:	f001 fba2 	bl	8002c18 <HAL_TIM_PWM_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80014da:	f000 f8c5 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014e6:	f107 0320 	add.w	r3, r7, #32
 80014ea:	4619      	mov	r1, r3
 80014ec:	4810      	ldr	r0, [pc, #64]	; (8001530 <MX_TIM3_Init+0xe4>)
 80014ee:	f002 f9df 	bl	80038b0 <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80014f8:	f000 f8b6 	bl	8001668 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014fc:	2360      	movs	r3, #96	; 0x60
 80014fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	4619      	mov	r1, r3
 8001512:	4807      	ldr	r0, [pc, #28]	; (8001530 <MX_TIM3_Init+0xe4>)
 8001514:	f001 fd82 	bl	800301c <HAL_TIM_PWM_ConfigChannel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800151e:	f000 f8a3 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <MX_TIM3_Init+0xe4>)
 8001524:	f000 f928 	bl	8001778 <HAL_TIM_MspPostInit>

}
 8001528:	bf00      	nop
 800152a:	3738      	adds	r7, #56	; 0x38
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2000013c 	.word	0x2000013c
 8001534:	40000400 	.word	0x40000400

08001538 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 800153e:	4a12      	ldr	r2, [pc, #72]	; (8001588 <MX_USART2_UART_Init+0x50>)
 8001540:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 8001544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001548:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_USART2_UART_Init+0x4c>)
 8001570:	f002 fa0e 	bl	8003990 <HAL_UART_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800157a:	f000 f875 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200001cc 	.word	0x200001cc
 8001588:	40004400 	.word	0x40004400

0800158c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	4b2e      	ldr	r3, [pc, #184]	; (800165c <MX_GPIO_Init+0xd0>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a2d      	ldr	r2, [pc, #180]	; (800165c <MX_GPIO_Init+0xd0>)
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <MX_GPIO_Init+0xd0>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b8:	4b28      	ldr	r3, [pc, #160]	; (800165c <MX_GPIO_Init+0xd0>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a27      	ldr	r2, [pc, #156]	; (800165c <MX_GPIO_Init+0xd0>)
 80015be:	f043 0308 	orr.w	r3, r3, #8
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b25      	ldr	r3, [pc, #148]	; (800165c <MX_GPIO_Init+0xd0>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80015d6:	4822      	ldr	r0, [pc, #136]	; (8001660 <MX_GPIO_Init+0xd4>)
 80015d8:	f000 fe31 	bl	800223e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PedestrianLight_1_Pin|TrafficLight1_0_Pin, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80015e2:	4820      	ldr	r0, [pc, #128]	; (8001664 <MX_GPIO_Init+0xd8>)
 80015e4:	f000 fe2b 	bl	800223e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PedestrianButton_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = PedestrianButton_Pin|Button1_Pin|Button2_Pin;
 80015e8:	2313      	movs	r3, #19
 80015ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 0308 	add.w	r3, r7, #8
 80015f8:	4619      	mov	r1, r3
 80015fa:	481a      	ldr	r0, [pc, #104]	; (8001664 <MX_GPIO_Init+0xd8>)
 80015fc:	f000 fc84 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8001600:	2301      	movs	r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	4619      	mov	r1, r3
 8001612:	4813      	ldr	r0, [pc, #76]	; (8001660 <MX_GPIO_Init+0xd4>)
 8001614:	f000 fc78 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_0_Pin TrafficLight1_1_Pin TrafficLight2_1_Pin TrafficLight2_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin;
 8001618:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800161c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2302      	movs	r3, #2
 8001628:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	4619      	mov	r1, r3
 8001630:	480b      	ldr	r0, [pc, #44]	; (8001660 <MX_GPIO_Init+0xd4>)
 8001632:	f000 fc69 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_1_Pin TrafficLight1_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_1_Pin|TrafficLight1_0_Pin;
 8001636:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800163a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2302      	movs	r3, #2
 8001646:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	4619      	mov	r1, r3
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_GPIO_Init+0xd8>)
 8001650:	f000 fc5a 	bl	8001f08 <HAL_GPIO_Init>

}
 8001654:	bf00      	nop
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40021000 	.word	0x40021000
 8001660:	40010c00 	.word	0x40010c00
 8001664:	40010800 	.word	0x40010800

08001668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800166c:	b672      	cpsid	i
}
 800166e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001670:	e7fe      	b.n	8001670 <Error_Handler+0x8>
	...

08001674 <mode_run>:
#include "fsm_auto.h"
#include "fsm_manual.h"
#include "fsm_pedestrian.h"
#include "fsm_tuning.h"

void mode_run() {
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	switch(mode) {
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <mode_run+0x2c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b03      	cmp	r3, #3
 800167e:	d00a      	beq.n	8001696 <mode_run+0x22>
 8001680:	2b03      	cmp	r3, #3
 8001682:	dc0a      	bgt.n	800169a <mode_run+0x26>
 8001684:	2b01      	cmp	r3, #1
 8001686:	d002      	beq.n	800168e <mode_run+0x1a>
 8001688:	2b02      	cmp	r3, #2
 800168a:	d002      	beq.n	8001692 <mode_run+0x1e>
	case 2:
		fsm_manual(); //MANUAL MODE
	case 3:
		fsm_tuning(); //TWEAK THE TIMING
	}
}
 800168c:	e005      	b.n	800169a <mode_run+0x26>
		fsm_automatic(); //AUTOMATIK
 800168e:	f7fe feb3 	bl	80003f8 <fsm_automatic>
		fsm_manual(); //MANUAL MODE
 8001692:	f7fe ffb1 	bl	80005f8 <fsm_manual>
		fsm_tuning(); //TWEAK THE TIMING
 8001696:	f7ff fa33 	bl	8000b00 <fsm_tuning>
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000000 	.word	0x20000000

080016a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_MspInit+0x5c>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	4a14      	ldr	r2, [pc, #80]	; (8001700 <HAL_MspInit+0x5c>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6193      	str	r3, [r2, #24]
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_MspInit+0x5c>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_MspInit+0x5c>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_MspInit+0x5c>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_MspInit+0x5c>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_MspInit+0x60>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_MspInit+0x60>)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	40021000 	.word	0x40021000
 8001704:	40010000 	.word	0x40010000

08001708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001718:	d114      	bne.n	8001744 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_TIM_Base_MspInit+0x68>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a14      	ldr	r2, [pc, #80]	; (8001770 <HAL_TIM_Base_MspInit+0x68>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_TIM_Base_MspInit+0x68>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	201c      	movs	r0, #28
 8001738:	f000 faff 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800173c:	201c      	movs	r0, #28
 800173e:	f000 fb18 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001742:	e010      	b.n	8001766 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <HAL_TIM_Base_MspInit+0x6c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d10b      	bne.n	8001766 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <HAL_TIM_Base_MspInit+0x68>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a07      	ldr	r2, [pc, #28]	; (8001770 <HAL_TIM_Base_MspInit+0x68>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_TIM_Base_MspInit+0x68>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	40000400 	.word	0x40000400

08001778 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <HAL_TIM_MspPostInit+0x58>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d117      	bne.n	80017c8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_TIM_MspPostInit+0x5c>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <HAL_TIM_MspPostInit+0x5c>)
 800179e:	f043 0304 	orr.w	r3, r3, #4
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_TIM_MspPostInit+0x5c>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80017b0:	2340      	movs	r3, #64	; 0x40
 80017b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2302      	movs	r3, #2
 80017ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4619      	mov	r1, r3
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <HAL_TIM_MspPostInit+0x60>)
 80017c4:	f000 fba0 	bl	8001f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40000400 	.word	0x40000400
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010800 	.word	0x40010800

080017dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <HAL_UART_MspInit+0x98>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d137      	bne.n	800186c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <HAL_UART_MspInit+0x9c>)
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	4a1d      	ldr	r2, [pc, #116]	; (8001878 <HAL_UART_MspInit+0x9c>)
 8001802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001806:	61d3      	str	r3, [r2, #28]
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <HAL_UART_MspInit+0x9c>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_UART_MspInit+0x9c>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a17      	ldr	r2, [pc, #92]	; (8001878 <HAL_UART_MspInit+0x9c>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_UART_MspInit+0x9c>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800182c:	2304      	movs	r3, #4
 800182e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	4619      	mov	r1, r3
 800183e:	480f      	ldr	r0, [pc, #60]	; (800187c <HAL_UART_MspInit+0xa0>)
 8001840:	f000 fb62 	bl	8001f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001844:	2308      	movs	r3, #8
 8001846:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	f107 0310 	add.w	r3, r7, #16
 8001854:	4619      	mov	r1, r3
 8001856:	4809      	ldr	r0, [pc, #36]	; (800187c <HAL_UART_MspInit+0xa0>)
 8001858:	f000 fb56 	bl	8001f08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	2026      	movs	r0, #38	; 0x26
 8001862:	f000 fa6a 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001866:	2026      	movs	r0, #38	; 0x26
 8001868:	f000 fa83 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800186c:	bf00      	nop
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40004400 	.word	0x40004400
 8001878:	40021000 	.word	0x40021000
 800187c:	40010800 	.word	0x40010800

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <NMI_Handler+0x4>

08001886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <MemManage_Handler+0x4>

08001892 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <UsageFault_Handler+0x4>

0800189e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c6:	f000 f945 	bl	8001b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <TIM2_IRQHandler+0x10>)
 80018d6:	f001 fa99 	bl	8002e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000184 	.word	0x20000184

080018e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <USART2_IRQHandler+0x10>)
 80018ea:	f002 f8e3 	bl	8003ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200001cc 	.word	0x200001cc

080018f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001900:	4a14      	ldr	r2, [pc, #80]	; (8001954 <_sbrk+0x5c>)
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <_sbrk+0x60>)
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <_sbrk+0x64>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <_sbrk+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	d207      	bcs.n	8001938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001928:	f002 fc72 	bl	8004210 <__errno>
 800192c:	4603      	mov	r3, r0
 800192e:	220c      	movs	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e009      	b.n	800194c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <_sbrk+0x64>)
 8001948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20005000 	.word	0x20005000
 8001958:	00000400 	.word	0x00000400
 800195c:	20000118 	.word	0x20000118
 8001960:	20000228 	.word	0x20000228

08001964 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <setTimer1>:

int timer3_flag = 0;
int timer3_counter = 0;

//SET TIMERS
void setTimer1(int duration){
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a08      	ldr	r2, [pc, #32]	; (800199c <setTimer1+0x2c>)
 800197c:	fb82 1203 	smull	r1, r2, r2, r3
 8001980:	1092      	asrs	r2, r2, #2
 8001982:	17db      	asrs	r3, r3, #31
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <setTimer1+0x30>)
 8001988:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <setTimer1+0x34>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	66666667 	.word	0x66666667
 80019a0:	20000120 	.word	0x20000120
 80019a4:	2000011c 	.word	0x2000011c

080019a8 <setTimer2>:

void setTimer2(int duration){
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <setTimer2+0x2c>)
 80019b4:	fb82 1203 	smull	r1, r2, r2, r3
 80019b8:	1092      	asrs	r2, r2, #2
 80019ba:	17db      	asrs	r3, r3, #31
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <setTimer2+0x30>)
 80019c0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <setTimer2+0x34>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	66666667 	.word	0x66666667
 80019d8:	20000128 	.word	0x20000128
 80019dc:	20000124 	.word	0x20000124

080019e0 <timer_run>:
	timer3_counter = duration/TIMER_CYCLE;
	timer3_flag = 0;
}

//TIMER DRIVERS
void timer_run(){
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <timer_run+0x6c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	dd0b      	ble.n	8001a04 <timer_run+0x24>
		timer1_counter--;
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <timer_run+0x6c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	4a16      	ldr	r2, [pc, #88]	; (8001a4c <timer_run+0x6c>)
 80019f4:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <timer_run+0x6c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <timer_run+0x24>
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <timer_run+0x70>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <timer_run+0x74>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	dd0b      	ble.n	8001a24 <timer_run+0x44>
		timer2_counter--;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <timer_run+0x74>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <timer_run+0x74>)
 8001a14:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <timer_run+0x74>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d102      	bne.n	8001a24 <timer_run+0x44>
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <timer_run+0x78>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 8001a24:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <timer_run+0x7c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	dd0b      	ble.n	8001a44 <timer_run+0x64>
		timer3_counter--;
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <timer_run+0x7c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <timer_run+0x7c>)
 8001a34:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) timer3_flag = 1;
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <timer_run+0x7c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <timer_run+0x64>
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <timer_run+0x80>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
	}
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	20000120 	.word	0x20000120
 8001a50:	2000011c 	.word	0x2000011c
 8001a54:	20000128 	.word	0x20000128
 8001a58:	20000124 	.word	0x20000124
 8001a5c:	20000130 	.word	0x20000130
 8001a60:	2000012c 	.word	0x2000012c

08001a64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	timer_run();
 8001a6c:	f7ff ffb8 	bl	80019e0 <timer_run>
	button_processing();
 8001a70:	f7fe fb86 	bl	8000180 <button_processing>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a7c:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a7e:	490d      	ldr	r1, [pc, #52]	; (8001ab4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a80:	4a0d      	ldr	r2, [pc, #52]	; (8001ab8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a84:	e002      	b.n	8001a8c <LoopCopyDataInit>

08001a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8a:	3304      	adds	r3, #4

08001a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a90:	d3f9      	bcc.n	8001a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a94:	4c0a      	ldr	r4, [pc, #40]	; (8001ac0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a98:	e001      	b.n	8001a9e <LoopFillZerobss>

08001a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a9c:	3204      	adds	r2, #4

08001a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa0:	d3fb      	bcc.n	8001a9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001aa2:	f7ff ff5f 	bl	8001964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aa6:	f002 fbb9 	bl	800421c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aaa:	f7ff fc17 	bl	80012dc <main>
  bx lr
 8001aae:	4770      	bx	lr
  ldr r0, =_sdata
 8001ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001ab8:	08004b74 	.word	0x08004b74
  ldr r2, =_sbss
 8001abc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001ac0:	20000224 	.word	0x20000224

08001ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ac4:	e7fe      	b.n	8001ac4 <ADC1_2_IRQHandler>
	...

08001ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HAL_Init+0x28>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <HAL_Init+0x28>)
 8001ad2:	f043 0310 	orr.w	r3, r3, #16
 8001ad6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad8:	2003      	movs	r0, #3
 8001ada:	f000 f923 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ade:	200f      	movs	r0, #15
 8001ae0:	f000 f808 	bl	8001af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae4:	f7ff fdde 	bl	80016a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40022000 	.word	0x40022000

08001af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_InitTick+0x54>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_InitTick+0x58>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f93b 	bl	8001d8e <HAL_SYSTICK_Config>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00e      	b.n	8001b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b0f      	cmp	r3, #15
 8001b26:	d80a      	bhi.n	8001b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f000 f903 	bl	8001d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b34:	4a06      	ldr	r2, [pc, #24]	; (8001b50 <HAL_InitTick+0x5c>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e000      	b.n	8001b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	2000001c 	.word	0x2000001c
 8001b4c:	20000024 	.word	0x20000024
 8001b50:	20000020 	.word	0x20000020

08001b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_IncTick+0x1c>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_IncTick+0x20>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	4a03      	ldr	r2, [pc, #12]	; (8001b74 <HAL_IncTick+0x20>)
 8001b66:	6013      	str	r3, [r2, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	20000024 	.word	0x20000024
 8001b74:	20000210 	.word	0x20000210

08001b78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b7c:	4b02      	ldr	r3, [pc, #8]	; (8001b88 <HAL_GetTick+0x10>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	20000210 	.word	0x20000210

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	60d3      	str	r3, [r2, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db0b      	blt.n	8001c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	4906      	ldr	r1, [pc, #24]	; (8001c24 <__NVIC_EnableIRQ+0x34>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	e000e100 	.word	0xe000e100

08001c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db0a      	blt.n	8001c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	490c      	ldr	r1, [pc, #48]	; (8001c74 <__NVIC_SetPriority+0x4c>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c50:	e00a      	b.n	8001c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4908      	ldr	r1, [pc, #32]	; (8001c78 <__NVIC_SetPriority+0x50>)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3b04      	subs	r3, #4
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	761a      	strb	r2, [r3, #24]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000e100 	.word	0xe000e100
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f1c3 0307 	rsb	r3, r3, #7
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	bf28      	it	cs
 8001c9a:	2304      	movcs	r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d902      	bls.n	8001cac <NVIC_EncodePriority+0x30>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3b03      	subs	r3, #3
 8001caa:	e000      	b.n	8001cae <NVIC_EncodePriority+0x32>
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	4313      	orrs	r3, r2
         );
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3724      	adds	r7, #36	; 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf0:	d301      	bcc.n	8001cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00f      	b.n	8001d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <SysTick_Config+0x40>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfe:	210f      	movs	r1, #15
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f7ff ff90 	bl	8001c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <SysTick_Config+0x40>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <SysTick_Config+0x40>)
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	e000e010 	.word	0xe000e010

08001d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff2d 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d4c:	f7ff ff42 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	6978      	ldr	r0, [r7, #20]
 8001d58:	f7ff ff90 	bl	8001c7c <NVIC_EncodePriority>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff5f 	bl	8001c28 <__NVIC_SetPriority>
}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff35 	bl	8001bf0 <__NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ffa2 	bl	8001ce0 <SysTick_Config>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b085      	sub	sp, #20
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d008      	beq.n	8001dce <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e020      	b.n	8001e10 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 020e 	bic.w	r2, r2, #14
 8001ddc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0201 	bic.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df6:	2101      	movs	r1, #1
 8001df8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d005      	beq.n	8001e3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2204      	movs	r2, #4
 8001e36:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	e051      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 020e 	bic.w	r2, r2, #14
 8001e4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0201 	bic.w	r2, r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a22      	ldr	r2, [pc, #136]	; (8001eec <HAL_DMA_Abort_IT+0xd0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d029      	beq.n	8001ebc <HAL_DMA_Abort_IT+0xa0>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a20      	ldr	r2, [pc, #128]	; (8001ef0 <HAL_DMA_Abort_IT+0xd4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d022      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x9c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1f      	ldr	r2, [pc, #124]	; (8001ef4 <HAL_DMA_Abort_IT+0xd8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d01a      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x96>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <HAL_DMA_Abort_IT+0xdc>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d012      	beq.n	8001eac <HAL_DMA_Abort_IT+0x90>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <HAL_DMA_Abort_IT+0xe0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00a      	beq.n	8001ea6 <HAL_DMA_Abort_IT+0x8a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1a      	ldr	r2, [pc, #104]	; (8001f00 <HAL_DMA_Abort_IT+0xe4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d102      	bne.n	8001ea0 <HAL_DMA_Abort_IT+0x84>
 8001e9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e9e:	e00e      	b.n	8001ebe <HAL_DMA_Abort_IT+0xa2>
 8001ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ea4:	e00b      	b.n	8001ebe <HAL_DMA_Abort_IT+0xa2>
 8001ea6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eaa:	e008      	b.n	8001ebe <HAL_DMA_Abort_IT+0xa2>
 8001eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb0:	e005      	b.n	8001ebe <HAL_DMA_Abort_IT+0xa2>
 8001eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb6:	e002      	b.n	8001ebe <HAL_DMA_Abort_IT+0xa2>
 8001eb8:	2310      	movs	r3, #16
 8001eba:	e000      	b.n	8001ebe <HAL_DMA_Abort_IT+0xa2>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <HAL_DMA_Abort_IT+0xe8>)
 8001ec0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	4798      	blx	r3
    } 
  }
  return status;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40020008 	.word	0x40020008
 8001ef0:	4002001c 	.word	0x4002001c
 8001ef4:	40020030 	.word	0x40020030
 8001ef8:	40020044 	.word	0x40020044
 8001efc:	40020058 	.word	0x40020058
 8001f00:	4002006c 	.word	0x4002006c
 8001f04:	40020000 	.word	0x40020000

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b08b      	sub	sp, #44	; 0x2c
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1a:	e169      	b.n	80021f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	f040 8158 	bne.w	80021ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4a9a      	ldr	r2, [pc, #616]	; (80021a8 <HAL_GPIO_Init+0x2a0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d05e      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f44:	4a98      	ldr	r2, [pc, #608]	; (80021a8 <HAL_GPIO_Init+0x2a0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d875      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f4a:	4a98      	ldr	r2, [pc, #608]	; (80021ac <HAL_GPIO_Init+0x2a4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d058      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f50:	4a96      	ldr	r2, [pc, #600]	; (80021ac <HAL_GPIO_Init+0x2a4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d86f      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f56:	4a96      	ldr	r2, [pc, #600]	; (80021b0 <HAL_GPIO_Init+0x2a8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d052      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f5c:	4a94      	ldr	r2, [pc, #592]	; (80021b0 <HAL_GPIO_Init+0x2a8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d869      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f62:	4a94      	ldr	r2, [pc, #592]	; (80021b4 <HAL_GPIO_Init+0x2ac>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d04c      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f68:	4a92      	ldr	r2, [pc, #584]	; (80021b4 <HAL_GPIO_Init+0x2ac>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d863      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f6e:	4a92      	ldr	r2, [pc, #584]	; (80021b8 <HAL_GPIO_Init+0x2b0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d046      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f74:	4a90      	ldr	r2, [pc, #576]	; (80021b8 <HAL_GPIO_Init+0x2b0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d85d      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f7a:	2b12      	cmp	r3, #18
 8001f7c:	d82a      	bhi.n	8001fd4 <HAL_GPIO_Init+0xcc>
 8001f7e:	2b12      	cmp	r3, #18
 8001f80:	d859      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f82:	a201      	add	r2, pc, #4	; (adr r2, 8001f88 <HAL_GPIO_Init+0x80>)
 8001f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f88:	08002003 	.word	0x08002003
 8001f8c:	08001fdd 	.word	0x08001fdd
 8001f90:	08001fef 	.word	0x08001fef
 8001f94:	08002031 	.word	0x08002031
 8001f98:	08002037 	.word	0x08002037
 8001f9c:	08002037 	.word	0x08002037
 8001fa0:	08002037 	.word	0x08002037
 8001fa4:	08002037 	.word	0x08002037
 8001fa8:	08002037 	.word	0x08002037
 8001fac:	08002037 	.word	0x08002037
 8001fb0:	08002037 	.word	0x08002037
 8001fb4:	08002037 	.word	0x08002037
 8001fb8:	08002037 	.word	0x08002037
 8001fbc:	08002037 	.word	0x08002037
 8001fc0:	08002037 	.word	0x08002037
 8001fc4:	08002037 	.word	0x08002037
 8001fc8:	08002037 	.word	0x08002037
 8001fcc:	08001fe5 	.word	0x08001fe5
 8001fd0:	08001ff9 	.word	0x08001ff9
 8001fd4:	4a79      	ldr	r2, [pc, #484]	; (80021bc <HAL_GPIO_Init+0x2b4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fda:	e02c      	b.n	8002036 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	623b      	str	r3, [r7, #32]
          break;
 8001fe2:	e029      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	623b      	str	r3, [r7, #32]
          break;
 8001fec:	e024      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	3308      	adds	r3, #8
 8001ff4:	623b      	str	r3, [r7, #32]
          break;
 8001ff6:	e01f      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	330c      	adds	r3, #12
 8001ffe:	623b      	str	r3, [r7, #32]
          break;
 8002000:	e01a      	b.n	8002038 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800200a:	2304      	movs	r3, #4
 800200c:	623b      	str	r3, [r7, #32]
          break;
 800200e:	e013      	b.n	8002038 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d105      	bne.n	8002024 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002018:	2308      	movs	r3, #8
 800201a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	611a      	str	r2, [r3, #16]
          break;
 8002022:	e009      	b.n	8002038 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002024:	2308      	movs	r3, #8
 8002026:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	615a      	str	r2, [r3, #20]
          break;
 800202e:	e003      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
          break;
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x130>
          break;
 8002036:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2bff      	cmp	r3, #255	; 0xff
 800203c:	d801      	bhi.n	8002042 <HAL_GPIO_Init+0x13a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	e001      	b.n	8002046 <HAL_GPIO_Init+0x13e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3304      	adds	r3, #4
 8002046:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2bff      	cmp	r3, #255	; 0xff
 800204c:	d802      	bhi.n	8002054 <HAL_GPIO_Init+0x14c>
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	e002      	b.n	800205a <HAL_GPIO_Init+0x152>
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	3b08      	subs	r3, #8
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	210f      	movs	r1, #15
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	fa01 f303 	lsl.w	r3, r1, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	401a      	ands	r2, r3
 800206c:	6a39      	ldr	r1, [r7, #32]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	fa01 f303 	lsl.w	r3, r1, r3
 8002074:	431a      	orrs	r2, r3
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 80b1 	beq.w	80021ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002088:	4b4d      	ldr	r3, [pc, #308]	; (80021c0 <HAL_GPIO_Init+0x2b8>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	4a4c      	ldr	r2, [pc, #304]	; (80021c0 <HAL_GPIO_Init+0x2b8>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6193      	str	r3, [r2, #24]
 8002094:	4b4a      	ldr	r3, [pc, #296]	; (80021c0 <HAL_GPIO_Init+0x2b8>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020a0:	4a48      	ldr	r2, [pc, #288]	; (80021c4 <HAL_GPIO_Init+0x2bc>)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a40      	ldr	r2, [pc, #256]	; (80021c8 <HAL_GPIO_Init+0x2c0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d013      	beq.n	80020f4 <HAL_GPIO_Init+0x1ec>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a3f      	ldr	r2, [pc, #252]	; (80021cc <HAL_GPIO_Init+0x2c4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00d      	beq.n	80020f0 <HAL_GPIO_Init+0x1e8>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a3e      	ldr	r2, [pc, #248]	; (80021d0 <HAL_GPIO_Init+0x2c8>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d007      	beq.n	80020ec <HAL_GPIO_Init+0x1e4>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a3d      	ldr	r2, [pc, #244]	; (80021d4 <HAL_GPIO_Init+0x2cc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d101      	bne.n	80020e8 <HAL_GPIO_Init+0x1e0>
 80020e4:	2303      	movs	r3, #3
 80020e6:	e006      	b.n	80020f6 <HAL_GPIO_Init+0x1ee>
 80020e8:	2304      	movs	r3, #4
 80020ea:	e004      	b.n	80020f6 <HAL_GPIO_Init+0x1ee>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e002      	b.n	80020f6 <HAL_GPIO_Init+0x1ee>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <HAL_GPIO_Init+0x1ee>
 80020f4:	2300      	movs	r3, #0
 80020f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f8:	f002 0203 	and.w	r2, r2, #3
 80020fc:	0092      	lsls	r2, r2, #2
 80020fe:	4093      	lsls	r3, r2
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002106:	492f      	ldr	r1, [pc, #188]	; (80021c4 <HAL_GPIO_Init+0x2bc>)
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	089b      	lsrs	r3, r3, #2
 800210c:	3302      	adds	r3, #2
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d006      	beq.n	800212e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002120:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	492c      	ldr	r1, [pc, #176]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	600b      	str	r3, [r1, #0]
 800212c:	e006      	b.n	800213c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800212e:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	43db      	mvns	r3, r3
 8002136:	4928      	ldr	r1, [pc, #160]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002138:	4013      	ands	r3, r2
 800213a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d006      	beq.n	8002156 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002148:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	4922      	ldr	r1, [pc, #136]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	43db      	mvns	r3, r3
 800215e:	491e      	ldr	r1, [pc, #120]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002160:	4013      	ands	r3, r2
 8002162:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	4918      	ldr	r1, [pc, #96]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	608b      	str	r3, [r1, #8]
 800217c:	e006      	b.n	800218c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800217e:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	43db      	mvns	r3, r3
 8002186:	4914      	ldr	r1, [pc, #80]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002188:	4013      	ands	r3, r2
 800218a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d021      	beq.n	80021dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002198:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	490e      	ldr	r1, [pc, #56]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	60cb      	str	r3, [r1, #12]
 80021a4:	e021      	b.n	80021ea <HAL_GPIO_Init+0x2e2>
 80021a6:	bf00      	nop
 80021a8:	10320000 	.word	0x10320000
 80021ac:	10310000 	.word	0x10310000
 80021b0:	10220000 	.word	0x10220000
 80021b4:	10210000 	.word	0x10210000
 80021b8:	10120000 	.word	0x10120000
 80021bc:	10110000 	.word	0x10110000
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40010000 	.word	0x40010000
 80021c8:	40010800 	.word	0x40010800
 80021cc:	40010c00 	.word	0x40010c00
 80021d0:	40011000 	.word	0x40011000
 80021d4:	40011400 	.word	0x40011400
 80021d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_GPIO_Init+0x304>)
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	4909      	ldr	r1, [pc, #36]	; (800220c <HAL_GPIO_Init+0x304>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	3301      	adds	r3, #1
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	fa22 f303 	lsr.w	r3, r2, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f47f ae8e 	bne.w	8001f1c <HAL_GPIO_Init+0x14>
  }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	372c      	adds	r7, #44	; 0x2c
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	40010400 	.word	0x40010400

08002210 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	887b      	ldrh	r3, [r7, #2]
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
 800222c:	e001      	b.n	8002232 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002232:	7bfb      	ldrb	r3, [r7, #15]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	460b      	mov	r3, r1
 8002248:	807b      	strh	r3, [r7, #2]
 800224a:	4613      	mov	r3, r2
 800224c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800224e:	787b      	ldrb	r3, [r7, #1]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002254:	887a      	ldrh	r2, [r7, #2]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800225a:	e003      	b.n	8002264 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	041a      	lsls	r2, r3, #16
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	611a      	str	r2, [r3, #16]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	460b      	mov	r3, r1
 8002278:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002280:	887a      	ldrh	r2, [r7, #2]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4013      	ands	r3, r2
 8002286:	041a      	lsls	r2, r3, #16
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	43d9      	mvns	r1, r3
 800228c:	887b      	ldrh	r3, [r7, #2]
 800228e:	400b      	ands	r3, r1
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	611a      	str	r2, [r3, #16]
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e26c      	b.n	800278c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8087 	beq.w	80023ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022c0:	4b92      	ldr	r3, [pc, #584]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d00c      	beq.n	80022e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022cc:	4b8f      	ldr	r3, [pc, #572]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d112      	bne.n	80022fe <HAL_RCC_OscConfig+0x5e>
 80022d8:	4b8c      	ldr	r3, [pc, #560]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e4:	d10b      	bne.n	80022fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e6:	4b89      	ldr	r3, [pc, #548]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d06c      	beq.n	80023cc <HAL_RCC_OscConfig+0x12c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d168      	bne.n	80023cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e246      	b.n	800278c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002306:	d106      	bne.n	8002316 <HAL_RCC_OscConfig+0x76>
 8002308:	4b80      	ldr	r3, [pc, #512]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a7f      	ldr	r2, [pc, #508]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 800230e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	e02e      	b.n	8002374 <HAL_RCC_OscConfig+0xd4>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10c      	bne.n	8002338 <HAL_RCC_OscConfig+0x98>
 800231e:	4b7b      	ldr	r3, [pc, #492]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a7a      	ldr	r2, [pc, #488]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4b78      	ldr	r3, [pc, #480]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a77      	ldr	r2, [pc, #476]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e01d      	b.n	8002374 <HAL_RCC_OscConfig+0xd4>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0xbc>
 8002342:	4b72      	ldr	r3, [pc, #456]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a71      	ldr	r2, [pc, #452]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4b6f      	ldr	r3, [pc, #444]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a6e      	ldr	r2, [pc, #440]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e00b      	b.n	8002374 <HAL_RCC_OscConfig+0xd4>
 800235c:	4b6b      	ldr	r3, [pc, #428]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a6a      	ldr	r2, [pc, #424]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b68      	ldr	r3, [pc, #416]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a67      	ldr	r2, [pc, #412]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 800236e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002372:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7ff fbfc 	bl	8001b78 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002384:	f7ff fbf8 	bl	8001b78 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e1fa      	b.n	800278c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	4b5d      	ldr	r3, [pc, #372]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0xe4>
 80023a2:	e014      	b.n	80023ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7ff fbe8 	bl	8001b78 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ac:	f7ff fbe4 	bl	8001b78 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e1e6      	b.n	800278c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023be:	4b53      	ldr	r3, [pc, #332]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x10c>
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d063      	beq.n	80024a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023da:	4b4c      	ldr	r3, [pc, #304]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023e6:	4b49      	ldr	r3, [pc, #292]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d11c      	bne.n	800242c <HAL_RCC_OscConfig+0x18c>
 80023f2:	4b46      	ldr	r3, [pc, #280]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d116      	bne.n	800242c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fe:	4b43      	ldr	r3, [pc, #268]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_RCC_OscConfig+0x176>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d001      	beq.n	8002416 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e1ba      	b.n	800278c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002416:	4b3d      	ldr	r3, [pc, #244]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4939      	ldr	r1, [pc, #228]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242a:	e03a      	b.n	80024a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d020      	beq.n	8002476 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002434:	4b36      	ldr	r3, [pc, #216]	; (8002510 <HAL_RCC_OscConfig+0x270>)
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243a:	f7ff fb9d 	bl	8001b78 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002442:	f7ff fb99 	bl	8001b78 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e19b      	b.n	800278c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002454:	4b2d      	ldr	r3, [pc, #180]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002460:	4b2a      	ldr	r3, [pc, #168]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4927      	ldr	r1, [pc, #156]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]
 8002474:	e015      	b.n	80024a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002476:	4b26      	ldr	r3, [pc, #152]	; (8002510 <HAL_RCC_OscConfig+0x270>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7ff fb7c 	bl	8001b78 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002484:	f7ff fb78 	bl	8001b78 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e17a      	b.n	800278c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d03a      	beq.n	8002524 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d019      	beq.n	80024ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b6:	4b17      	ldr	r3, [pc, #92]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024bc:	f7ff fb5c 	bl	8001b78 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c4:	f7ff fb58 	bl	8001b78 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e15a      	b.n	800278c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d6:	4b0d      	ldr	r3, [pc, #52]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024e2:	2001      	movs	r0, #1
 80024e4:	f000 fad8 	bl	8002a98 <RCC_Delay>
 80024e8:	e01c      	b.n	8002524 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f0:	f7ff fb42 	bl	8001b78 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f6:	e00f      	b.n	8002518 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f8:	f7ff fb3e 	bl	8001b78 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d908      	bls.n	8002518 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e140      	b.n	800278c <HAL_RCC_OscConfig+0x4ec>
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
 8002510:	42420000 	.word	0x42420000
 8002514:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002518:	4b9e      	ldr	r3, [pc, #632]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1e9      	bne.n	80024f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80a6 	beq.w	800267e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002532:	2300      	movs	r3, #0
 8002534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002536:	4b97      	ldr	r3, [pc, #604]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10d      	bne.n	800255e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	4b94      	ldr	r3, [pc, #592]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	4a93      	ldr	r2, [pc, #588]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 8002548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254c:	61d3      	str	r3, [r2, #28]
 800254e:	4b91      	ldr	r3, [pc, #580]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255a:	2301      	movs	r3, #1
 800255c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255e:	4b8e      	ldr	r3, [pc, #568]	; (8002798 <HAL_RCC_OscConfig+0x4f8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d118      	bne.n	800259c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256a:	4b8b      	ldr	r3, [pc, #556]	; (8002798 <HAL_RCC_OscConfig+0x4f8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a8a      	ldr	r2, [pc, #552]	; (8002798 <HAL_RCC_OscConfig+0x4f8>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002576:	f7ff faff 	bl	8001b78 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257e:	f7ff fafb 	bl	8001b78 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b64      	cmp	r3, #100	; 0x64
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e0fd      	b.n	800278c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	4b81      	ldr	r3, [pc, #516]	; (8002798 <HAL_RCC_OscConfig+0x4f8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x312>
 80025a4:	4b7b      	ldr	r3, [pc, #492]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4a7a      	ldr	r2, [pc, #488]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6213      	str	r3, [r2, #32]
 80025b0:	e02d      	b.n	800260e <HAL_RCC_OscConfig+0x36e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x334>
 80025ba:	4b76      	ldr	r3, [pc, #472]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4a75      	ldr	r2, [pc, #468]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	6213      	str	r3, [r2, #32]
 80025c6:	4b73      	ldr	r3, [pc, #460]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4a72      	ldr	r2, [pc, #456]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	6213      	str	r3, [r2, #32]
 80025d2:	e01c      	b.n	800260e <HAL_RCC_OscConfig+0x36e>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d10c      	bne.n	80025f6 <HAL_RCC_OscConfig+0x356>
 80025dc:	4b6d      	ldr	r3, [pc, #436]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4a6c      	ldr	r2, [pc, #432]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	6213      	str	r3, [r2, #32]
 80025e8:	4b6a      	ldr	r3, [pc, #424]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	4a69      	ldr	r2, [pc, #420]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6213      	str	r3, [r2, #32]
 80025f4:	e00b      	b.n	800260e <HAL_RCC_OscConfig+0x36e>
 80025f6:	4b67      	ldr	r3, [pc, #412]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	4a66      	ldr	r2, [pc, #408]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	6213      	str	r3, [r2, #32]
 8002602:	4b64      	ldr	r3, [pc, #400]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	4a63      	ldr	r2, [pc, #396]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 8002608:	f023 0304 	bic.w	r3, r3, #4
 800260c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d015      	beq.n	8002642 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002616:	f7ff faaf 	bl	8001b78 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7ff faab 	bl	8001b78 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	; 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0ab      	b.n	800278c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002634:	4b57      	ldr	r3, [pc, #348]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ee      	beq.n	800261e <HAL_RCC_OscConfig+0x37e>
 8002640:	e014      	b.n	800266c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002642:	f7ff fa99 	bl	8001b78 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002648:	e00a      	b.n	8002660 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264a:	f7ff fa95 	bl	8001b78 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	; 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e095      	b.n	800278c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002660:	4b4c      	ldr	r3, [pc, #304]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ee      	bne.n	800264a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d105      	bne.n	800267e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002672:	4b48      	ldr	r3, [pc, #288]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	4a47      	ldr	r2, [pc, #284]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 8081 	beq.w	800278a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002688:	4b42      	ldr	r3, [pc, #264]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b08      	cmp	r3, #8
 8002692:	d061      	beq.n	8002758 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d146      	bne.n	800272a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269c:	4b3f      	ldr	r3, [pc, #252]	; (800279c <HAL_RCC_OscConfig+0x4fc>)
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7ff fa69 	bl	8001b78 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026aa:	f7ff fa65 	bl	8001b78 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e067      	b.n	800278c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026bc:	4b35      	ldr	r3, [pc, #212]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f0      	bne.n	80026aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d0:	d108      	bne.n	80026e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026d2:	4b30      	ldr	r3, [pc, #192]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	492d      	ldr	r1, [pc, #180]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e4:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a19      	ldr	r1, [r3, #32]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	430b      	orrs	r3, r1
 80026f6:	4927      	ldr	r1, [pc, #156]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026fc:	4b27      	ldr	r3, [pc, #156]	; (800279c <HAL_RCC_OscConfig+0x4fc>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002702:	f7ff fa39 	bl	8001b78 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270a:	f7ff fa35 	bl	8001b78 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e037      	b.n	800278c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800271c:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x46a>
 8002728:	e02f      	b.n	800278a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272a:	4b1c      	ldr	r3, [pc, #112]	; (800279c <HAL_RCC_OscConfig+0x4fc>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7ff fa22 	bl	8001b78 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002738:	f7ff fa1e 	bl	8001b78 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e020      	b.n	800278c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x498>
 8002756:	e018      	b.n	800278a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e013      	b.n	800278c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_OscConfig+0x4f4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	429a      	cmp	r2, r3
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d001      	beq.n	800278a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40021000 	.word	0x40021000
 8002798:	40007000 	.word	0x40007000
 800279c:	42420060 	.word	0x42420060

080027a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0d0      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027b4:	4b6a      	ldr	r3, [pc, #424]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d910      	bls.n	80027e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	4b67      	ldr	r3, [pc, #412]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 0207 	bic.w	r2, r3, #7
 80027ca:	4965      	ldr	r1, [pc, #404]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d2:	4b63      	ldr	r3, [pc, #396]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0b8      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027fc:	4b59      	ldr	r3, [pc, #356]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a58      	ldr	r2, [pc, #352]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002806:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002814:	4b53      	ldr	r3, [pc, #332]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a52      	ldr	r2, [pc, #328]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800281e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002820:	4b50      	ldr	r3, [pc, #320]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	494d      	ldr	r1, [pc, #308]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d040      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	4b47      	ldr	r3, [pc, #284]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d115      	bne.n	800287e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e07f      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d107      	bne.n	800286e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285e:	4b41      	ldr	r3, [pc, #260]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d109      	bne.n	800287e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e073      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286e:	4b3d      	ldr	r3, [pc, #244]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e06b      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800287e:	4b39      	ldr	r3, [pc, #228]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f023 0203 	bic.w	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4936      	ldr	r1, [pc, #216]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002890:	f7ff f972 	bl	8001b78 <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	e00a      	b.n	80028ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002898:	f7ff f96e 	bl	8001b78 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e053      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ae:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 020c 	and.w	r2, r3, #12
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	429a      	cmp	r2, r3
 80028be:	d1eb      	bne.n	8002898 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028c0:	4b27      	ldr	r3, [pc, #156]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d210      	bcs.n	80028f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ce:	4b24      	ldr	r3, [pc, #144]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 0207 	bic.w	r2, r3, #7
 80028d6:	4922      	ldr	r1, [pc, #136]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	4313      	orrs	r3, r2
 80028dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e032      	b.n	8002956 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4916      	ldr	r1, [pc, #88]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d009      	beq.n	800292e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800291a:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	490e      	ldr	r1, [pc, #56]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800292e:	f000 f821 	bl	8002974 <HAL_RCC_GetSysClockFreq>
 8002932:	4602      	mov	r2, r0
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	490a      	ldr	r1, [pc, #40]	; (8002968 <HAL_RCC_ClockConfig+0x1c8>)
 8002940:	5ccb      	ldrb	r3, [r1, r3]
 8002942:	fa22 f303 	lsr.w	r3, r2, r3
 8002946:	4a09      	ldr	r2, [pc, #36]	; (800296c <HAL_RCC_ClockConfig+0x1cc>)
 8002948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_RCC_ClockConfig+0x1d0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff f8d0 	bl	8001af4 <HAL_InitTick>

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40022000 	.word	0x40022000
 8002964:	40021000 	.word	0x40021000
 8002968:	08004b20 	.word	0x08004b20
 800296c:	2000001c 	.word	0x2000001c
 8002970:	20000020 	.word	0x20000020

08002974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002974:	b490      	push	{r4, r7}
 8002976:	b08a      	sub	sp, #40	; 0x28
 8002978:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800297a:	4b2a      	ldr	r3, [pc, #168]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xb0>)
 800297c:	1d3c      	adds	r4, r7, #4
 800297e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002984:	f240 2301 	movw	r3, #513	; 0x201
 8002988:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	2300      	movs	r3, #0
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800299e:	4b22      	ldr	r3, [pc, #136]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d002      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x40>
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d003      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0x46>
 80029b2:	e02d      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029b4:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029b6:	623b      	str	r3, [r7, #32]
      break;
 80029b8:	e02d      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	0c9b      	lsrs	r3, r3, #18
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029c6:	4413      	add	r3, r2
 80029c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d013      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029d8:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	0c5b      	lsrs	r3, r3, #17
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029e6:	4413      	add	r3, r2
 80029e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	4a0e      	ldr	r2, [pc, #56]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f2:	fb02 f203 	mul.w	r2, r2, r3
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
 80029fe:	e004      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a04:	fb02 f303 	mul.w	r3, r2, r3
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	623b      	str	r3, [r7, #32]
      break;
 8002a0e:	e002      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a12:	623b      	str	r3, [r7, #32]
      break;
 8002a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a16:	6a3b      	ldr	r3, [r7, #32]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3728      	adds	r7, #40	; 0x28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc90      	pop	{r4, r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	08004b10 	.word	0x08004b10
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	007a1200 	.word	0x007a1200
 8002a30:	003d0900 	.word	0x003d0900

08002a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a38:	4b02      	ldr	r3, [pc, #8]	; (8002a44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	2000001c 	.word	0x2000001c

08002a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a4c:	f7ff fff2 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	0a1b      	lsrs	r3, r3, #8
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4903      	ldr	r1, [pc, #12]	; (8002a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	08004b30 	.word	0x08004b30

08002a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a74:	f7ff ffde 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	0adb      	lsrs	r3, r3, #11
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	4903      	ldr	r1, [pc, #12]	; (8002a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a86:	5ccb      	ldrb	r3, [r1, r3]
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000
 8002a94:	08004b30 	.word	0x08004b30

08002a98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <RCC_Delay+0x34>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <RCC_Delay+0x38>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	0a5b      	lsrs	r3, r3, #9
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	fb02 f303 	mul.w	r3, r2, r3
 8002ab2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ab4:	bf00      	nop
  }
  while (Delay --);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1e5a      	subs	r2, r3, #1
 8002aba:	60fa      	str	r2, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f9      	bne.n	8002ab4 <RCC_Delay+0x1c>
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr
 8002acc:	2000001c 	.word	0x2000001c
 8002ad0:	10624dd3 	.word	0x10624dd3

08002ad4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e041      	b.n	8002b6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fe fe04 	bl	8001708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	4619      	mov	r1, r3
 8002b12:	4610      	mov	r0, r2
 8002b14:	f000 fc28 	bl	8003368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d001      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e03a      	b.n	8002c02 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a18      	ldr	r2, [pc, #96]	; (8002c0c <HAL_TIM_Base_Start_IT+0x98>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00e      	beq.n	8002bcc <HAL_TIM_Base_Start_IT+0x58>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb6:	d009      	beq.n	8002bcc <HAL_TIM_Base_Start_IT+0x58>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a14      	ldr	r2, [pc, #80]	; (8002c10 <HAL_TIM_Base_Start_IT+0x9c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d004      	beq.n	8002bcc <HAL_TIM_Base_Start_IT+0x58>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a13      	ldr	r2, [pc, #76]	; (8002c14 <HAL_TIM_Base_Start_IT+0xa0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d111      	bne.n	8002bf0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b06      	cmp	r3, #6
 8002bdc:	d010      	beq.n	8002c00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0201 	orr.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bee:	e007      	b.n	8002c00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	40012c00 	.word	0x40012c00
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40000800 	.word	0x40000800

08002c18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e041      	b.n	8002cae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f839 	bl	8002cb6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3304      	adds	r3, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	4610      	mov	r0, r2
 8002c58:	f000 fb86 	bl	8003368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d109      	bne.n	8002cec <HAL_TIM_PWM_Start+0x24>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	bf14      	ite	ne
 8002ce4:	2301      	movne	r3, #1
 8002ce6:	2300      	moveq	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	e022      	b.n	8002d32 <HAL_TIM_PWM_Start+0x6a>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d109      	bne.n	8002d06 <HAL_TIM_PWM_Start+0x3e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	bf14      	ite	ne
 8002cfe:	2301      	movne	r3, #1
 8002d00:	2300      	moveq	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	e015      	b.n	8002d32 <HAL_TIM_PWM_Start+0x6a>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d109      	bne.n	8002d20 <HAL_TIM_PWM_Start+0x58>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	bf14      	ite	ne
 8002d18:	2301      	movne	r3, #1
 8002d1a:	2300      	moveq	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	e008      	b.n	8002d32 <HAL_TIM_PWM_Start+0x6a>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	bf14      	ite	ne
 8002d2c:	2301      	movne	r3, #1
 8002d2e:	2300      	moveq	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e05e      	b.n	8002df8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d104      	bne.n	8002d4a <HAL_TIM_PWM_Start+0x82>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d48:	e013      	b.n	8002d72 <HAL_TIM_PWM_Start+0xaa>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d104      	bne.n	8002d5a <HAL_TIM_PWM_Start+0x92>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d58:	e00b      	b.n	8002d72 <HAL_TIM_PWM_Start+0xaa>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d104      	bne.n	8002d6a <HAL_TIM_PWM_Start+0xa2>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d68:	e003      	b.n	8002d72 <HAL_TIM_PWM_Start+0xaa>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2201      	movs	r2, #1
 8002d78:	6839      	ldr	r1, [r7, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fd74 	bl	8003868 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <HAL_TIM_PWM_Start+0x138>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d107      	bne.n	8002d9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <HAL_TIM_PWM_Start+0x138>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00e      	beq.n	8002dc2 <HAL_TIM_PWM_Start+0xfa>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dac:	d009      	beq.n	8002dc2 <HAL_TIM_PWM_Start+0xfa>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <HAL_TIM_PWM_Start+0x13c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d004      	beq.n	8002dc2 <HAL_TIM_PWM_Start+0xfa>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <HAL_TIM_PWM_Start+0x140>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d111      	bne.n	8002de6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b06      	cmp	r3, #6
 8002dd2:	d010      	beq.n	8002df6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de4:	e007      	b.n	8002df6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0201 	orr.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40012c00 	.word	0x40012c00
 8002e04:	40000400 	.word	0x40000400
 8002e08:	40000800 	.word	0x40000800

08002e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d122      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d11b      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0202 	mvn.w	r2, #2
 8002e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fa6f 	bl	8003332 <HAL_TIM_IC_CaptureCallback>
 8002e54:	e005      	b.n	8002e62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fa62 	bl	8003320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 fa71 	bl	8003344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d122      	bne.n	8002ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d11b      	bne.n	8002ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0204 	mvn.w	r2, #4
 8002e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2202      	movs	r2, #2
 8002e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fa45 	bl	8003332 <HAL_TIM_IC_CaptureCallback>
 8002ea8:	e005      	b.n	8002eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fa38 	bl	8003320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fa47 	bl	8003344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d122      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d11b      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0208 	mvn.w	r2, #8
 8002ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fa1b 	bl	8003332 <HAL_TIM_IC_CaptureCallback>
 8002efc:	e005      	b.n	8002f0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fa0e 	bl	8003320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fa1d 	bl	8003344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b10      	cmp	r3, #16
 8002f1c:	d122      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b10      	cmp	r3, #16
 8002f2a:	d11b      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0210 	mvn.w	r2, #16
 8002f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2208      	movs	r2, #8
 8002f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f9f1 	bl	8003332 <HAL_TIM_IC_CaptureCallback>
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f9e4 	bl	8003320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f9f3 	bl	8003344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d10e      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d107      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0201 	mvn.w	r2, #1
 8002f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fe fd6a 	bl	8001a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9a:	2b80      	cmp	r3, #128	; 0x80
 8002f9c:	d10e      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa8:	2b80      	cmp	r3, #128	; 0x80
 8002faa:	d107      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fce1 	bl	800397e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc6:	2b40      	cmp	r3, #64	; 0x40
 8002fc8:	d10e      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	d107      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f9b7 	bl	8003356 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d10e      	bne.n	8003014 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b20      	cmp	r3, #32
 8003002:	d107      	bne.n	8003014 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0220 	mvn.w	r2, #32
 800300c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fcac 	bl	800396c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003032:	2302      	movs	r3, #2
 8003034:	e0ac      	b.n	8003190 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b0c      	cmp	r3, #12
 8003042:	f200 809f 	bhi.w	8003184 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003046:	a201      	add	r2, pc, #4	; (adr r2, 800304c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	08003081 	.word	0x08003081
 8003050:	08003185 	.word	0x08003185
 8003054:	08003185 	.word	0x08003185
 8003058:	08003185 	.word	0x08003185
 800305c:	080030c1 	.word	0x080030c1
 8003060:	08003185 	.word	0x08003185
 8003064:	08003185 	.word	0x08003185
 8003068:	08003185 	.word	0x08003185
 800306c:	08003103 	.word	0x08003103
 8003070:	08003185 	.word	0x08003185
 8003074:	08003185 	.word	0x08003185
 8003078:	08003185 	.word	0x08003185
 800307c:	08003143 	.word	0x08003143
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	4618      	mov	r0, r3
 8003088:	f000 f9d0 	bl	800342c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0208 	orr.w	r2, r2, #8
 800309a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0204 	bic.w	r2, r2, #4
 80030aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6999      	ldr	r1, [r3, #24]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	619a      	str	r2, [r3, #24]
      break;
 80030be:	e062      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fa16 	bl	80034f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6999      	ldr	r1, [r3, #24]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	021a      	lsls	r2, r3, #8
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	619a      	str	r2, [r3, #24]
      break;
 8003100:	e041      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fa5f 	bl	80035cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0208 	orr.w	r2, r2, #8
 800311c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69da      	ldr	r2, [r3, #28]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0204 	bic.w	r2, r2, #4
 800312c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69d9      	ldr	r1, [r3, #28]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	61da      	str	r2, [r3, #28]
      break;
 8003140:	e021      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	4618      	mov	r0, r3
 800314a:	f000 faa9 	bl	80036a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800315c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69da      	ldr	r2, [r3, #28]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800316c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69d9      	ldr	r1, [r3, #28]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	021a      	lsls	r2, r3, #8
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	61da      	str	r2, [r3, #28]
      break;
 8003182:	e000      	b.n	8003186 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003184:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_TIM_ConfigClockSource+0x18>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e0b3      	b.n	8003318 <HAL_TIM_ConfigClockSource+0x180>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e8:	d03e      	beq.n	8003268 <HAL_TIM_ConfigClockSource+0xd0>
 80031ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ee:	f200 8087 	bhi.w	8003300 <HAL_TIM_ConfigClockSource+0x168>
 80031f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f6:	f000 8085 	beq.w	8003304 <HAL_TIM_ConfigClockSource+0x16c>
 80031fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fe:	d87f      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x168>
 8003200:	2b70      	cmp	r3, #112	; 0x70
 8003202:	d01a      	beq.n	800323a <HAL_TIM_ConfigClockSource+0xa2>
 8003204:	2b70      	cmp	r3, #112	; 0x70
 8003206:	d87b      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x168>
 8003208:	2b60      	cmp	r3, #96	; 0x60
 800320a:	d050      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0x116>
 800320c:	2b60      	cmp	r3, #96	; 0x60
 800320e:	d877      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x168>
 8003210:	2b50      	cmp	r3, #80	; 0x50
 8003212:	d03c      	beq.n	800328e <HAL_TIM_ConfigClockSource+0xf6>
 8003214:	2b50      	cmp	r3, #80	; 0x50
 8003216:	d873      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x168>
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	d058      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x136>
 800321c:	2b40      	cmp	r3, #64	; 0x40
 800321e:	d86f      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x168>
 8003220:	2b30      	cmp	r3, #48	; 0x30
 8003222:	d064      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x156>
 8003224:	2b30      	cmp	r3, #48	; 0x30
 8003226:	d86b      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x168>
 8003228:	2b20      	cmp	r3, #32
 800322a:	d060      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x156>
 800322c:	2b20      	cmp	r3, #32
 800322e:	d867      	bhi.n	8003300 <HAL_TIM_ConfigClockSource+0x168>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d05c      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x156>
 8003234:	2b10      	cmp	r3, #16
 8003236:	d05a      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003238:	e062      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6899      	ldr	r1, [r3, #8]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f000 faee 	bl	800382a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800325c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	609a      	str	r2, [r3, #8]
      break;
 8003266:	e04e      	b.n	8003306 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	6899      	ldr	r1, [r3, #8]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f000 fad7 	bl	800382a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800328a:	609a      	str	r2, [r3, #8]
      break;
 800328c:	e03b      	b.n	8003306 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6859      	ldr	r1, [r3, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	461a      	mov	r2, r3
 800329c:	f000 fa4e 	bl	800373c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2150      	movs	r1, #80	; 0x50
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 faa5 	bl	80037f6 <TIM_ITRx_SetConfig>
      break;
 80032ac:	e02b      	b.n	8003306 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6859      	ldr	r1, [r3, #4]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	461a      	mov	r2, r3
 80032bc:	f000 fa6c 	bl	8003798 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2160      	movs	r1, #96	; 0x60
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fa95 	bl	80037f6 <TIM_ITRx_SetConfig>
      break;
 80032cc:	e01b      	b.n	8003306 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6859      	ldr	r1, [r3, #4]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	461a      	mov	r2, r3
 80032dc:	f000 fa2e 	bl	800373c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2140      	movs	r1, #64	; 0x40
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fa85 	bl	80037f6 <TIM_ITRx_SetConfig>
      break;
 80032ec:	e00b      	b.n	8003306 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4619      	mov	r1, r3
 80032f8:	4610      	mov	r0, r2
 80032fa:	f000 fa7c 	bl	80037f6 <TIM_ITRx_SetConfig>
        break;
 80032fe:	e002      	b.n	8003306 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003300:	bf00      	nop
 8003302:	e000      	b.n	8003306 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003304:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr

08003332 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr

08003368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a29      	ldr	r2, [pc, #164]	; (8003420 <TIM_Base_SetConfig+0xb8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00b      	beq.n	8003398 <TIM_Base_SetConfig+0x30>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003386:	d007      	beq.n	8003398 <TIM_Base_SetConfig+0x30>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a26      	ldr	r2, [pc, #152]	; (8003424 <TIM_Base_SetConfig+0xbc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <TIM_Base_SetConfig+0x30>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a25      	ldr	r2, [pc, #148]	; (8003428 <TIM_Base_SetConfig+0xc0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d108      	bne.n	80033aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a1c      	ldr	r2, [pc, #112]	; (8003420 <TIM_Base_SetConfig+0xb8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00b      	beq.n	80033ca <TIM_Base_SetConfig+0x62>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b8:	d007      	beq.n	80033ca <TIM_Base_SetConfig+0x62>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a19      	ldr	r2, [pc, #100]	; (8003424 <TIM_Base_SetConfig+0xbc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d003      	beq.n	80033ca <TIM_Base_SetConfig+0x62>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a18      	ldr	r2, [pc, #96]	; (8003428 <TIM_Base_SetConfig+0xc0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d108      	bne.n	80033dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a07      	ldr	r2, [pc, #28]	; (8003420 <TIM_Base_SetConfig+0xb8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d103      	bne.n	8003410 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	615a      	str	r2, [r3, #20]
}
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr
 8003420:	40012c00 	.word	0x40012c00
 8003424:	40000400 	.word	0x40000400
 8003428:	40000800 	.word	0x40000800

0800342c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f023 0201 	bic.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0303 	bic.w	r3, r3, #3
 8003462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f023 0302 	bic.w	r3, r3, #2
 8003474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a1c      	ldr	r2, [pc, #112]	; (80034f4 <TIM_OC1_SetConfig+0xc8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d10c      	bne.n	80034a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f023 0308 	bic.w	r3, r3, #8
 800348e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f023 0304 	bic.w	r3, r3, #4
 80034a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a13      	ldr	r2, [pc, #76]	; (80034f4 <TIM_OC1_SetConfig+0xc8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d111      	bne.n	80034ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	621a      	str	r2, [r3, #32]
}
 80034e8:	bf00      	nop
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40012c00 	.word	0x40012c00

080034f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f023 0210 	bic.w	r2, r3, #16
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f023 0320 	bic.w	r3, r3, #32
 8003542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a1d      	ldr	r2, [pc, #116]	; (80035c8 <TIM_OC2_SetConfig+0xd0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d10d      	bne.n	8003574 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003572:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <TIM_OC2_SetConfig+0xd0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d113      	bne.n	80035a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003582:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800358a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr
 80035c8:	40012c00 	.word	0x40012c00

080035cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0303 	bic.w	r3, r3, #3
 8003602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	021b      	lsls	r3, r3, #8
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a1d      	ldr	r2, [pc, #116]	; (800369c <TIM_OC3_SetConfig+0xd0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d10d      	bne.n	8003646 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a14      	ldr	r2, [pc, #80]	; (800369c <TIM_OC3_SetConfig+0xd0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d113      	bne.n	8003676 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800365c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	621a      	str	r2, [r3, #32]
}
 8003690:	bf00      	nop
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40012c00 	.word	0x40012c00

080036a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	031b      	lsls	r3, r3, #12
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a0f      	ldr	r2, [pc, #60]	; (8003738 <TIM_OC4_SetConfig+0x98>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d109      	bne.n	8003714 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	019b      	lsls	r3, r3, #6
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	621a      	str	r2, [r3, #32]
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr
 8003738:	40012c00 	.word	0x40012c00

0800373c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	f023 0201 	bic.w	r2, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f023 030a 	bic.w	r3, r3, #10
 8003778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	621a      	str	r2, [r3, #32]
}
 800378e:	bf00      	nop
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	f023 0210 	bic.w	r2, r3, #16
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	031b      	lsls	r3, r3, #12
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	621a      	str	r2, [r3, #32]
}
 80037ec:	bf00      	nop
 80037ee:	371c      	adds	r7, #28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr

080037f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b085      	sub	sp, #20
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	f043 0307 	orr.w	r3, r3, #7
 8003818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	609a      	str	r2, [r3, #8]
}
 8003820:	bf00      	nop
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr

0800382a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800382a:	b480      	push	{r7}
 800382c:	b087      	sub	sp, #28
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003844:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	021a      	lsls	r2, r3, #8
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	431a      	orrs	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	4313      	orrs	r3, r2
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	609a      	str	r2, [r3, #8]
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f003 031f 	and.w	r3, r3, #31
 800387a:	2201      	movs	r2, #1
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a1a      	ldr	r2, [r3, #32]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	43db      	mvns	r3, r3
 800388a:	401a      	ands	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a1a      	ldr	r2, [r3, #32]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	fa01 f303 	lsl.w	r3, r1, r3
 80038a0:	431a      	orrs	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	621a      	str	r2, [r3, #32]
}
 80038a6:	bf00      	nop
 80038a8:	371c      	adds	r7, #28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e046      	b.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a16      	ldr	r2, [pc, #88]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00e      	beq.n	800392a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003914:	d009      	beq.n	800392a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a12      	ldr	r2, [pc, #72]	; (8003964 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d004      	beq.n	800392a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a10      	ldr	r2, [pc, #64]	; (8003968 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d10c      	bne.n	8003944 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003930:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	4313      	orrs	r3, r2
 800393a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr
 8003960:	40012c00 	.word	0x40012c00
 8003964:	40000400 	.word	0x40000400
 8003968:	40000800 	.word	0x40000800

0800396c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e03f      	b.n	8003a22 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fd ff10 	bl	80017dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2224      	movs	r2, #36	; 0x24
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 fb8d 	bl	80040f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695a      	ldr	r2, [r3, #20]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b085      	sub	sp, #20
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	4613      	mov	r3, r2
 8003a36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d130      	bne.n	8003aa6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_UART_Transmit_IT+0x26>
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e029      	b.n	8003aa8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_UART_Transmit_IT+0x38>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e022      	b.n	8003aa8 <HAL_UART_Transmit_IT+0x7e>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	88fa      	ldrh	r2, [r7, #6]
 8003a74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	88fa      	ldrh	r2, [r7, #6]
 8003a7a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2221      	movs	r2, #33	; 0x21
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aa0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e000      	b.n	8003aa8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003aa6:	2302      	movs	r3, #2
  }
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	; 0x28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10d      	bne.n	8003b06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_UART_IRQHandler+0x52>
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fa4f 	bl	8003fa2 <UART_Receive_IT>
      return;
 8003b04:	e17b      	b.n	8003dfe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80b1 	beq.w	8003c70 <HAL_UART_IRQHandler+0x1bc>
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d105      	bne.n	8003b24 <HAL_UART_IRQHandler+0x70>
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 80a6 	beq.w	8003c70 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_UART_IRQHandler+0x90>
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	f043 0201 	orr.w	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_UART_IRQHandler+0xb0>
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d005      	beq.n	8003b64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	f043 0202 	orr.w	r2, r3, #2
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_UART_IRQHandler+0xd0>
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	f043 0204 	orr.w	r2, r3, #4
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00f      	beq.n	8003bae <HAL_UART_IRQHandler+0xfa>
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d104      	bne.n	8003ba2 <HAL_UART_IRQHandler+0xee>
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f043 0208 	orr.w	r2, r3, #8
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 811e 	beq.w	8003df4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x11e>
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f9e8 	bl	8003fa2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	bf14      	ite	ne
 8003be0:	2301      	movne	r3, #1
 8003be2:	2300      	moveq	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d102      	bne.n	8003bfa <HAL_UART_IRQHandler+0x146>
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d031      	beq.n	8003c5e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f92a 	bl	8003e54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d023      	beq.n	8003c56 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695a      	ldr	r2, [r3, #20]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c1c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d013      	beq.n	8003c4e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2a:	4a76      	ldr	r2, [pc, #472]	; (8003e04 <HAL_UART_IRQHandler+0x350>)
 8003c2c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe f8f2 	bl	8001e1c <HAL_DMA_Abort_IT>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d016      	beq.n	8003c6c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4c:	e00e      	b.n	8003c6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f8ec 	bl	8003e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c54:	e00a      	b.n	8003c6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8e8 	bl	8003e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5c:	e006      	b.n	8003c6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f8e4 	bl	8003e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c6a:	e0c3      	b.n	8003df4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	bf00      	nop
    return;
 8003c6e:	e0c1      	b.n	8003df4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	f040 80a1 	bne.w	8003dbc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 809b 	beq.w	8003dbc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8095 	beq.w	8003dbc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d04e      	beq.n	8003d54 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003cc0:	8a3b      	ldrh	r3, [r7, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 8098 	beq.w	8003df8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ccc:	8a3a      	ldrh	r2, [r7, #16]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	f080 8092 	bcs.w	8003df8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8a3a      	ldrh	r2, [r7, #16]
 8003cd8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	d02b      	beq.n	8003d3c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cf2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695a      	ldr	r2, [r3, #20]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d12:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0210 	bic.w	r2, r2, #16
 8003d30:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe f835 	bl	8001da6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f876 	bl	8003e3e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d52:	e051      	b.n	8003df8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d047      	beq.n	8003dfc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003d6c:	8a7b      	ldrh	r3, [r7, #18]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d044      	beq.n	8003dfc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d80:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0210 	bic.w	r2, r2, #16
 8003dae:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003db0:	8a7b      	ldrh	r3, [r7, #18]
 8003db2:	4619      	mov	r1, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f842 	bl	8003e3e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003dba:	e01f      	b.n	8003dfc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x324>
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f87f 	bl	8003ed4 <UART_Transmit_IT>
    return;
 8003dd6:	e012      	b.n	8003dfe <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00d      	beq.n	8003dfe <HAL_UART_IRQHandler+0x34a>
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f8c0 	bl	8003f72 <UART_EndTransmit_IT>
    return;
 8003df2:	e004      	b.n	8003dfe <HAL_UART_IRQHandler+0x34a>
    return;
 8003df4:	bf00      	nop
 8003df6:	e002      	b.n	8003dfe <HAL_UART_IRQHandler+0x34a>
      return;
 8003df8:	bf00      	nop
 8003dfa:	e000      	b.n	8003dfe <HAL_UART_IRQHandler+0x34a>
      return;
 8003dfc:	bf00      	nop
  }
}
 8003dfe:	3728      	adds	r7, #40	; 0x28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	08003ead 	.word	0x08003ead

08003e08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr

08003e1a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr

08003e3e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	460b      	mov	r3, r1
 8003e48:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr

08003e54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695a      	ldr	r2, [r3, #20]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0201 	bic.w	r2, r2, #1
 8003e7a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d107      	bne.n	8003e94 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0210 	bic.w	r2, r2, #16
 8003e92:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr

08003eac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f7ff ffb0 	bl	8003e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b21      	cmp	r3, #33	; 0x21
 8003ee6:	d13e      	bne.n	8003f66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef0:	d114      	bne.n	8003f1c <UART_Transmit_IT+0x48>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d110      	bne.n	8003f1c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	1c9a      	adds	r2, r3, #2
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	621a      	str	r2, [r3, #32]
 8003f1a:	e008      	b.n	8003f2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	1c59      	adds	r1, r3, #1
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6211      	str	r1, [r2, #32]
 8003f26:	781a      	ldrb	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10f      	bne.n	8003f62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e000      	b.n	8003f68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
  }
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr

08003f72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff ff38 	bl	8003e08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b086      	sub	sp, #24
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b22      	cmp	r3, #34	; 0x22
 8003fb4:	f040 8099 	bne.w	80040ea <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc0:	d117      	bne.n	8003ff2 <UART_Receive_IT+0x50>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d113      	bne.n	8003ff2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fea:	1c9a      	adds	r2, r3, #2
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	629a      	str	r2, [r3, #40]	; 0x28
 8003ff0:	e026      	b.n	8004040 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004004:	d007      	beq.n	8004016 <UART_Receive_IT+0x74>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <UART_Receive_IT+0x82>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	b2da      	uxtb	r2, r3
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	701a      	strb	r2, [r3, #0]
 8004022:	e008      	b.n	8004036 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004030:	b2da      	uxtb	r2, r3
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29b      	uxth	r3, r3
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	4619      	mov	r1, r3
 800404e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004050:	2b00      	cmp	r3, #0
 8004052:	d148      	bne.n	80040e6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0220 	bic.w	r2, r2, #32
 8004062:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004072:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0201 	bic.w	r2, r2, #1
 8004082:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	2b01      	cmp	r3, #1
 8004092:	d123      	bne.n	80040dc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0210 	bic.w	r2, r2, #16
 80040a8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d10a      	bne.n	80040ce <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040d2:	4619      	mov	r1, r3
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff feb2 	bl	8003e3e <HAL_UARTEx_RxEventCallback>
 80040da:	e002      	b.n	80040e2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff fe9c 	bl	8003e1a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	e002      	b.n	80040ec <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	e000      	b.n	80040ec <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80040ea:	2302      	movs	r3, #2
  }
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800412e:	f023 030c 	bic.w	r3, r3, #12
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	68b9      	ldr	r1, [r7, #8]
 8004138:	430b      	orrs	r3, r1
 800413a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a2c      	ldr	r2, [pc, #176]	; (8004208 <UART_SetConfig+0x114>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d103      	bne.n	8004164 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800415c:	f7fe fc88 	bl	8002a70 <HAL_RCC_GetPCLK2Freq>
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	e002      	b.n	800416a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004164:	f7fe fc70 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8004168:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	009a      	lsls	r2, r3, #2
 8004174:	441a      	add	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	4a22      	ldr	r2, [pc, #136]	; (800420c <UART_SetConfig+0x118>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	0119      	lsls	r1, r3, #4
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009a      	lsls	r2, r3, #2
 8004194:	441a      	add	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a0:	4b1a      	ldr	r3, [pc, #104]	; (800420c <UART_SetConfig+0x118>)
 80041a2:	fba3 0302 	umull	r0, r3, r3, r2
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	2064      	movs	r0, #100	; 0x64
 80041aa:	fb00 f303 	mul.w	r3, r0, r3
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	3332      	adds	r3, #50	; 0x32
 80041b4:	4a15      	ldr	r2, [pc, #84]	; (800420c <UART_SetConfig+0x118>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c0:	4419      	add	r1, r3
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009a      	lsls	r2, r3, #2
 80041cc:	441a      	add	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041d8:	4b0c      	ldr	r3, [pc, #48]	; (800420c <UART_SetConfig+0x118>)
 80041da:	fba3 0302 	umull	r0, r3, r3, r2
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	2064      	movs	r0, #100	; 0x64
 80041e2:	fb00 f303 	mul.w	r3, r0, r3
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	3332      	adds	r3, #50	; 0x32
 80041ec:	4a07      	ldr	r2, [pc, #28]	; (800420c <UART_SetConfig+0x118>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	f003 020f 	and.w	r2, r3, #15
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	440a      	add	r2, r1
 80041fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004200:	bf00      	nop
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40013800 	.word	0x40013800
 800420c:	51eb851f 	.word	0x51eb851f

08004210 <__errno>:
 8004210:	4b01      	ldr	r3, [pc, #4]	; (8004218 <__errno+0x8>)
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	20000028 	.word	0x20000028

0800421c <__libc_init_array>:
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	2600      	movs	r6, #0
 8004220:	4d0c      	ldr	r5, [pc, #48]	; (8004254 <__libc_init_array+0x38>)
 8004222:	4c0d      	ldr	r4, [pc, #52]	; (8004258 <__libc_init_array+0x3c>)
 8004224:	1b64      	subs	r4, r4, r5
 8004226:	10a4      	asrs	r4, r4, #2
 8004228:	42a6      	cmp	r6, r4
 800422a:	d109      	bne.n	8004240 <__libc_init_array+0x24>
 800422c:	f000 fc5c 	bl	8004ae8 <_init>
 8004230:	2600      	movs	r6, #0
 8004232:	4d0a      	ldr	r5, [pc, #40]	; (800425c <__libc_init_array+0x40>)
 8004234:	4c0a      	ldr	r4, [pc, #40]	; (8004260 <__libc_init_array+0x44>)
 8004236:	1b64      	subs	r4, r4, r5
 8004238:	10a4      	asrs	r4, r4, #2
 800423a:	42a6      	cmp	r6, r4
 800423c:	d105      	bne.n	800424a <__libc_init_array+0x2e>
 800423e:	bd70      	pop	{r4, r5, r6, pc}
 8004240:	f855 3b04 	ldr.w	r3, [r5], #4
 8004244:	4798      	blx	r3
 8004246:	3601      	adds	r6, #1
 8004248:	e7ee      	b.n	8004228 <__libc_init_array+0xc>
 800424a:	f855 3b04 	ldr.w	r3, [r5], #4
 800424e:	4798      	blx	r3
 8004250:	3601      	adds	r6, #1
 8004252:	e7f2      	b.n	800423a <__libc_init_array+0x1e>
 8004254:	08004b6c 	.word	0x08004b6c
 8004258:	08004b6c 	.word	0x08004b6c
 800425c:	08004b6c 	.word	0x08004b6c
 8004260:	08004b70 	.word	0x08004b70

08004264 <memset>:
 8004264:	4603      	mov	r3, r0
 8004266:	4402      	add	r2, r0
 8004268:	4293      	cmp	r3, r2
 800426a:	d100      	bne.n	800426e <memset+0xa>
 800426c:	4770      	bx	lr
 800426e:	f803 1b01 	strb.w	r1, [r3], #1
 8004272:	e7f9      	b.n	8004268 <memset+0x4>

08004274 <siprintf>:
 8004274:	b40e      	push	{r1, r2, r3}
 8004276:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800427a:	b500      	push	{lr}
 800427c:	b09c      	sub	sp, #112	; 0x70
 800427e:	ab1d      	add	r3, sp, #116	; 0x74
 8004280:	9002      	str	r0, [sp, #8]
 8004282:	9006      	str	r0, [sp, #24]
 8004284:	9107      	str	r1, [sp, #28]
 8004286:	9104      	str	r1, [sp, #16]
 8004288:	4808      	ldr	r0, [pc, #32]	; (80042ac <siprintf+0x38>)
 800428a:	4909      	ldr	r1, [pc, #36]	; (80042b0 <siprintf+0x3c>)
 800428c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004290:	9105      	str	r1, [sp, #20]
 8004292:	6800      	ldr	r0, [r0, #0]
 8004294:	a902      	add	r1, sp, #8
 8004296:	9301      	str	r3, [sp, #4]
 8004298:	f000 f868 	bl	800436c <_svfiprintf_r>
 800429c:	2200      	movs	r2, #0
 800429e:	9b02      	ldr	r3, [sp, #8]
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	b01c      	add	sp, #112	; 0x70
 80042a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80042a8:	b003      	add	sp, #12
 80042aa:	4770      	bx	lr
 80042ac:	20000028 	.word	0x20000028
 80042b0:	ffff0208 	.word	0xffff0208

080042b4 <__ssputs_r>:
 80042b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b8:	688e      	ldr	r6, [r1, #8]
 80042ba:	4682      	mov	sl, r0
 80042bc:	429e      	cmp	r6, r3
 80042be:	460c      	mov	r4, r1
 80042c0:	4690      	mov	r8, r2
 80042c2:	461f      	mov	r7, r3
 80042c4:	d838      	bhi.n	8004338 <__ssputs_r+0x84>
 80042c6:	898a      	ldrh	r2, [r1, #12]
 80042c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042cc:	d032      	beq.n	8004334 <__ssputs_r+0x80>
 80042ce:	6825      	ldr	r5, [r4, #0]
 80042d0:	6909      	ldr	r1, [r1, #16]
 80042d2:	3301      	adds	r3, #1
 80042d4:	eba5 0901 	sub.w	r9, r5, r1
 80042d8:	6965      	ldr	r5, [r4, #20]
 80042da:	444b      	add	r3, r9
 80042dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042e4:	106d      	asrs	r5, r5, #1
 80042e6:	429d      	cmp	r5, r3
 80042e8:	bf38      	it	cc
 80042ea:	461d      	movcc	r5, r3
 80042ec:	0553      	lsls	r3, r2, #21
 80042ee:	d531      	bpl.n	8004354 <__ssputs_r+0xa0>
 80042f0:	4629      	mov	r1, r5
 80042f2:	f000 fb53 	bl	800499c <_malloc_r>
 80042f6:	4606      	mov	r6, r0
 80042f8:	b950      	cbnz	r0, 8004310 <__ssputs_r+0x5c>
 80042fa:	230c      	movs	r3, #12
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004300:	f8ca 3000 	str.w	r3, [sl]
 8004304:	89a3      	ldrh	r3, [r4, #12]
 8004306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004310:	464a      	mov	r2, r9
 8004312:	6921      	ldr	r1, [r4, #16]
 8004314:	f000 face 	bl	80048b4 <memcpy>
 8004318:	89a3      	ldrh	r3, [r4, #12]
 800431a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800431e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004322:	81a3      	strh	r3, [r4, #12]
 8004324:	6126      	str	r6, [r4, #16]
 8004326:	444e      	add	r6, r9
 8004328:	6026      	str	r6, [r4, #0]
 800432a:	463e      	mov	r6, r7
 800432c:	6165      	str	r5, [r4, #20]
 800432e:	eba5 0509 	sub.w	r5, r5, r9
 8004332:	60a5      	str	r5, [r4, #8]
 8004334:	42be      	cmp	r6, r7
 8004336:	d900      	bls.n	800433a <__ssputs_r+0x86>
 8004338:	463e      	mov	r6, r7
 800433a:	4632      	mov	r2, r6
 800433c:	4641      	mov	r1, r8
 800433e:	6820      	ldr	r0, [r4, #0]
 8004340:	f000 fac6 	bl	80048d0 <memmove>
 8004344:	68a3      	ldr	r3, [r4, #8]
 8004346:	6822      	ldr	r2, [r4, #0]
 8004348:	1b9b      	subs	r3, r3, r6
 800434a:	4432      	add	r2, r6
 800434c:	2000      	movs	r0, #0
 800434e:	60a3      	str	r3, [r4, #8]
 8004350:	6022      	str	r2, [r4, #0]
 8004352:	e7db      	b.n	800430c <__ssputs_r+0x58>
 8004354:	462a      	mov	r2, r5
 8004356:	f000 fb7b 	bl	8004a50 <_realloc_r>
 800435a:	4606      	mov	r6, r0
 800435c:	2800      	cmp	r0, #0
 800435e:	d1e1      	bne.n	8004324 <__ssputs_r+0x70>
 8004360:	4650      	mov	r0, sl
 8004362:	6921      	ldr	r1, [r4, #16]
 8004364:	f000 face 	bl	8004904 <_free_r>
 8004368:	e7c7      	b.n	80042fa <__ssputs_r+0x46>
	...

0800436c <_svfiprintf_r>:
 800436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004370:	4698      	mov	r8, r3
 8004372:	898b      	ldrh	r3, [r1, #12]
 8004374:	4607      	mov	r7, r0
 8004376:	061b      	lsls	r3, r3, #24
 8004378:	460d      	mov	r5, r1
 800437a:	4614      	mov	r4, r2
 800437c:	b09d      	sub	sp, #116	; 0x74
 800437e:	d50e      	bpl.n	800439e <_svfiprintf_r+0x32>
 8004380:	690b      	ldr	r3, [r1, #16]
 8004382:	b963      	cbnz	r3, 800439e <_svfiprintf_r+0x32>
 8004384:	2140      	movs	r1, #64	; 0x40
 8004386:	f000 fb09 	bl	800499c <_malloc_r>
 800438a:	6028      	str	r0, [r5, #0]
 800438c:	6128      	str	r0, [r5, #16]
 800438e:	b920      	cbnz	r0, 800439a <_svfiprintf_r+0x2e>
 8004390:	230c      	movs	r3, #12
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	f04f 30ff 	mov.w	r0, #4294967295
 8004398:	e0d1      	b.n	800453e <_svfiprintf_r+0x1d2>
 800439a:	2340      	movs	r3, #64	; 0x40
 800439c:	616b      	str	r3, [r5, #20]
 800439e:	2300      	movs	r3, #0
 80043a0:	9309      	str	r3, [sp, #36]	; 0x24
 80043a2:	2320      	movs	r3, #32
 80043a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043a8:	2330      	movs	r3, #48	; 0x30
 80043aa:	f04f 0901 	mov.w	r9, #1
 80043ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80043b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004558 <_svfiprintf_r+0x1ec>
 80043b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043ba:	4623      	mov	r3, r4
 80043bc:	469a      	mov	sl, r3
 80043be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043c2:	b10a      	cbz	r2, 80043c8 <_svfiprintf_r+0x5c>
 80043c4:	2a25      	cmp	r2, #37	; 0x25
 80043c6:	d1f9      	bne.n	80043bc <_svfiprintf_r+0x50>
 80043c8:	ebba 0b04 	subs.w	fp, sl, r4
 80043cc:	d00b      	beq.n	80043e6 <_svfiprintf_r+0x7a>
 80043ce:	465b      	mov	r3, fp
 80043d0:	4622      	mov	r2, r4
 80043d2:	4629      	mov	r1, r5
 80043d4:	4638      	mov	r0, r7
 80043d6:	f7ff ff6d 	bl	80042b4 <__ssputs_r>
 80043da:	3001      	adds	r0, #1
 80043dc:	f000 80aa 	beq.w	8004534 <_svfiprintf_r+0x1c8>
 80043e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043e2:	445a      	add	r2, fp
 80043e4:	9209      	str	r2, [sp, #36]	; 0x24
 80043e6:	f89a 3000 	ldrb.w	r3, [sl]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 80a2 	beq.w	8004534 <_svfiprintf_r+0x1c8>
 80043f0:	2300      	movs	r3, #0
 80043f2:	f04f 32ff 	mov.w	r2, #4294967295
 80043f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043fa:	f10a 0a01 	add.w	sl, sl, #1
 80043fe:	9304      	str	r3, [sp, #16]
 8004400:	9307      	str	r3, [sp, #28]
 8004402:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004406:	931a      	str	r3, [sp, #104]	; 0x68
 8004408:	4654      	mov	r4, sl
 800440a:	2205      	movs	r2, #5
 800440c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004410:	4851      	ldr	r0, [pc, #324]	; (8004558 <_svfiprintf_r+0x1ec>)
 8004412:	f000 fa41 	bl	8004898 <memchr>
 8004416:	9a04      	ldr	r2, [sp, #16]
 8004418:	b9d8      	cbnz	r0, 8004452 <_svfiprintf_r+0xe6>
 800441a:	06d0      	lsls	r0, r2, #27
 800441c:	bf44      	itt	mi
 800441e:	2320      	movmi	r3, #32
 8004420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004424:	0711      	lsls	r1, r2, #28
 8004426:	bf44      	itt	mi
 8004428:	232b      	movmi	r3, #43	; 0x2b
 800442a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800442e:	f89a 3000 	ldrb.w	r3, [sl]
 8004432:	2b2a      	cmp	r3, #42	; 0x2a
 8004434:	d015      	beq.n	8004462 <_svfiprintf_r+0xf6>
 8004436:	4654      	mov	r4, sl
 8004438:	2000      	movs	r0, #0
 800443a:	f04f 0c0a 	mov.w	ip, #10
 800443e:	9a07      	ldr	r2, [sp, #28]
 8004440:	4621      	mov	r1, r4
 8004442:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004446:	3b30      	subs	r3, #48	; 0x30
 8004448:	2b09      	cmp	r3, #9
 800444a:	d94e      	bls.n	80044ea <_svfiprintf_r+0x17e>
 800444c:	b1b0      	cbz	r0, 800447c <_svfiprintf_r+0x110>
 800444e:	9207      	str	r2, [sp, #28]
 8004450:	e014      	b.n	800447c <_svfiprintf_r+0x110>
 8004452:	eba0 0308 	sub.w	r3, r0, r8
 8004456:	fa09 f303 	lsl.w	r3, r9, r3
 800445a:	4313      	orrs	r3, r2
 800445c:	46a2      	mov	sl, r4
 800445e:	9304      	str	r3, [sp, #16]
 8004460:	e7d2      	b.n	8004408 <_svfiprintf_r+0x9c>
 8004462:	9b03      	ldr	r3, [sp, #12]
 8004464:	1d19      	adds	r1, r3, #4
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	9103      	str	r1, [sp, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	bfbb      	ittet	lt
 800446e:	425b      	neglt	r3, r3
 8004470:	f042 0202 	orrlt.w	r2, r2, #2
 8004474:	9307      	strge	r3, [sp, #28]
 8004476:	9307      	strlt	r3, [sp, #28]
 8004478:	bfb8      	it	lt
 800447a:	9204      	strlt	r2, [sp, #16]
 800447c:	7823      	ldrb	r3, [r4, #0]
 800447e:	2b2e      	cmp	r3, #46	; 0x2e
 8004480:	d10c      	bne.n	800449c <_svfiprintf_r+0x130>
 8004482:	7863      	ldrb	r3, [r4, #1]
 8004484:	2b2a      	cmp	r3, #42	; 0x2a
 8004486:	d135      	bne.n	80044f4 <_svfiprintf_r+0x188>
 8004488:	9b03      	ldr	r3, [sp, #12]
 800448a:	3402      	adds	r4, #2
 800448c:	1d1a      	adds	r2, r3, #4
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	9203      	str	r2, [sp, #12]
 8004492:	2b00      	cmp	r3, #0
 8004494:	bfb8      	it	lt
 8004496:	f04f 33ff 	movlt.w	r3, #4294967295
 800449a:	9305      	str	r3, [sp, #20]
 800449c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004568 <_svfiprintf_r+0x1fc>
 80044a0:	2203      	movs	r2, #3
 80044a2:	4650      	mov	r0, sl
 80044a4:	7821      	ldrb	r1, [r4, #0]
 80044a6:	f000 f9f7 	bl	8004898 <memchr>
 80044aa:	b140      	cbz	r0, 80044be <_svfiprintf_r+0x152>
 80044ac:	2340      	movs	r3, #64	; 0x40
 80044ae:	eba0 000a 	sub.w	r0, r0, sl
 80044b2:	fa03 f000 	lsl.w	r0, r3, r0
 80044b6:	9b04      	ldr	r3, [sp, #16]
 80044b8:	3401      	adds	r4, #1
 80044ba:	4303      	orrs	r3, r0
 80044bc:	9304      	str	r3, [sp, #16]
 80044be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044c2:	2206      	movs	r2, #6
 80044c4:	4825      	ldr	r0, [pc, #148]	; (800455c <_svfiprintf_r+0x1f0>)
 80044c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044ca:	f000 f9e5 	bl	8004898 <memchr>
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d038      	beq.n	8004544 <_svfiprintf_r+0x1d8>
 80044d2:	4b23      	ldr	r3, [pc, #140]	; (8004560 <_svfiprintf_r+0x1f4>)
 80044d4:	bb1b      	cbnz	r3, 800451e <_svfiprintf_r+0x1b2>
 80044d6:	9b03      	ldr	r3, [sp, #12]
 80044d8:	3307      	adds	r3, #7
 80044da:	f023 0307 	bic.w	r3, r3, #7
 80044de:	3308      	adds	r3, #8
 80044e0:	9303      	str	r3, [sp, #12]
 80044e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044e4:	4433      	add	r3, r6
 80044e6:	9309      	str	r3, [sp, #36]	; 0x24
 80044e8:	e767      	b.n	80043ba <_svfiprintf_r+0x4e>
 80044ea:	460c      	mov	r4, r1
 80044ec:	2001      	movs	r0, #1
 80044ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80044f2:	e7a5      	b.n	8004440 <_svfiprintf_r+0xd4>
 80044f4:	2300      	movs	r3, #0
 80044f6:	f04f 0c0a 	mov.w	ip, #10
 80044fa:	4619      	mov	r1, r3
 80044fc:	3401      	adds	r4, #1
 80044fe:	9305      	str	r3, [sp, #20]
 8004500:	4620      	mov	r0, r4
 8004502:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004506:	3a30      	subs	r2, #48	; 0x30
 8004508:	2a09      	cmp	r2, #9
 800450a:	d903      	bls.n	8004514 <_svfiprintf_r+0x1a8>
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0c5      	beq.n	800449c <_svfiprintf_r+0x130>
 8004510:	9105      	str	r1, [sp, #20]
 8004512:	e7c3      	b.n	800449c <_svfiprintf_r+0x130>
 8004514:	4604      	mov	r4, r0
 8004516:	2301      	movs	r3, #1
 8004518:	fb0c 2101 	mla	r1, ip, r1, r2
 800451c:	e7f0      	b.n	8004500 <_svfiprintf_r+0x194>
 800451e:	ab03      	add	r3, sp, #12
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	462a      	mov	r2, r5
 8004524:	4638      	mov	r0, r7
 8004526:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <_svfiprintf_r+0x1f8>)
 8004528:	a904      	add	r1, sp, #16
 800452a:	f3af 8000 	nop.w
 800452e:	1c42      	adds	r2, r0, #1
 8004530:	4606      	mov	r6, r0
 8004532:	d1d6      	bne.n	80044e2 <_svfiprintf_r+0x176>
 8004534:	89ab      	ldrh	r3, [r5, #12]
 8004536:	065b      	lsls	r3, r3, #25
 8004538:	f53f af2c 	bmi.w	8004394 <_svfiprintf_r+0x28>
 800453c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800453e:	b01d      	add	sp, #116	; 0x74
 8004540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004544:	ab03      	add	r3, sp, #12
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	462a      	mov	r2, r5
 800454a:	4638      	mov	r0, r7
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <_svfiprintf_r+0x1f8>)
 800454e:	a904      	add	r1, sp, #16
 8004550:	f000 f87c 	bl	800464c <_printf_i>
 8004554:	e7eb      	b.n	800452e <_svfiprintf_r+0x1c2>
 8004556:	bf00      	nop
 8004558:	08004b38 	.word	0x08004b38
 800455c:	08004b42 	.word	0x08004b42
 8004560:	00000000 	.word	0x00000000
 8004564:	080042b5 	.word	0x080042b5
 8004568:	08004b3e 	.word	0x08004b3e

0800456c <_printf_common>:
 800456c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004570:	4616      	mov	r6, r2
 8004572:	4699      	mov	r9, r3
 8004574:	688a      	ldr	r2, [r1, #8]
 8004576:	690b      	ldr	r3, [r1, #16]
 8004578:	4607      	mov	r7, r0
 800457a:	4293      	cmp	r3, r2
 800457c:	bfb8      	it	lt
 800457e:	4613      	movlt	r3, r2
 8004580:	6033      	str	r3, [r6, #0]
 8004582:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004586:	460c      	mov	r4, r1
 8004588:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800458c:	b10a      	cbz	r2, 8004592 <_printf_common+0x26>
 800458e:	3301      	adds	r3, #1
 8004590:	6033      	str	r3, [r6, #0]
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	0699      	lsls	r1, r3, #26
 8004596:	bf42      	ittt	mi
 8004598:	6833      	ldrmi	r3, [r6, #0]
 800459a:	3302      	addmi	r3, #2
 800459c:	6033      	strmi	r3, [r6, #0]
 800459e:	6825      	ldr	r5, [r4, #0]
 80045a0:	f015 0506 	ands.w	r5, r5, #6
 80045a4:	d106      	bne.n	80045b4 <_printf_common+0x48>
 80045a6:	f104 0a19 	add.w	sl, r4, #25
 80045aa:	68e3      	ldr	r3, [r4, #12]
 80045ac:	6832      	ldr	r2, [r6, #0]
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	42ab      	cmp	r3, r5
 80045b2:	dc28      	bgt.n	8004606 <_printf_common+0x9a>
 80045b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045b8:	1e13      	subs	r3, r2, #0
 80045ba:	6822      	ldr	r2, [r4, #0]
 80045bc:	bf18      	it	ne
 80045be:	2301      	movne	r3, #1
 80045c0:	0692      	lsls	r2, r2, #26
 80045c2:	d42d      	bmi.n	8004620 <_printf_common+0xb4>
 80045c4:	4649      	mov	r1, r9
 80045c6:	4638      	mov	r0, r7
 80045c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045cc:	47c0      	blx	r8
 80045ce:	3001      	adds	r0, #1
 80045d0:	d020      	beq.n	8004614 <_printf_common+0xa8>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	68e5      	ldr	r5, [r4, #12]
 80045d6:	f003 0306 	and.w	r3, r3, #6
 80045da:	2b04      	cmp	r3, #4
 80045dc:	bf18      	it	ne
 80045de:	2500      	movne	r5, #0
 80045e0:	6832      	ldr	r2, [r6, #0]
 80045e2:	f04f 0600 	mov.w	r6, #0
 80045e6:	68a3      	ldr	r3, [r4, #8]
 80045e8:	bf08      	it	eq
 80045ea:	1aad      	subeq	r5, r5, r2
 80045ec:	6922      	ldr	r2, [r4, #16]
 80045ee:	bf08      	it	eq
 80045f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045f4:	4293      	cmp	r3, r2
 80045f6:	bfc4      	itt	gt
 80045f8:	1a9b      	subgt	r3, r3, r2
 80045fa:	18ed      	addgt	r5, r5, r3
 80045fc:	341a      	adds	r4, #26
 80045fe:	42b5      	cmp	r5, r6
 8004600:	d11a      	bne.n	8004638 <_printf_common+0xcc>
 8004602:	2000      	movs	r0, #0
 8004604:	e008      	b.n	8004618 <_printf_common+0xac>
 8004606:	2301      	movs	r3, #1
 8004608:	4652      	mov	r2, sl
 800460a:	4649      	mov	r1, r9
 800460c:	4638      	mov	r0, r7
 800460e:	47c0      	blx	r8
 8004610:	3001      	adds	r0, #1
 8004612:	d103      	bne.n	800461c <_printf_common+0xb0>
 8004614:	f04f 30ff 	mov.w	r0, #4294967295
 8004618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800461c:	3501      	adds	r5, #1
 800461e:	e7c4      	b.n	80045aa <_printf_common+0x3e>
 8004620:	2030      	movs	r0, #48	; 0x30
 8004622:	18e1      	adds	r1, r4, r3
 8004624:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800462e:	4422      	add	r2, r4
 8004630:	3302      	adds	r3, #2
 8004632:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004636:	e7c5      	b.n	80045c4 <_printf_common+0x58>
 8004638:	2301      	movs	r3, #1
 800463a:	4622      	mov	r2, r4
 800463c:	4649      	mov	r1, r9
 800463e:	4638      	mov	r0, r7
 8004640:	47c0      	blx	r8
 8004642:	3001      	adds	r0, #1
 8004644:	d0e6      	beq.n	8004614 <_printf_common+0xa8>
 8004646:	3601      	adds	r6, #1
 8004648:	e7d9      	b.n	80045fe <_printf_common+0x92>
	...

0800464c <_printf_i>:
 800464c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004650:	460c      	mov	r4, r1
 8004652:	7e27      	ldrb	r7, [r4, #24]
 8004654:	4691      	mov	r9, r2
 8004656:	2f78      	cmp	r7, #120	; 0x78
 8004658:	4680      	mov	r8, r0
 800465a:	469a      	mov	sl, r3
 800465c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800465e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004662:	d807      	bhi.n	8004674 <_printf_i+0x28>
 8004664:	2f62      	cmp	r7, #98	; 0x62
 8004666:	d80a      	bhi.n	800467e <_printf_i+0x32>
 8004668:	2f00      	cmp	r7, #0
 800466a:	f000 80d9 	beq.w	8004820 <_printf_i+0x1d4>
 800466e:	2f58      	cmp	r7, #88	; 0x58
 8004670:	f000 80a4 	beq.w	80047bc <_printf_i+0x170>
 8004674:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004678:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800467c:	e03a      	b.n	80046f4 <_printf_i+0xa8>
 800467e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004682:	2b15      	cmp	r3, #21
 8004684:	d8f6      	bhi.n	8004674 <_printf_i+0x28>
 8004686:	a001      	add	r0, pc, #4	; (adr r0, 800468c <_printf_i+0x40>)
 8004688:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800468c:	080046e5 	.word	0x080046e5
 8004690:	080046f9 	.word	0x080046f9
 8004694:	08004675 	.word	0x08004675
 8004698:	08004675 	.word	0x08004675
 800469c:	08004675 	.word	0x08004675
 80046a0:	08004675 	.word	0x08004675
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	08004675 	.word	0x08004675
 80046ac:	08004675 	.word	0x08004675
 80046b0:	08004675 	.word	0x08004675
 80046b4:	08004675 	.word	0x08004675
 80046b8:	08004807 	.word	0x08004807
 80046bc:	08004729 	.word	0x08004729
 80046c0:	080047e9 	.word	0x080047e9
 80046c4:	08004675 	.word	0x08004675
 80046c8:	08004675 	.word	0x08004675
 80046cc:	08004829 	.word	0x08004829
 80046d0:	08004675 	.word	0x08004675
 80046d4:	08004729 	.word	0x08004729
 80046d8:	08004675 	.word	0x08004675
 80046dc:	08004675 	.word	0x08004675
 80046e0:	080047f1 	.word	0x080047f1
 80046e4:	680b      	ldr	r3, [r1, #0]
 80046e6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046ea:	1d1a      	adds	r2, r3, #4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	600a      	str	r2, [r1, #0]
 80046f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0a4      	b.n	8004842 <_printf_i+0x1f6>
 80046f8:	6825      	ldr	r5, [r4, #0]
 80046fa:	6808      	ldr	r0, [r1, #0]
 80046fc:	062e      	lsls	r6, r5, #24
 80046fe:	f100 0304 	add.w	r3, r0, #4
 8004702:	d50a      	bpl.n	800471a <_printf_i+0xce>
 8004704:	6805      	ldr	r5, [r0, #0]
 8004706:	600b      	str	r3, [r1, #0]
 8004708:	2d00      	cmp	r5, #0
 800470a:	da03      	bge.n	8004714 <_printf_i+0xc8>
 800470c:	232d      	movs	r3, #45	; 0x2d
 800470e:	426d      	negs	r5, r5
 8004710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004714:	230a      	movs	r3, #10
 8004716:	485e      	ldr	r0, [pc, #376]	; (8004890 <_printf_i+0x244>)
 8004718:	e019      	b.n	800474e <_printf_i+0x102>
 800471a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800471e:	6805      	ldr	r5, [r0, #0]
 8004720:	600b      	str	r3, [r1, #0]
 8004722:	bf18      	it	ne
 8004724:	b22d      	sxthne	r5, r5
 8004726:	e7ef      	b.n	8004708 <_printf_i+0xbc>
 8004728:	680b      	ldr	r3, [r1, #0]
 800472a:	6825      	ldr	r5, [r4, #0]
 800472c:	1d18      	adds	r0, r3, #4
 800472e:	6008      	str	r0, [r1, #0]
 8004730:	0628      	lsls	r0, r5, #24
 8004732:	d501      	bpl.n	8004738 <_printf_i+0xec>
 8004734:	681d      	ldr	r5, [r3, #0]
 8004736:	e002      	b.n	800473e <_printf_i+0xf2>
 8004738:	0669      	lsls	r1, r5, #25
 800473a:	d5fb      	bpl.n	8004734 <_printf_i+0xe8>
 800473c:	881d      	ldrh	r5, [r3, #0]
 800473e:	2f6f      	cmp	r7, #111	; 0x6f
 8004740:	bf0c      	ite	eq
 8004742:	2308      	moveq	r3, #8
 8004744:	230a      	movne	r3, #10
 8004746:	4852      	ldr	r0, [pc, #328]	; (8004890 <_printf_i+0x244>)
 8004748:	2100      	movs	r1, #0
 800474a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800474e:	6866      	ldr	r6, [r4, #4]
 8004750:	2e00      	cmp	r6, #0
 8004752:	bfa8      	it	ge
 8004754:	6821      	ldrge	r1, [r4, #0]
 8004756:	60a6      	str	r6, [r4, #8]
 8004758:	bfa4      	itt	ge
 800475a:	f021 0104 	bicge.w	r1, r1, #4
 800475e:	6021      	strge	r1, [r4, #0]
 8004760:	b90d      	cbnz	r5, 8004766 <_printf_i+0x11a>
 8004762:	2e00      	cmp	r6, #0
 8004764:	d04d      	beq.n	8004802 <_printf_i+0x1b6>
 8004766:	4616      	mov	r6, r2
 8004768:	fbb5 f1f3 	udiv	r1, r5, r3
 800476c:	fb03 5711 	mls	r7, r3, r1, r5
 8004770:	5dc7      	ldrb	r7, [r0, r7]
 8004772:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004776:	462f      	mov	r7, r5
 8004778:	42bb      	cmp	r3, r7
 800477a:	460d      	mov	r5, r1
 800477c:	d9f4      	bls.n	8004768 <_printf_i+0x11c>
 800477e:	2b08      	cmp	r3, #8
 8004780:	d10b      	bne.n	800479a <_printf_i+0x14e>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	07df      	lsls	r7, r3, #31
 8004786:	d508      	bpl.n	800479a <_printf_i+0x14e>
 8004788:	6923      	ldr	r3, [r4, #16]
 800478a:	6861      	ldr	r1, [r4, #4]
 800478c:	4299      	cmp	r1, r3
 800478e:	bfde      	ittt	le
 8004790:	2330      	movle	r3, #48	; 0x30
 8004792:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004796:	f106 36ff 	addle.w	r6, r6, #4294967295
 800479a:	1b92      	subs	r2, r2, r6
 800479c:	6122      	str	r2, [r4, #16]
 800479e:	464b      	mov	r3, r9
 80047a0:	4621      	mov	r1, r4
 80047a2:	4640      	mov	r0, r8
 80047a4:	f8cd a000 	str.w	sl, [sp]
 80047a8:	aa03      	add	r2, sp, #12
 80047aa:	f7ff fedf 	bl	800456c <_printf_common>
 80047ae:	3001      	adds	r0, #1
 80047b0:	d14c      	bne.n	800484c <_printf_i+0x200>
 80047b2:	f04f 30ff 	mov.w	r0, #4294967295
 80047b6:	b004      	add	sp, #16
 80047b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047bc:	4834      	ldr	r0, [pc, #208]	; (8004890 <_printf_i+0x244>)
 80047be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047c2:	680e      	ldr	r6, [r1, #0]
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80047ca:	061f      	lsls	r7, r3, #24
 80047cc:	600e      	str	r6, [r1, #0]
 80047ce:	d514      	bpl.n	80047fa <_printf_i+0x1ae>
 80047d0:	07d9      	lsls	r1, r3, #31
 80047d2:	bf44      	itt	mi
 80047d4:	f043 0320 	orrmi.w	r3, r3, #32
 80047d8:	6023      	strmi	r3, [r4, #0]
 80047da:	b91d      	cbnz	r5, 80047e4 <_printf_i+0x198>
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	f023 0320 	bic.w	r3, r3, #32
 80047e2:	6023      	str	r3, [r4, #0]
 80047e4:	2310      	movs	r3, #16
 80047e6:	e7af      	b.n	8004748 <_printf_i+0xfc>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	f043 0320 	orr.w	r3, r3, #32
 80047ee:	6023      	str	r3, [r4, #0]
 80047f0:	2378      	movs	r3, #120	; 0x78
 80047f2:	4828      	ldr	r0, [pc, #160]	; (8004894 <_printf_i+0x248>)
 80047f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047f8:	e7e3      	b.n	80047c2 <_printf_i+0x176>
 80047fa:	065e      	lsls	r6, r3, #25
 80047fc:	bf48      	it	mi
 80047fe:	b2ad      	uxthmi	r5, r5
 8004800:	e7e6      	b.n	80047d0 <_printf_i+0x184>
 8004802:	4616      	mov	r6, r2
 8004804:	e7bb      	b.n	800477e <_printf_i+0x132>
 8004806:	680b      	ldr	r3, [r1, #0]
 8004808:	6826      	ldr	r6, [r4, #0]
 800480a:	1d1d      	adds	r5, r3, #4
 800480c:	6960      	ldr	r0, [r4, #20]
 800480e:	600d      	str	r5, [r1, #0]
 8004810:	0635      	lsls	r5, r6, #24
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	d501      	bpl.n	800481a <_printf_i+0x1ce>
 8004816:	6018      	str	r0, [r3, #0]
 8004818:	e002      	b.n	8004820 <_printf_i+0x1d4>
 800481a:	0671      	lsls	r1, r6, #25
 800481c:	d5fb      	bpl.n	8004816 <_printf_i+0x1ca>
 800481e:	8018      	strh	r0, [r3, #0]
 8004820:	2300      	movs	r3, #0
 8004822:	4616      	mov	r6, r2
 8004824:	6123      	str	r3, [r4, #16]
 8004826:	e7ba      	b.n	800479e <_printf_i+0x152>
 8004828:	680b      	ldr	r3, [r1, #0]
 800482a:	1d1a      	adds	r2, r3, #4
 800482c:	600a      	str	r2, [r1, #0]
 800482e:	681e      	ldr	r6, [r3, #0]
 8004830:	2100      	movs	r1, #0
 8004832:	4630      	mov	r0, r6
 8004834:	6862      	ldr	r2, [r4, #4]
 8004836:	f000 f82f 	bl	8004898 <memchr>
 800483a:	b108      	cbz	r0, 8004840 <_printf_i+0x1f4>
 800483c:	1b80      	subs	r0, r0, r6
 800483e:	6060      	str	r0, [r4, #4]
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	6123      	str	r3, [r4, #16]
 8004844:	2300      	movs	r3, #0
 8004846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800484a:	e7a8      	b.n	800479e <_printf_i+0x152>
 800484c:	4632      	mov	r2, r6
 800484e:	4649      	mov	r1, r9
 8004850:	4640      	mov	r0, r8
 8004852:	6923      	ldr	r3, [r4, #16]
 8004854:	47d0      	blx	sl
 8004856:	3001      	adds	r0, #1
 8004858:	d0ab      	beq.n	80047b2 <_printf_i+0x166>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	079b      	lsls	r3, r3, #30
 800485e:	d413      	bmi.n	8004888 <_printf_i+0x23c>
 8004860:	68e0      	ldr	r0, [r4, #12]
 8004862:	9b03      	ldr	r3, [sp, #12]
 8004864:	4298      	cmp	r0, r3
 8004866:	bfb8      	it	lt
 8004868:	4618      	movlt	r0, r3
 800486a:	e7a4      	b.n	80047b6 <_printf_i+0x16a>
 800486c:	2301      	movs	r3, #1
 800486e:	4632      	mov	r2, r6
 8004870:	4649      	mov	r1, r9
 8004872:	4640      	mov	r0, r8
 8004874:	47d0      	blx	sl
 8004876:	3001      	adds	r0, #1
 8004878:	d09b      	beq.n	80047b2 <_printf_i+0x166>
 800487a:	3501      	adds	r5, #1
 800487c:	68e3      	ldr	r3, [r4, #12]
 800487e:	9903      	ldr	r1, [sp, #12]
 8004880:	1a5b      	subs	r3, r3, r1
 8004882:	42ab      	cmp	r3, r5
 8004884:	dcf2      	bgt.n	800486c <_printf_i+0x220>
 8004886:	e7eb      	b.n	8004860 <_printf_i+0x214>
 8004888:	2500      	movs	r5, #0
 800488a:	f104 0619 	add.w	r6, r4, #25
 800488e:	e7f5      	b.n	800487c <_printf_i+0x230>
 8004890:	08004b49 	.word	0x08004b49
 8004894:	08004b5a 	.word	0x08004b5a

08004898 <memchr>:
 8004898:	4603      	mov	r3, r0
 800489a:	b510      	push	{r4, lr}
 800489c:	b2c9      	uxtb	r1, r1
 800489e:	4402      	add	r2, r0
 80048a0:	4293      	cmp	r3, r2
 80048a2:	4618      	mov	r0, r3
 80048a4:	d101      	bne.n	80048aa <memchr+0x12>
 80048a6:	2000      	movs	r0, #0
 80048a8:	e003      	b.n	80048b2 <memchr+0x1a>
 80048aa:	7804      	ldrb	r4, [r0, #0]
 80048ac:	3301      	adds	r3, #1
 80048ae:	428c      	cmp	r4, r1
 80048b0:	d1f6      	bne.n	80048a0 <memchr+0x8>
 80048b2:	bd10      	pop	{r4, pc}

080048b4 <memcpy>:
 80048b4:	440a      	add	r2, r1
 80048b6:	4291      	cmp	r1, r2
 80048b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048bc:	d100      	bne.n	80048c0 <memcpy+0xc>
 80048be:	4770      	bx	lr
 80048c0:	b510      	push	{r4, lr}
 80048c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048c6:	4291      	cmp	r1, r2
 80048c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048cc:	d1f9      	bne.n	80048c2 <memcpy+0xe>
 80048ce:	bd10      	pop	{r4, pc}

080048d0 <memmove>:
 80048d0:	4288      	cmp	r0, r1
 80048d2:	b510      	push	{r4, lr}
 80048d4:	eb01 0402 	add.w	r4, r1, r2
 80048d8:	d902      	bls.n	80048e0 <memmove+0x10>
 80048da:	4284      	cmp	r4, r0
 80048dc:	4623      	mov	r3, r4
 80048de:	d807      	bhi.n	80048f0 <memmove+0x20>
 80048e0:	1e43      	subs	r3, r0, #1
 80048e2:	42a1      	cmp	r1, r4
 80048e4:	d008      	beq.n	80048f8 <memmove+0x28>
 80048e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048ee:	e7f8      	b.n	80048e2 <memmove+0x12>
 80048f0:	4601      	mov	r1, r0
 80048f2:	4402      	add	r2, r0
 80048f4:	428a      	cmp	r2, r1
 80048f6:	d100      	bne.n	80048fa <memmove+0x2a>
 80048f8:	bd10      	pop	{r4, pc}
 80048fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004902:	e7f7      	b.n	80048f4 <memmove+0x24>

08004904 <_free_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	4605      	mov	r5, r0
 8004908:	2900      	cmp	r1, #0
 800490a:	d043      	beq.n	8004994 <_free_r+0x90>
 800490c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004910:	1f0c      	subs	r4, r1, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	bfb8      	it	lt
 8004916:	18e4      	addlt	r4, r4, r3
 8004918:	f000 f8d0 	bl	8004abc <__malloc_lock>
 800491c:	4a1e      	ldr	r2, [pc, #120]	; (8004998 <_free_r+0x94>)
 800491e:	6813      	ldr	r3, [r2, #0]
 8004920:	4610      	mov	r0, r2
 8004922:	b933      	cbnz	r3, 8004932 <_free_r+0x2e>
 8004924:	6063      	str	r3, [r4, #4]
 8004926:	6014      	str	r4, [r2, #0]
 8004928:	4628      	mov	r0, r5
 800492a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800492e:	f000 b8cb 	b.w	8004ac8 <__malloc_unlock>
 8004932:	42a3      	cmp	r3, r4
 8004934:	d90a      	bls.n	800494c <_free_r+0x48>
 8004936:	6821      	ldr	r1, [r4, #0]
 8004938:	1862      	adds	r2, r4, r1
 800493a:	4293      	cmp	r3, r2
 800493c:	bf01      	itttt	eq
 800493e:	681a      	ldreq	r2, [r3, #0]
 8004940:	685b      	ldreq	r3, [r3, #4]
 8004942:	1852      	addeq	r2, r2, r1
 8004944:	6022      	streq	r2, [r4, #0]
 8004946:	6063      	str	r3, [r4, #4]
 8004948:	6004      	str	r4, [r0, #0]
 800494a:	e7ed      	b.n	8004928 <_free_r+0x24>
 800494c:	461a      	mov	r2, r3
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	b10b      	cbz	r3, 8004956 <_free_r+0x52>
 8004952:	42a3      	cmp	r3, r4
 8004954:	d9fa      	bls.n	800494c <_free_r+0x48>
 8004956:	6811      	ldr	r1, [r2, #0]
 8004958:	1850      	adds	r0, r2, r1
 800495a:	42a0      	cmp	r0, r4
 800495c:	d10b      	bne.n	8004976 <_free_r+0x72>
 800495e:	6820      	ldr	r0, [r4, #0]
 8004960:	4401      	add	r1, r0
 8004962:	1850      	adds	r0, r2, r1
 8004964:	4283      	cmp	r3, r0
 8004966:	6011      	str	r1, [r2, #0]
 8004968:	d1de      	bne.n	8004928 <_free_r+0x24>
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	4401      	add	r1, r0
 8004970:	6011      	str	r1, [r2, #0]
 8004972:	6053      	str	r3, [r2, #4]
 8004974:	e7d8      	b.n	8004928 <_free_r+0x24>
 8004976:	d902      	bls.n	800497e <_free_r+0x7a>
 8004978:	230c      	movs	r3, #12
 800497a:	602b      	str	r3, [r5, #0]
 800497c:	e7d4      	b.n	8004928 <_free_r+0x24>
 800497e:	6820      	ldr	r0, [r4, #0]
 8004980:	1821      	adds	r1, r4, r0
 8004982:	428b      	cmp	r3, r1
 8004984:	bf01      	itttt	eq
 8004986:	6819      	ldreq	r1, [r3, #0]
 8004988:	685b      	ldreq	r3, [r3, #4]
 800498a:	1809      	addeq	r1, r1, r0
 800498c:	6021      	streq	r1, [r4, #0]
 800498e:	6063      	str	r3, [r4, #4]
 8004990:	6054      	str	r4, [r2, #4]
 8004992:	e7c9      	b.n	8004928 <_free_r+0x24>
 8004994:	bd38      	pop	{r3, r4, r5, pc}
 8004996:	bf00      	nop
 8004998:	20000134 	.word	0x20000134

0800499c <_malloc_r>:
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	1ccd      	adds	r5, r1, #3
 80049a0:	f025 0503 	bic.w	r5, r5, #3
 80049a4:	3508      	adds	r5, #8
 80049a6:	2d0c      	cmp	r5, #12
 80049a8:	bf38      	it	cc
 80049aa:	250c      	movcc	r5, #12
 80049ac:	2d00      	cmp	r5, #0
 80049ae:	4606      	mov	r6, r0
 80049b0:	db01      	blt.n	80049b6 <_malloc_r+0x1a>
 80049b2:	42a9      	cmp	r1, r5
 80049b4:	d903      	bls.n	80049be <_malloc_r+0x22>
 80049b6:	230c      	movs	r3, #12
 80049b8:	6033      	str	r3, [r6, #0]
 80049ba:	2000      	movs	r0, #0
 80049bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049be:	f000 f87d 	bl	8004abc <__malloc_lock>
 80049c2:	4921      	ldr	r1, [pc, #132]	; (8004a48 <_malloc_r+0xac>)
 80049c4:	680a      	ldr	r2, [r1, #0]
 80049c6:	4614      	mov	r4, r2
 80049c8:	b99c      	cbnz	r4, 80049f2 <_malloc_r+0x56>
 80049ca:	4f20      	ldr	r7, [pc, #128]	; (8004a4c <_malloc_r+0xb0>)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	b923      	cbnz	r3, 80049da <_malloc_r+0x3e>
 80049d0:	4621      	mov	r1, r4
 80049d2:	4630      	mov	r0, r6
 80049d4:	f000 f862 	bl	8004a9c <_sbrk_r>
 80049d8:	6038      	str	r0, [r7, #0]
 80049da:	4629      	mov	r1, r5
 80049dc:	4630      	mov	r0, r6
 80049de:	f000 f85d 	bl	8004a9c <_sbrk_r>
 80049e2:	1c43      	adds	r3, r0, #1
 80049e4:	d123      	bne.n	8004a2e <_malloc_r+0x92>
 80049e6:	230c      	movs	r3, #12
 80049e8:	4630      	mov	r0, r6
 80049ea:	6033      	str	r3, [r6, #0]
 80049ec:	f000 f86c 	bl	8004ac8 <__malloc_unlock>
 80049f0:	e7e3      	b.n	80049ba <_malloc_r+0x1e>
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	1b5b      	subs	r3, r3, r5
 80049f6:	d417      	bmi.n	8004a28 <_malloc_r+0x8c>
 80049f8:	2b0b      	cmp	r3, #11
 80049fa:	d903      	bls.n	8004a04 <_malloc_r+0x68>
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	441c      	add	r4, r3
 8004a00:	6025      	str	r5, [r4, #0]
 8004a02:	e004      	b.n	8004a0e <_malloc_r+0x72>
 8004a04:	6863      	ldr	r3, [r4, #4]
 8004a06:	42a2      	cmp	r2, r4
 8004a08:	bf0c      	ite	eq
 8004a0a:	600b      	streq	r3, [r1, #0]
 8004a0c:	6053      	strne	r3, [r2, #4]
 8004a0e:	4630      	mov	r0, r6
 8004a10:	f000 f85a 	bl	8004ac8 <__malloc_unlock>
 8004a14:	f104 000b 	add.w	r0, r4, #11
 8004a18:	1d23      	adds	r3, r4, #4
 8004a1a:	f020 0007 	bic.w	r0, r0, #7
 8004a1e:	1ac2      	subs	r2, r0, r3
 8004a20:	d0cc      	beq.n	80049bc <_malloc_r+0x20>
 8004a22:	1a1b      	subs	r3, r3, r0
 8004a24:	50a3      	str	r3, [r4, r2]
 8004a26:	e7c9      	b.n	80049bc <_malloc_r+0x20>
 8004a28:	4622      	mov	r2, r4
 8004a2a:	6864      	ldr	r4, [r4, #4]
 8004a2c:	e7cc      	b.n	80049c8 <_malloc_r+0x2c>
 8004a2e:	1cc4      	adds	r4, r0, #3
 8004a30:	f024 0403 	bic.w	r4, r4, #3
 8004a34:	42a0      	cmp	r0, r4
 8004a36:	d0e3      	beq.n	8004a00 <_malloc_r+0x64>
 8004a38:	1a21      	subs	r1, r4, r0
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	f000 f82e 	bl	8004a9c <_sbrk_r>
 8004a40:	3001      	adds	r0, #1
 8004a42:	d1dd      	bne.n	8004a00 <_malloc_r+0x64>
 8004a44:	e7cf      	b.n	80049e6 <_malloc_r+0x4a>
 8004a46:	bf00      	nop
 8004a48:	20000134 	.word	0x20000134
 8004a4c:	20000138 	.word	0x20000138

08004a50 <_realloc_r>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	4607      	mov	r7, r0
 8004a54:	4614      	mov	r4, r2
 8004a56:	460e      	mov	r6, r1
 8004a58:	b921      	cbnz	r1, 8004a64 <_realloc_r+0x14>
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a60:	f7ff bf9c 	b.w	800499c <_malloc_r>
 8004a64:	b922      	cbnz	r2, 8004a70 <_realloc_r+0x20>
 8004a66:	f7ff ff4d 	bl	8004904 <_free_r>
 8004a6a:	4625      	mov	r5, r4
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a70:	f000 f830 	bl	8004ad4 <_malloc_usable_size_r>
 8004a74:	42a0      	cmp	r0, r4
 8004a76:	d20f      	bcs.n	8004a98 <_realloc_r+0x48>
 8004a78:	4621      	mov	r1, r4
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	f7ff ff8e 	bl	800499c <_malloc_r>
 8004a80:	4605      	mov	r5, r0
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d0f2      	beq.n	8004a6c <_realloc_r+0x1c>
 8004a86:	4631      	mov	r1, r6
 8004a88:	4622      	mov	r2, r4
 8004a8a:	f7ff ff13 	bl	80048b4 <memcpy>
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4638      	mov	r0, r7
 8004a92:	f7ff ff37 	bl	8004904 <_free_r>
 8004a96:	e7e9      	b.n	8004a6c <_realloc_r+0x1c>
 8004a98:	4635      	mov	r5, r6
 8004a9a:	e7e7      	b.n	8004a6c <_realloc_r+0x1c>

08004a9c <_sbrk_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	4d05      	ldr	r5, [pc, #20]	; (8004ab8 <_sbrk_r+0x1c>)
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	4608      	mov	r0, r1
 8004aa6:	602b      	str	r3, [r5, #0]
 8004aa8:	f7fc ff26 	bl	80018f8 <_sbrk>
 8004aac:	1c43      	adds	r3, r0, #1
 8004aae:	d102      	bne.n	8004ab6 <_sbrk_r+0x1a>
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	b103      	cbz	r3, 8004ab6 <_sbrk_r+0x1a>
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	bd38      	pop	{r3, r4, r5, pc}
 8004ab8:	20000214 	.word	0x20000214

08004abc <__malloc_lock>:
 8004abc:	4801      	ldr	r0, [pc, #4]	; (8004ac4 <__malloc_lock+0x8>)
 8004abe:	f000 b811 	b.w	8004ae4 <__retarget_lock_acquire_recursive>
 8004ac2:	bf00      	nop
 8004ac4:	2000021c 	.word	0x2000021c

08004ac8 <__malloc_unlock>:
 8004ac8:	4801      	ldr	r0, [pc, #4]	; (8004ad0 <__malloc_unlock+0x8>)
 8004aca:	f000 b80c 	b.w	8004ae6 <__retarget_lock_release_recursive>
 8004ace:	bf00      	nop
 8004ad0:	2000021c 	.word	0x2000021c

08004ad4 <_malloc_usable_size_r>:
 8004ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ad8:	1f18      	subs	r0, r3, #4
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bfbc      	itt	lt
 8004ade:	580b      	ldrlt	r3, [r1, r0]
 8004ae0:	18c0      	addlt	r0, r0, r3
 8004ae2:	4770      	bx	lr

08004ae4 <__retarget_lock_acquire_recursive>:
 8004ae4:	4770      	bx	lr

08004ae6 <__retarget_lock_release_recursive>:
 8004ae6:	4770      	bx	lr

08004ae8 <_init>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	bf00      	nop
 8004aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aee:	bc08      	pop	{r3}
 8004af0:	469e      	mov	lr, r3
 8004af2:	4770      	bx	lr

08004af4 <_fini>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	bf00      	nop
 8004af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afa:	bc08      	pop	{r3}
 8004afc:	469e      	mov	lr, r3
 8004afe:	4770      	bx	lr
