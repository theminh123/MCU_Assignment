
mcu_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004b48  08004b48  00014b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bb4  08004bb4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08004bb4  08004bb4  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bb4  08004bb4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bb4  08004bb4  00014bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bb8  08004bb8  00014bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  2000008c  08004c48  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08004c48  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019091  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000312d  00000000  00000000  00039146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  0003c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  0003cfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a091  00000000  00000000  0003dbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001245b  00000000  00000000  00057c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b0da  00000000  00000000  0006a0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f519e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000383c  00000000  00000000  000f51f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b30 	.word	0x08004b30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08004b30 	.word	0x08004b30

0800014c <isButtonPressed>:

//Array to find which button
static int button_flag[NUMBER_BUTTONS];

//RESET FLAG
int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000e8 	.word	0x200000e8

08000180 <button_processing>:

//READ BUTTON
void button_processing(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < NUMBER_BUTTONS; i++){
 8000186:	2300      	movs	r3, #0
 8000188:	71fb      	strb	r3, [r7, #7]
 800018a:	e069      	b.n	8000260 <button_processing+0xe0>
        //Debounce
		db_3[i] = db_2[i];
 800018c:	79fa      	ldrb	r2, [r7, #7]
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	4937      	ldr	r1, [pc, #220]	; (8000270 <button_processing+0xf0>)
 8000192:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000196:	4937      	ldr	r1, [pc, #220]	; (8000274 <button_processing+0xf4>)
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		db_2[i] = db_1[i];
 800019c:	79fa      	ldrb	r2, [r7, #7]
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	4935      	ldr	r1, [pc, #212]	; (8000278 <button_processing+0xf8>)
 80001a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80001a6:	4932      	ldr	r1, [pc, #200]	; (8000270 <button_processing+0xf0>)
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//DO STH

		if(i == 0) db_1[i] = HAL_GPIO_ReadPin(PedestrianButton_GPIO_Port, PedestrianButton_Pin);
 80001ac:	79fb      	ldrb	r3, [r7, #7]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d10b      	bne.n	80001ca <button_processing+0x4a>
 80001b2:	2101      	movs	r1, #1
 80001b4:	4831      	ldr	r0, [pc, #196]	; (800027c <button_processing+0xfc>)
 80001b6:	f002 f84f 	bl	8002258 <HAL_GPIO_ReadPin>
 80001ba:	4603      	mov	r3, r0
 80001bc:	461a      	mov	r2, r3
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	4611      	mov	r1, r2
 80001c2:	4a2d      	ldr	r2, [pc, #180]	; (8000278 <button_processing+0xf8>)
 80001c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001c8:	e02b      	b.n	8000222 <button_processing+0xa2>
		else if(i == 1) db_1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d10b      	bne.n	80001e8 <button_processing+0x68>
 80001d0:	2102      	movs	r1, #2
 80001d2:	482a      	ldr	r0, [pc, #168]	; (800027c <button_processing+0xfc>)
 80001d4:	f002 f840 	bl	8002258 <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	461a      	mov	r2, r3
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	4611      	mov	r1, r2
 80001e0:	4a25      	ldr	r2, [pc, #148]	; (8000278 <button_processing+0xf8>)
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e6:	e01c      	b.n	8000222 <button_processing+0xa2>
		else if(i == 2) db_1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	2b02      	cmp	r3, #2
 80001ec:	d10b      	bne.n	8000206 <button_processing+0x86>
 80001ee:	2110      	movs	r1, #16
 80001f0:	4822      	ldr	r0, [pc, #136]	; (800027c <button_processing+0xfc>)
 80001f2:	f002 f831 	bl	8002258 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	461a      	mov	r2, r3
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	4611      	mov	r1, r2
 80001fe:	4a1e      	ldr	r2, [pc, #120]	; (8000278 <button_processing+0xf8>)
 8000200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000204:	e00d      	b.n	8000222 <button_processing+0xa2>
		else if(i == 3) db_1[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	2b03      	cmp	r3, #3
 800020a:	d10a      	bne.n	8000222 <button_processing+0xa2>
 800020c:	2101      	movs	r1, #1
 800020e:	481c      	ldr	r0, [pc, #112]	; (8000280 <button_processing+0x100>)
 8000210:	f002 f822 	bl	8002258 <HAL_GPIO_ReadPin>
 8000214:	4603      	mov	r3, r0
 8000216:	461a      	mov	r2, r3
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	4611      	mov	r1, r2
 800021c:	4a16      	ldr	r2, [pc, #88]	; (8000278 <button_processing+0xf8>)
 800021e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        //DO AFTER DEBOUNCE
		if((db_3[i] == db_2[i]) && db_2[i] == db_1[i]){
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	4a13      	ldr	r2, [pc, #76]	; (8000274 <button_processing+0xf4>)
 8000226:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	4910      	ldr	r1, [pc, #64]	; (8000270 <button_processing+0xf0>)
 800022e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000232:	429a      	cmp	r2, r3
 8000234:	d111      	bne.n	800025a <button_processing+0xda>
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4a0d      	ldr	r2, [pc, #52]	; (8000270 <button_processing+0xf0>)
 800023a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	490d      	ldr	r1, [pc, #52]	; (8000278 <button_processing+0xf8>)
 8000242:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000246:	429a      	cmp	r2, r3
 8000248:	d107      	bne.n	800025a <button_processing+0xda>
			button_buffer[i] = db_3[i];
 800024a:	79fa      	ldrb	r2, [r7, #7]
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	4909      	ldr	r1, [pc, #36]	; (8000274 <button_processing+0xf4>)
 8000250:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000254:	490b      	ldr	r1, [pc, #44]	; (8000284 <button_processing+0x104>)
 8000256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i = 0 ; i < NUMBER_BUTTONS; i++){
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	3301      	adds	r3, #1
 800025e:	71fb      	strb	r3, [r7, #7]
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	2b03      	cmp	r3, #3
 8000264:	d992      	bls.n	800018c <button_processing+0xc>
		}
	}
}
 8000266:	bf00      	nop
 8000268:	bf00      	nop
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	200000c8 	.word	0x200000c8
 8000274:	200000d8 	.word	0x200000d8
 8000278:	200000b8 	.word	0x200000b8
 800027c:	40010800 	.word	0x40010800
 8000280:	40010c00 	.word	0x40010c00
 8000284:	200000a8 	.word	0x200000a8

08000288 <mode_selector>:

//INIT
enum ButtonState {BUTTON_RELEASED, BUTTON1_PRESSED} ;
enum ButtonState buttonState = BUTTON_RELEASED;

void mode_selector(void) {
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	switch (buttonState) {
 800028c:	4b3c      	ldr	r3, [pc, #240]	; (8000380 <mode_selector+0xf8>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d002      	beq.n	800029a <mode_selector+0x12>
 8000294:	2b01      	cmp	r3, #1
 8000296:	d00f      	beq.n	80002b8 <mode_selector+0x30>
			 	mode = 1;
			 	status = INIT;//RESET MODE CYLCE
			 }
			 break;
		}
}
 8000298:	e070      	b.n	800037c <mode_selector+0xf4>
			 if(isButtonPressed(1)) {
 800029a:	2001      	movs	r0, #1
 800029c:	f7ff ff56 	bl	800014c <isButtonPressed>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d067      	beq.n	8000376 <mode_selector+0xee>
				 buttonState = BUTTON1_PRESSED;
 80002a6:	4b36      	ldr	r3, [pc, #216]	; (8000380 <mode_selector+0xf8>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	701a      	strb	r2, [r3, #0]
				 mode++;
 80002ac:	4b35      	ldr	r3, [pc, #212]	; (8000384 <mode_selector+0xfc>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	3301      	adds	r3, #1
 80002b2:	4a34      	ldr	r2, [pc, #208]	; (8000384 <mode_selector+0xfc>)
 80002b4:	6013      	str	r3, [r2, #0]
			 break;
 80002b6:	e05e      	b.n	8000376 <mode_selector+0xee>
			 if (!isButtonPressed(1)) {
 80002b8:	2001      	movs	r0, #1
 80002ba:	f7ff ff47 	bl	800014c <isButtonPressed>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d102      	bne.n	80002ca <mode_selector+0x42>
				 buttonState = BUTTON_RELEASED;
 80002c4:	4b2e      	ldr	r3, [pc, #184]	; (8000380 <mode_selector+0xf8>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]
			 if(mode == 2) {
 80002ca:	4b2e      	ldr	r3, [pc, #184]	; (8000384 <mode_selector+0xfc>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2b02      	cmp	r3, #2
 80002d0:	d120      	bne.n	8000314 <mode_selector+0x8c>
				status = MAN_RED_GREEN;
 80002d2:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <mode_selector+0x100>)
 80002d4:	220b      	movs	r2, #11
 80002d6:	601a      	str	r2, [r3, #0]
				setTimer1(60000);
 80002d8:	f64e 2060 	movw	r0, #60000	; 0xea60
 80002dc:	f001 fb50 	bl	8001980 <setTimer1>
				counter = 0;
 80002e0:	4b2a      	ldr	r3, [pc, #168]	; (800038c <mode_selector+0x104>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 80002e6:	2201      	movs	r2, #1
 80002e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ec:	4828      	ldr	r0, [pc, #160]	; (8000390 <mode_selector+0x108>)
 80002ee:	f001 ffca 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2108      	movs	r1, #8
 80002f6:	4827      	ldr	r0, [pc, #156]	; (8000394 <mode_selector+0x10c>)
 80002f8:	f001 ffc5 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2120      	movs	r1, #32
 8000300:	4824      	ldr	r0, [pc, #144]	; (8000394 <mode_selector+0x10c>)
 8000302:	f001 ffc0 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8000306:	2201      	movs	r2, #1
 8000308:	2110      	movs	r1, #16
 800030a:	4822      	ldr	r0, [pc, #136]	; (8000394 <mode_selector+0x10c>)
 800030c:	f001 ffbb 	bl	8002286 <HAL_GPIO_WritePin>
				displayCounter();
 8000310:	f000 f844 	bl	800039c <displayCounter>
			 if(mode == 3){
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <mode_selector+0xfc>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2b03      	cmp	r3, #3
 800031a:	d121      	bne.n	8000360 <mode_selector+0xd8>
				status = TUNING_RED1;
 800031c:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <mode_selector+0x100>)
 800031e:	2215      	movs	r2, #21
 8000320:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000326:	f001 fb2b 	bl	8001980 <setTimer1>
				counter = timer_red1;
 800032a:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <mode_selector+0x110>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a17      	ldr	r2, [pc, #92]	; (800038c <mode_selector+0x104>)
 8000330:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000338:	4815      	ldr	r0, [pc, #84]	; (8000390 <mode_selector+0x108>)
 800033a:	f001 ffa4 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	2108      	movs	r1, #8
 8000342:	4814      	ldr	r0, [pc, #80]	; (8000394 <mode_selector+0x10c>)
 8000344:	f001 ff9f 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2120      	movs	r1, #32
 800034c:	4811      	ldr	r0, [pc, #68]	; (8000394 <mode_selector+0x10c>)
 800034e:	f001 ff9a 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	2110      	movs	r1, #16
 8000356:	480f      	ldr	r0, [pc, #60]	; (8000394 <mode_selector+0x10c>)
 8000358:	f001 ff95 	bl	8002286 <HAL_GPIO_WritePin>
				displayCounter();
 800035c:	f000 f81e 	bl	800039c <displayCounter>
			 if(mode > 3){
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <mode_selector+0xfc>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b03      	cmp	r3, #3
 8000366:	dd08      	ble.n	800037a <mode_selector+0xf2>
			 	mode = 1;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <mode_selector+0xfc>)
 800036a:	2201      	movs	r2, #1
 800036c:	601a      	str	r2, [r3, #0]
			 	status = INIT;//RESET MODE CYLCE
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <mode_selector+0x100>)
 8000370:	2201      	movs	r2, #1
 8000372:	601a      	str	r2, [r3, #0]
			 break;
 8000374:	e001      	b.n	800037a <mode_selector+0xf2>
			 break;
 8000376:	bf00      	nop
 8000378:	e000      	b.n	800037c <mode_selector+0xf4>
			 break;
 800037a:	bf00      	nop
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	200000f8 	.word	0x200000f8
 8000384:	20000000 	.word	0x20000000
 8000388:	20000100 	.word	0x20000100
 800038c:	20000108 	.word	0x20000108
 8000390:	40010800 	.word	0x40010800
 8000394:	40010c00 	.word	0x40010c00
 8000398:	20000004 	.word	0x20000004

0800039c <displayCounter>:
#include "display7seg.h"

//Display the counter using UART
void displayCounter() {
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	sprintf(str, "!7SEG:%d%d#\r\n", counter/10, counter%10);//TENS = Counter/10 ; UNITS = Counter%10
 80003a0:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <displayCounter+0x48>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a10      	ldr	r2, [pc, #64]	; (80003e8 <displayCounter+0x4c>)
 80003a6:	fb82 1203 	smull	r1, r2, r2, r3
 80003aa:	1092      	asrs	r2, r2, #2
 80003ac:	17db      	asrs	r3, r3, #31
 80003ae:	1ad0      	subs	r0, r2, r3
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <displayCounter+0x48>)
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <displayCounter+0x4c>)
 80003b6:	fb83 1302 	smull	r1, r3, r3, r2
 80003ba:	1099      	asrs	r1, r3, #2
 80003bc:	17d3      	asrs	r3, r2, #31
 80003be:	1ac9      	subs	r1, r1, r3
 80003c0:	460b      	mov	r3, r1
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	440b      	add	r3, r1
 80003c6:	005b      	lsls	r3, r3, #1
 80003c8:	1ad1      	subs	r1, r2, r3
 80003ca:	460b      	mov	r3, r1
 80003cc:	4602      	mov	r2, r0
 80003ce:	4907      	ldr	r1, [pc, #28]	; (80003ec <displayCounter+0x50>)
 80003d0:	4807      	ldr	r0, [pc, #28]	; (80003f0 <displayCounter+0x54>)
 80003d2:	f003 ff73 	bl	80042bc <siprintf>
	HAL_UART_Transmit_IT(&huart2, (void*)str, 15);
 80003d6:	220f      	movs	r2, #15
 80003d8:	4905      	ldr	r1, [pc, #20]	; (80003f0 <displayCounter+0x54>)
 80003da:	4806      	ldr	r0, [pc, #24]	; (80003f4 <displayCounter+0x58>)
 80003dc:	f003 fb49 	bl	8003a72 <HAL_UART_Transmit_IT>
}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000108 	.word	0x20000108
 80003e8:	66666667 	.word	0x66666667
 80003ec:	08004b48 	.word	0x08004b48
 80003f0:	2000010c 	.word	0x2000010c
 80003f4:	200001cc 	.word	0x200001cc

080003f8 <fsm_automatic>:
#include "fsm_auto.h"

//FSM = 4 STATES = R-G -> R-Y -> G-R -> Y-R
void fsm_automatic() {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	switch(status) {
 80003fc:	4b75      	ldr	r3, [pc, #468]	; (80005d4 <fsm_automatic+0x1dc>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	3b01      	subs	r3, #1
 8000402:	2b04      	cmp	r3, #4
 8000404:	f200 80e3 	bhi.w	80005ce <fsm_automatic+0x1d6>
 8000408:	a201      	add	r2, pc, #4	; (adr r2, 8000410 <fsm_automatic+0x18>)
 800040a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040e:	bf00      	nop
 8000410:	08000425 	.word	0x08000425
 8000414:	0800046b 	.word	0x0800046b
 8000418:	080004b3 	.word	0x080004b3
 800041c:	08000515 	.word	0x08000515
 8000420:	08000561 	.word	0x08000561
		case INIT: //FIRST a.k.a INIT case R-G, to setup
			status=AUTO_RED_GREEN;
 8000424:	4b6b      	ldr	r3, [pc, #428]	; (80005d4 <fsm_automatic+0x1dc>)
 8000426:	2202      	movs	r2, #2
 8000428:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800042a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800042e:	f001 faa7 	bl	8001980 <setTimer1>
			counter = timer_red1;
 8000432:	4b69      	ldr	r3, [pc, #420]	; (80005d8 <fsm_automatic+0x1e0>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a69      	ldr	r2, [pc, #420]	; (80005dc <fsm_automatic+0x1e4>)
 8000438:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 800043a:	2201      	movs	r2, #1
 800043c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000440:	4867      	ldr	r0, [pc, #412]	; (80005e0 <fsm_automatic+0x1e8>)
 8000442:	f001 ff20 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2108      	movs	r1, #8
 800044a:	4866      	ldr	r0, [pc, #408]	; (80005e4 <fsm_automatic+0x1ec>)
 800044c:	f001 ff1b 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2120      	movs	r1, #32
 8000454:	4863      	ldr	r0, [pc, #396]	; (80005e4 <fsm_automatic+0x1ec>)
 8000456:	f001 ff16 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 800045a:	2201      	movs	r2, #1
 800045c:	2110      	movs	r1, #16
 800045e:	4861      	ldr	r0, [pc, #388]	; (80005e4 <fsm_automatic+0x1ec>)
 8000460:	f001 ff11 	bl	8002286 <HAL_GPIO_WritePin>

			displayCounter();
 8000464:	f7ff ff9a 	bl	800039c <displayCounter>
			break;
 8000468:	e0b1      	b.n	80005ce <fsm_automatic+0x1d6>
		case AUTO_RED_GREEN: //FIRST again R-G
			if(timer1_flag == 1){
 800046a:	4b5f      	ldr	r3, [pc, #380]	; (80005e8 <fsm_automatic+0x1f0>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b01      	cmp	r3, #1
 8000470:	f040 80a6 	bne.w	80005c0 <fsm_automatic+0x1c8>
				counter--;
 8000474:	4b59      	ldr	r3, [pc, #356]	; (80005dc <fsm_automatic+0x1e4>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	3b01      	subs	r3, #1
 800047a:	4a58      	ldr	r2, [pc, #352]	; (80005dc <fsm_automatic+0x1e4>)
 800047c:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 800047e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000482:	f001 fa7d 	bl	8001980 <setTimer1>
				if(counter == timer_yellow2){
 8000486:	4b55      	ldr	r3, [pc, #340]	; (80005dc <fsm_automatic+0x1e4>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	4b58      	ldr	r3, [pc, #352]	; (80005ec <fsm_automatic+0x1f4>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	429a      	cmp	r2, r3
 8000490:	d10c      	bne.n	80004ac <fsm_automatic+0xb4>
					HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8000492:	2201      	movs	r2, #1
 8000494:	2120      	movs	r1, #32
 8000496:	4853      	ldr	r0, [pc, #332]	; (80005e4 <fsm_automatic+0x1ec>)
 8000498:	f001 fef5 	bl	8002286 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 800049c:	2201      	movs	r2, #1
 800049e:	2110      	movs	r1, #16
 80004a0:	4850      	ldr	r0, [pc, #320]	; (80005e4 <fsm_automatic+0x1ec>)
 80004a2:	f001 fef0 	bl	8002286 <HAL_GPIO_WritePin>
					status = AUTO_RED_YELLOW;
 80004a6:	4b4b      	ldr	r3, [pc, #300]	; (80005d4 <fsm_automatic+0x1dc>)
 80004a8:	2203      	movs	r2, #3
 80004aa:	601a      	str	r2, [r3, #0]
				}
				displayCounter();
 80004ac:	f7ff ff76 	bl	800039c <displayCounter>
			}
			break;
 80004b0:	e086      	b.n	80005c0 <fsm_automatic+0x1c8>
		case AUTO_RED_YELLOW: //SECOND R-Y
			if(timer1_flag == 1){
 80004b2:	4b4d      	ldr	r3, [pc, #308]	; (80005e8 <fsm_automatic+0x1f0>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	f040 8084 	bne.w	80005c4 <fsm_automatic+0x1cc>
				counter--;
 80004bc:	4b47      	ldr	r3, [pc, #284]	; (80005dc <fsm_automatic+0x1e4>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	3b01      	subs	r3, #1
 80004c2:	4a46      	ldr	r2, [pc, #280]	; (80005dc <fsm_automatic+0x1e4>)
 80004c4:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 80004c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ca:	f001 fa59 	bl	8001980 <setTimer1>
				if(counter == 0){
 80004ce:	4b43      	ldr	r3, [pc, #268]	; (80005dc <fsm_automatic+0x1e4>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d11b      	bne.n	800050e <fsm_automatic+0x116>
					counter = timer_green1;
 80004d6:	4b46      	ldr	r3, [pc, #280]	; (80005f0 <fsm_automatic+0x1f8>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a40      	ldr	r2, [pc, #256]	; (80005dc <fsm_automatic+0x1e4>)
 80004dc:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e4:	483e      	ldr	r0, [pc, #248]	; (80005e0 <fsm_automatic+0x1e8>)
 80004e6:	f001 fece 	bl	8002286 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	2108      	movs	r1, #8
 80004ee:	483d      	ldr	r0, [pc, #244]	; (80005e4 <fsm_automatic+0x1ec>)
 80004f0:	f001 fec9 	bl	8002286 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2120      	movs	r1, #32
 80004f8:	483a      	ldr	r0, [pc, #232]	; (80005e4 <fsm_automatic+0x1ec>)
 80004fa:	f001 fec4 	bl	8002286 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2110      	movs	r1, #16
 8000502:	4838      	ldr	r0, [pc, #224]	; (80005e4 <fsm_automatic+0x1ec>)
 8000504:	f001 febf 	bl	8002286 <HAL_GPIO_WritePin>
					status = AUTO_GREEN_RED;
 8000508:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <fsm_automatic+0x1dc>)
 800050a:	2204      	movs	r2, #4
 800050c:	601a      	str	r2, [r3, #0]
				}
				displayCounter();
 800050e:	f7ff ff45 	bl	800039c <displayCounter>
			}
			break;
 8000512:	e057      	b.n	80005c4 <fsm_automatic+0x1cc>
		case AUTO_GREEN_RED: //THIRD G-R
			if(timer1_flag == 1){
 8000514:	4b34      	ldr	r3, [pc, #208]	; (80005e8 <fsm_automatic+0x1f0>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d155      	bne.n	80005c8 <fsm_automatic+0x1d0>
				counter--;
 800051c:	4b2f      	ldr	r3, [pc, #188]	; (80005dc <fsm_automatic+0x1e4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3b01      	subs	r3, #1
 8000522:	4a2e      	ldr	r2, [pc, #184]	; (80005dc <fsm_automatic+0x1e4>)
 8000524:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 8000526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052a:	f001 fa29 	bl	8001980 <setTimer1>
				if(counter == 0){
 800052e:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <fsm_automatic+0x1e4>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d111      	bne.n	800055a <fsm_automatic+0x162>
					counter = timer_yellow1;
 8000536:	4b2f      	ldr	r3, [pc, #188]	; (80005f4 <fsm_automatic+0x1fc>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a28      	ldr	r2, [pc, #160]	; (80005dc <fsm_automatic+0x1e4>)
 800053c:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000544:	4826      	ldr	r0, [pc, #152]	; (80005e0 <fsm_automatic+0x1e8>)
 8000546:	f001 fe9e 	bl	8002286 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2108      	movs	r1, #8
 800054e:	4825      	ldr	r0, [pc, #148]	; (80005e4 <fsm_automatic+0x1ec>)
 8000550:	f001 fe99 	bl	8002286 <HAL_GPIO_WritePin>
					status = AUTO_YELLOW_RED;
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <fsm_automatic+0x1dc>)
 8000556:	2205      	movs	r2, #5
 8000558:	601a      	str	r2, [r3, #0]
				}
				displayCounter();
 800055a:	f7ff ff1f 	bl	800039c <displayCounter>
			}
			break;
 800055e:	e033      	b.n	80005c8 <fsm_automatic+0x1d0>
		case AUTO_YELLOW_RED: //FOURTH Y-R
			if(timer1_flag == 1){
 8000560:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <fsm_automatic+0x1f0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d131      	bne.n	80005cc <fsm_automatic+0x1d4>
				counter--;
 8000568:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <fsm_automatic+0x1e4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3b01      	subs	r3, #1
 800056e:	4a1b      	ldr	r2, [pc, #108]	; (80005dc <fsm_automatic+0x1e4>)
 8000570:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 8000572:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000576:	f001 fa03 	bl	8001980 <setTimer1>
				if(counter == 0){
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <fsm_automatic+0x1e4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d11b      	bne.n	80005ba <fsm_automatic+0x1c2>
					counter = timer_red1;
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <fsm_automatic+0x1e0>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a15      	ldr	r2, [pc, #84]	; (80005dc <fsm_automatic+0x1e4>)
 8000588:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <fsm_automatic+0x1e8>)
 8000592:	f001 fe78 	bl	8002286 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2108      	movs	r1, #8
 800059a:	4812      	ldr	r0, [pc, #72]	; (80005e4 <fsm_automatic+0x1ec>)
 800059c:	f001 fe73 	bl	8002286 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2120      	movs	r1, #32
 80005a4:	480f      	ldr	r0, [pc, #60]	; (80005e4 <fsm_automatic+0x1ec>)
 80005a6:	f001 fe6e 	bl	8002286 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2110      	movs	r1, #16
 80005ae:	480d      	ldr	r0, [pc, #52]	; (80005e4 <fsm_automatic+0x1ec>)
 80005b0:	f001 fe69 	bl	8002286 <HAL_GPIO_WritePin>
					status = AUTO_RED_GREEN;
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <fsm_automatic+0x1dc>)
 80005b6:	2202      	movs	r2, #2
 80005b8:	601a      	str	r2, [r3, #0]
				}
				displayCounter();
 80005ba:	f7ff feef 	bl	800039c <displayCounter>
			}
			break;
 80005be:	e005      	b.n	80005cc <fsm_automatic+0x1d4>
			break;
 80005c0:	bf00      	nop
 80005c2:	e004      	b.n	80005ce <fsm_automatic+0x1d6>
			break;
 80005c4:	bf00      	nop
 80005c6:	e002      	b.n	80005ce <fsm_automatic+0x1d6>
			break;
 80005c8:	bf00      	nop
 80005ca:	e000      	b.n	80005ce <fsm_automatic+0x1d6>
			break;
 80005cc:	bf00      	nop
		//AND RESET TO FIRST
	}
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000100 	.word	0x20000100
 80005d8:	20000004 	.word	0x20000004
 80005dc:	20000108 	.word	0x20000108
 80005e0:	40010800 	.word	0x40010800
 80005e4:	40010c00 	.word	0x40010c00
 80005e8:	2000011c 	.word	0x2000011c
 80005ec:	20000018 	.word	0x20000018
 80005f0:	20000008 	.word	0x20000008
 80005f4:	2000000c 	.word	0x2000000c

080005f8 <fsm_manual>:
#include "fsm_manual.h"

void fsm_manual() {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	switch(status) {
 80005fc:	4ba1      	ldr	r3, [pc, #644]	; (8000884 <fsm_manual+0x28c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	3b0b      	subs	r3, #11
 8000602:	2b03      	cmp	r3, #3
 8000604:	f200 8132 	bhi.w	800086c <fsm_manual+0x274>
 8000608:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <fsm_manual+0x18>)
 800060a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060e:	bf00      	nop
 8000610:	08000621 	.word	0x08000621
 8000614:	080006b5 	.word	0x080006b5
 8000618:	08000749 	.word	0x08000749
 800061c:	080007db 	.word	0x080007db
		case MAN_RED_GREEN:
			if(timer1_flag==1) {
 8000620:	4b99      	ldr	r3, [pc, #612]	; (8000888 <fsm_manual+0x290>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d121      	bne.n	800066c <fsm_manual+0x74>
				status = AUTO_RED_YELLOW;
 8000628:	4b96      	ldr	r3, [pc, #600]	; (8000884 <fsm_manual+0x28c>)
 800062a:	2203      	movs	r2, #3
 800062c:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 800062e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000632:	f001 f9a5 	bl	8001980 <setTimer1>
				counter = timer_yellow2;
 8000636:	4b95      	ldr	r3, [pc, #596]	; (800088c <fsm_manual+0x294>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a95      	ldr	r2, [pc, #596]	; (8000890 <fsm_manual+0x298>)
 800063c:	6013      	str	r3, [r2, #0]
				displayCounter();
 800063e:	f7ff fead 	bl	800039c <displayCounter>

				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8000642:	2201      	movs	r2, #1
 8000644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000648:	4892      	ldr	r0, [pc, #584]	; (8000894 <fsm_manual+0x29c>)
 800064a:	f001 fe1c 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2108      	movs	r1, #8
 8000652:	4891      	ldr	r0, [pc, #580]	; (8000898 <fsm_manual+0x2a0>)
 8000654:	f001 fe17 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2120      	movs	r1, #32
 800065c:	488e      	ldr	r0, [pc, #568]	; (8000898 <fsm_manual+0x2a0>)
 800065e:	f001 fe12 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2110      	movs	r1, #16
 8000666:	488c      	ldr	r0, [pc, #560]	; (8000898 <fsm_manual+0x2a0>)
 8000668:	f001 fe0d 	bl	8002286 <HAL_GPIO_WritePin>
			}

			if (isButtonPressed(2)) {
 800066c:	2002      	movs	r0, #2
 800066e:	f7ff fd6d 	bl	800014c <isButtonPressed>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	f000 80fb 	beq.w	8000870 <fsm_manual+0x278>
				status = MAN_RED_YELLOW;
 800067a:	4b82      	ldr	r3, [pc, #520]	; (8000884 <fsm_manual+0x28c>)
 800067c:	220c      	movs	r2, #12
 800067e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000686:	4883      	ldr	r0, [pc, #524]	; (8000894 <fsm_manual+0x29c>)
 8000688:	f001 fdfd 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2108      	movs	r1, #8
 8000690:	4881      	ldr	r0, [pc, #516]	; (8000898 <fsm_manual+0x2a0>)
 8000692:	f001 fdf8 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2120      	movs	r1, #32
 800069a:	487f      	ldr	r0, [pc, #508]	; (8000898 <fsm_manual+0x2a0>)
 800069c:	f001 fdf3 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2110      	movs	r1, #16
 80006a4:	487c      	ldr	r0, [pc, #496]	; (8000898 <fsm_manual+0x2a0>)
 80006a6:	f001 fdee 	bl	8002286 <HAL_GPIO_WritePin>
				setTimer1(60000);
 80006aa:	f64e 2060 	movw	r0, #60000	; 0xea60
 80006ae:	f001 f967 	bl	8001980 <setTimer1>
			}
			break;
 80006b2:	e0dd      	b.n	8000870 <fsm_manual+0x278>
		case MAN_RED_YELLOW:
			if(timer1_flag==1) {
 80006b4:	4b74      	ldr	r3, [pc, #464]	; (8000888 <fsm_manual+0x290>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d121      	bne.n	8000700 <fsm_manual+0x108>
				status = AUTO_GREEN_RED;
 80006bc:	4b71      	ldr	r3, [pc, #452]	; (8000884 <fsm_manual+0x28c>)
 80006be:	2204      	movs	r2, #4
 80006c0:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 80006c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c6:	f001 f95b 	bl	8001980 <setTimer1>
				counter = timer_green1;
 80006ca:	4b74      	ldr	r3, [pc, #464]	; (800089c <fsm_manual+0x2a4>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a70      	ldr	r2, [pc, #448]	; (8000890 <fsm_manual+0x298>)
 80006d0:	6013      	str	r3, [r2, #0]
				displayCounter();
 80006d2:	f7ff fe63 	bl	800039c <displayCounter>
				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006dc:	486d      	ldr	r0, [pc, #436]	; (8000894 <fsm_manual+0x29c>)
 80006de:	f001 fdd2 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2108      	movs	r1, #8
 80006e6:	486c      	ldr	r0, [pc, #432]	; (8000898 <fsm_manual+0x2a0>)
 80006e8:	f001 fdcd 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2120      	movs	r1, #32
 80006f0:	4869      	ldr	r0, [pc, #420]	; (8000898 <fsm_manual+0x2a0>)
 80006f2:	f001 fdc8 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2110      	movs	r1, #16
 80006fa:	4867      	ldr	r0, [pc, #412]	; (8000898 <fsm_manual+0x2a0>)
 80006fc:	f001 fdc3 	bl	8002286 <HAL_GPIO_WritePin>
			}

			if (isButtonPressed(2)) {
 8000700:	2002      	movs	r0, #2
 8000702:	f7ff fd23 	bl	800014c <isButtonPressed>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	f000 80b3 	beq.w	8000874 <fsm_manual+0x27c>
				status = MAN_GREEN_RED;
 800070e:	4b5d      	ldr	r3, [pc, #372]	; (8000884 <fsm_manual+0x28c>)
 8000710:	220d      	movs	r2, #13
 8000712:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071a:	485e      	ldr	r0, [pc, #376]	; (8000894 <fsm_manual+0x29c>)
 800071c:	f001 fdb3 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2108      	movs	r1, #8
 8000724:	485c      	ldr	r0, [pc, #368]	; (8000898 <fsm_manual+0x2a0>)
 8000726:	f001 fdae 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2120      	movs	r1, #32
 800072e:	485a      	ldr	r0, [pc, #360]	; (8000898 <fsm_manual+0x2a0>)
 8000730:	f001 fda9 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2110      	movs	r1, #16
 8000738:	4857      	ldr	r0, [pc, #348]	; (8000898 <fsm_manual+0x2a0>)
 800073a:	f001 fda4 	bl	8002286 <HAL_GPIO_WritePin>
				setTimer1(60000);
 800073e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000742:	f001 f91d 	bl	8001980 <setTimer1>
			}
			break;
 8000746:	e095      	b.n	8000874 <fsm_manual+0x27c>
		case MAN_GREEN_RED:
			if(timer1_flag==1) {
 8000748:	4b4f      	ldr	r3, [pc, #316]	; (8000888 <fsm_manual+0x290>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d121      	bne.n	8000794 <fsm_manual+0x19c>
				status = AUTO_YELLOW_RED;
 8000750:	4b4c      	ldr	r3, [pc, #304]	; (8000884 <fsm_manual+0x28c>)
 8000752:	2205      	movs	r2, #5
 8000754:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000756:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800075a:	f001 f911 	bl	8001980 <setTimer1>
				counter = timer_yellow1;
 800075e:	4b50      	ldr	r3, [pc, #320]	; (80008a0 <fsm_manual+0x2a8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a4b      	ldr	r2, [pc, #300]	; (8000890 <fsm_manual+0x298>)
 8000764:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000766:	f7ff fe19 	bl	800039c <displayCounter>
				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000770:	4848      	ldr	r0, [pc, #288]	; (8000894 <fsm_manual+0x29c>)
 8000772:	f001 fd88 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	2108      	movs	r1, #8
 800077a:	4847      	ldr	r0, [pc, #284]	; (8000898 <fsm_manual+0x2a0>)
 800077c:	f001 fd83 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8000780:	2201      	movs	r2, #1
 8000782:	2120      	movs	r1, #32
 8000784:	4844      	ldr	r0, [pc, #272]	; (8000898 <fsm_manual+0x2a0>)
 8000786:	f001 fd7e 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2110      	movs	r1, #16
 800078e:	4842      	ldr	r0, [pc, #264]	; (8000898 <fsm_manual+0x2a0>)
 8000790:	f001 fd79 	bl	8002286 <HAL_GPIO_WritePin>

			}

			if (isButtonPressed(2)) {
 8000794:	2002      	movs	r0, #2
 8000796:	f7ff fcd9 	bl	800014c <isButtonPressed>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d06b      	beq.n	8000878 <fsm_manual+0x280>
				status = MAN_YELLOW_RED;
 80007a0:	4b38      	ldr	r3, [pc, #224]	; (8000884 <fsm_manual+0x28c>)
 80007a2:	220e      	movs	r2, #14
 80007a4:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ac:	4839      	ldr	r0, [pc, #228]	; (8000894 <fsm_manual+0x29c>)
 80007ae:	f001 fd6a 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2108      	movs	r1, #8
 80007b6:	4838      	ldr	r0, [pc, #224]	; (8000898 <fsm_manual+0x2a0>)
 80007b8:	f001 fd65 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2120      	movs	r1, #32
 80007c0:	4835      	ldr	r0, [pc, #212]	; (8000898 <fsm_manual+0x2a0>)
 80007c2:	f001 fd60 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2110      	movs	r1, #16
 80007ca:	4833      	ldr	r0, [pc, #204]	; (8000898 <fsm_manual+0x2a0>)
 80007cc:	f001 fd5b 	bl	8002286 <HAL_GPIO_WritePin>
				setTimer1(60000);
 80007d0:	f64e 2060 	movw	r0, #60000	; 0xea60
 80007d4:	f001 f8d4 	bl	8001980 <setTimer1>
			}
			break;
 80007d8:	e04e      	b.n	8000878 <fsm_manual+0x280>
		case MAN_YELLOW_RED:
			if(timer1_flag==1) {
 80007da:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <fsm_manual+0x290>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d121      	bne.n	8000826 <fsm_manual+0x22e>
				status = AUTO_RED_GREEN;
 80007e2:	4b28      	ldr	r3, [pc, #160]	; (8000884 <fsm_manual+0x28c>)
 80007e4:	2202      	movs	r2, #2
 80007e6:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 80007e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ec:	f001 f8c8 	bl	8001980 <setTimer1>
				counter = timer_red1;
 80007f0:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <fsm_manual+0x2ac>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a26      	ldr	r2, [pc, #152]	; (8000890 <fsm_manual+0x298>)
 80007f6:	6013      	str	r3, [r2, #0]
				displayCounter();
 80007f8:	f7ff fdd0 	bl	800039c <displayCounter>
				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000802:	4824      	ldr	r0, [pc, #144]	; (8000894 <fsm_manual+0x29c>)
 8000804:	f001 fd3f 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2108      	movs	r1, #8
 800080c:	4822      	ldr	r0, [pc, #136]	; (8000898 <fsm_manual+0x2a0>)
 800080e:	f001 fd3a 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2120      	movs	r1, #32
 8000816:	4820      	ldr	r0, [pc, #128]	; (8000898 <fsm_manual+0x2a0>)
 8000818:	f001 fd35 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2110      	movs	r1, #16
 8000820:	481d      	ldr	r0, [pc, #116]	; (8000898 <fsm_manual+0x2a0>)
 8000822:	f001 fd30 	bl	8002286 <HAL_GPIO_WritePin>
			}

			if (isButtonPressed(2)) {
 8000826:	2002      	movs	r0, #2
 8000828:	f7ff fc90 	bl	800014c <isButtonPressed>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d024      	beq.n	800087c <fsm_manual+0x284>
				status = MAN_RED_GREEN;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <fsm_manual+0x28c>)
 8000834:	220b      	movs	r2, #11
 8000836:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083e:	4815      	ldr	r0, [pc, #84]	; (8000894 <fsm_manual+0x29c>)
 8000840:	f001 fd21 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2108      	movs	r1, #8
 8000848:	4813      	ldr	r0, [pc, #76]	; (8000898 <fsm_manual+0x2a0>)
 800084a:	f001 fd1c 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2120      	movs	r1, #32
 8000852:	4811      	ldr	r0, [pc, #68]	; (8000898 <fsm_manual+0x2a0>)
 8000854:	f001 fd17 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2110      	movs	r1, #16
 800085c:	480e      	ldr	r0, [pc, #56]	; (8000898 <fsm_manual+0x2a0>)
 800085e:	f001 fd12 	bl	8002286 <HAL_GPIO_WritePin>
				setTimer1(60000);
 8000862:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000866:	f001 f88b 	bl	8001980 <setTimer1>
			}
			break;
 800086a:	e007      	b.n	800087c <fsm_manual+0x284>
		default: //DO NOTHING
			break;
 800086c:	bf00      	nop
 800086e:	e006      	b.n	800087e <fsm_manual+0x286>
			break;
 8000870:	bf00      	nop
 8000872:	e004      	b.n	800087e <fsm_manual+0x286>
			break;
 8000874:	bf00      	nop
 8000876:	e002      	b.n	800087e <fsm_manual+0x286>
			break;
 8000878:	bf00      	nop
 800087a:	e000      	b.n	800087e <fsm_manual+0x286>
			break;
 800087c:	bf00      	nop
	}
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000100 	.word	0x20000100
 8000888:	2000011c 	.word	0x2000011c
 800088c:	20000018 	.word	0x20000018
 8000890:	20000108 	.word	0x20000108
 8000894:	40010800 	.word	0x40010800
 8000898:	40010c00 	.word	0x40010c00
 800089c:	20000008 	.word	0x20000008
 80008a0:	2000000c 	.word	0x2000000c
 80008a4:	20000004 	.word	0x20000004

080008a8 <fsm_pedestrian_run>:
#include "fsm_pedestrian.h"
int PWM = 0;
void fsm_pedestrian_run() {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	switch(pedestrianStatus) {
 80008ac:	4b8e      	ldr	r3, [pc, #568]	; (8000ae8 <fsm_pedestrian_run+0x240>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	f200 810e 	bhi.w	8000ad4 <fsm_pedestrian_run+0x22c>
 80008b8:	a201      	add	r2, pc, #4	; (adr r2, 80008c0 <fsm_pedestrian_run+0x18>)
 80008ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008be:	bf00      	nop
 80008c0:	080008d1 	.word	0x080008d1
 80008c4:	080008f1 	.word	0x080008f1
 80008c8:	080009af 	.word	0x080009af
 80008cc:	08000a39 	.word	0x08000a39
		case INIT:
			HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d6:	4885      	ldr	r0, [pc, #532]	; (8000aec <fsm_pedestrian_run+0x244>)
 80008d8:	f001 fcd5 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008e2:	4883      	ldr	r0, [pc, #524]	; (8000af0 <fsm_pedestrian_run+0x248>)
 80008e4:	f001 fccf 	bl	8002286 <HAL_GPIO_WritePin>
			pedestrianStatus = PED_NONE;
 80008e8:	4b7f      	ldr	r3, [pc, #508]	; (8000ae8 <fsm_pedestrian_run+0x240>)
 80008ea:	2202      	movs	r2, #2
 80008ec:	601a      	str	r2, [r3, #0]
			break;
 80008ee:	e0f8      	b.n	8000ae2 <fsm_pedestrian_run+0x23a>
		case PED_NONE:
			if(isButtonPressed(0)) {
 80008f0:	2000      	movs	r0, #0
 80008f2:	f7ff fc2b 	bl	800014c <isButtonPressed>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	f000 80ed 	beq.w	8000ad8 <fsm_pedestrian_run+0x230>
				if(status == AUTO_RED_GREEN || status == AUTO_RED_YELLOW) {
 80008fe:	4b7d      	ldr	r3, [pc, #500]	; (8000af4 <fsm_pedestrian_run+0x24c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b02      	cmp	r3, #2
 8000904:	d003      	beq.n	800090e <fsm_pedestrian_run+0x66>
 8000906:	4b7b      	ldr	r3, [pc, #492]	; (8000af4 <fsm_pedestrian_run+0x24c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b03      	cmp	r3, #3
 800090c:	d112      	bne.n	8000934 <fsm_pedestrian_run+0x8c>
					pedestrianStatus = PED_GREEN;
 800090e:	4b76      	ldr	r3, [pc, #472]	; (8000ae8 <fsm_pedestrian_run+0x240>)
 8000910:	2204      	movs	r2, #4
 8000912:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800091a:	4874      	ldr	r0, [pc, #464]	; (8000aec <fsm_pedestrian_run+0x244>)
 800091c:	f001 fcb3 	bl	8002286 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000926:	4872      	ldr	r0, [pc, #456]	; (8000af0 <fsm_pedestrian_run+0x248>)
 8000928:	f001 fcad 	bl	8002286 <HAL_GPIO_WritePin>
					setTimer2(250);
 800092c:	20fa      	movs	r0, #250	; 0xfa
 800092e:	f001 f843 	bl	80019b8 <setTimer2>
 8000932:	e03b      	b.n	80009ac <fsm_pedestrian_run+0x104>
				}else if(status == MAN_RED_GREEN || status == MAN_RED_YELLOW ) {
 8000934:	4b6f      	ldr	r3, [pc, #444]	; (8000af4 <fsm_pedestrian_run+0x24c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b0b      	cmp	r3, #11
 800093a:	d003      	beq.n	8000944 <fsm_pedestrian_run+0x9c>
 800093c:	4b6d      	ldr	r3, [pc, #436]	; (8000af4 <fsm_pedestrian_run+0x24c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b0c      	cmp	r3, #12
 8000942:	d112      	bne.n	800096a <fsm_pedestrian_run+0xc2>
					pedestrianStatus = PED_GREEN;
 8000944:	4b68      	ldr	r3, [pc, #416]	; (8000ae8 <fsm_pedestrian_run+0x240>)
 8000946:	2204      	movs	r2, #4
 8000948:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000950:	4866      	ldr	r0, [pc, #408]	; (8000aec <fsm_pedestrian_run+0x244>)
 8000952:	f001 fc98 	bl	8002286 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 7180 	mov.w	r1, #256	; 0x100
 800095c:	4864      	ldr	r0, [pc, #400]	; (8000af0 <fsm_pedestrian_run+0x248>)
 800095e:	f001 fc92 	bl	8002286 <HAL_GPIO_WritePin>
					setTimer2(0);
 8000962:	2000      	movs	r0, #0
 8000964:	f001 f828 	bl	80019b8 <setTimer2>
 8000968:	e020      	b.n	80009ac <fsm_pedestrian_run+0x104>
				}
				else if(status == AUTO_GREEN_RED || status == MAN_GREEN_RED || status == AUTO_YELLOW_RED || status == MAN_YELLOW_RED){
 800096a:	4b62      	ldr	r3, [pc, #392]	; (8000af4 <fsm_pedestrian_run+0x24c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b04      	cmp	r3, #4
 8000970:	d00c      	beq.n	800098c <fsm_pedestrian_run+0xe4>
 8000972:	4b60      	ldr	r3, [pc, #384]	; (8000af4 <fsm_pedestrian_run+0x24c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b0d      	cmp	r3, #13
 8000978:	d008      	beq.n	800098c <fsm_pedestrian_run+0xe4>
 800097a:	4b5e      	ldr	r3, [pc, #376]	; (8000af4 <fsm_pedestrian_run+0x24c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b05      	cmp	r3, #5
 8000980:	d004      	beq.n	800098c <fsm_pedestrian_run+0xe4>
 8000982:	4b5c      	ldr	r3, [pc, #368]	; (8000af4 <fsm_pedestrian_run+0x24c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b0e      	cmp	r3, #14
 8000988:	f040 80a6 	bne.w	8000ad8 <fsm_pedestrian_run+0x230>
					pedestrianStatus = PED_RED;
 800098c:	4b56      	ldr	r3, [pc, #344]	; (8000ae8 <fsm_pedestrian_run+0x240>)
 800098e:	2203      	movs	r2, #3
 8000990:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000998:	4854      	ldr	r0, [pc, #336]	; (8000aec <fsm_pedestrian_run+0x244>)
 800099a:	f001 fc74 	bl	8002286 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a4:	4852      	ldr	r0, [pc, #328]	; (8000af0 <fsm_pedestrian_run+0x248>)
 80009a6:	f001 fc6e 	bl	8002286 <HAL_GPIO_WritePin>
				}
			}
			break;
 80009aa:	e095      	b.n	8000ad8 <fsm_pedestrian_run+0x230>
 80009ac:	e094      	b.n	8000ad8 <fsm_pedestrian_run+0x230>
		case PED_RED:
			if(timer3_flag==1) {
 80009ae:	4b52      	ldr	r3, [pc, #328]	; (8000af8 <fsm_pedestrian_run+0x250>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d112      	bne.n	80009dc <fsm_pedestrian_run+0x134>
				timer3_flag = 0;
 80009b6:	4b50      	ldr	r3, [pc, #320]	; (8000af8 <fsm_pedestrian_run+0x250>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
				pedestrianStatus = PED_NONE;
 80009bc:	4b4a      	ldr	r3, [pc, #296]	; (8000ae8 <fsm_pedestrian_run+0x240>)
 80009be:	2202      	movs	r2, #2
 80009c0:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c8:	4848      	ldr	r0, [pc, #288]	; (8000aec <fsm_pedestrian_run+0x244>)
 80009ca:	f001 fc5c 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d4:	4846      	ldr	r0, [pc, #280]	; (8000af0 <fsm_pedestrian_run+0x248>)
 80009d6:	f001 fc56 	bl	8002286 <HAL_GPIO_WritePin>
				break;
 80009da:	e082      	b.n	8000ae2 <fsm_pedestrian_run+0x23a>
			}
			else if(status == AUTO_RED_GREEN) {
 80009dc:	4b45      	ldr	r3, [pc, #276]	; (8000af4 <fsm_pedestrian_run+0x24c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d112      	bne.n	8000a0a <fsm_pedestrian_run+0x162>
				pedestrianStatus = PED_GREEN;
 80009e4:	4b40      	ldr	r3, [pc, #256]	; (8000ae8 <fsm_pedestrian_run+0x240>)
 80009e6:	2204      	movs	r2, #4
 80009e8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f0:	483e      	ldr	r0, [pc, #248]	; (8000aec <fsm_pedestrian_run+0x244>)
 80009f2:	f001 fc48 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009fc:	483c      	ldr	r0, [pc, #240]	; (8000af0 <fsm_pedestrian_run+0x248>)
 80009fe:	f001 fc42 	bl	8002286 <HAL_GPIO_WritePin>
				setTimer2(250);
 8000a02:	20fa      	movs	r0, #250	; 0xfa
 8000a04:	f000 ffd8 	bl	80019b8 <setTimer2>
				pedestrianStatus = PED_GREEN;
				HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
				setTimer2(0);
			}
			break;
 8000a08:	e068      	b.n	8000adc <fsm_pedestrian_run+0x234>
			else if (status == MAN_RED_GREEN) {
 8000a0a:	4b3a      	ldr	r3, [pc, #232]	; (8000af4 <fsm_pedestrian_run+0x24c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b0b      	cmp	r3, #11
 8000a10:	d164      	bne.n	8000adc <fsm_pedestrian_run+0x234>
				pedestrianStatus = PED_GREEN;
 8000a12:	4b35      	ldr	r3, [pc, #212]	; (8000ae8 <fsm_pedestrian_run+0x240>)
 8000a14:	2204      	movs	r2, #4
 8000a16:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1e:	4833      	ldr	r0, [pc, #204]	; (8000aec <fsm_pedestrian_run+0x244>)
 8000a20:	f001 fc31 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2a:	4831      	ldr	r0, [pc, #196]	; (8000af0 <fsm_pedestrian_run+0x248>)
 8000a2c:	f001 fc2b 	bl	8002286 <HAL_GPIO_WritePin>
				setTimer2(0);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f000 ffc1 	bl	80019b8 <setTimer2>
			break;
 8000a36:	e051      	b.n	8000adc <fsm_pedestrian_run+0x234>
		case PED_GREEN:
			if(timer2_flag==1) {
 8000a38:	4b30      	ldr	r3, [pc, #192]	; (8000afc <fsm_pedestrian_run+0x254>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d121      	bne.n	8000a84 <fsm_pedestrian_run+0x1dc>
				if(PWM == 0) {
 8000a40:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <fsm_pedestrian_run+0x258>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d112      	bne.n	8000a6e <fsm_pedestrian_run+0x1c6>
					PWM = 63-63*counter/timer_red1;
 8000a48:	4b2e      	ldr	r3, [pc, #184]	; (8000b04 <fsm_pedestrian_run+0x25c>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	019b      	lsls	r3, r3, #6
 8000a50:	1a9a      	subs	r2, r3, r2
 8000a52:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <fsm_pedestrian_run+0x260>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a5a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000a5e:	4a28      	ldr	r2, [pc, #160]	; (8000b00 <fsm_pedestrian_run+0x258>)
 8000a60:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
 8000a62:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <fsm_pedestrian_run+0x258>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <fsm_pedestrian_run+0x264>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	635a      	str	r2, [r3, #52]	; 0x34
 8000a6c:	e007      	b.n	8000a7e <fsm_pedestrian_run+0x1d6>
				} else {
					PWM = 0;
 8000a6e:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <fsm_pedestrian_run+0x258>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
 8000a74:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <fsm_pedestrian_run+0x258>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <fsm_pedestrian_run+0x264>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	635a      	str	r2, [r3, #52]	; 0x34
				}
				setTimer2(250);
 8000a7e:	20fa      	movs	r0, #250	; 0xfa
 8000a80:	f000 ff9a 	bl	80019b8 <setTimer2>
			}
			if(status == AUTO_GREEN_RED || status == MAN_GREEN_RED || status == AUTO_YELLOW_RED || status == MAN_YELLOW_RED) {
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <fsm_pedestrian_run+0x24c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	d00b      	beq.n	8000aa4 <fsm_pedestrian_run+0x1fc>
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <fsm_pedestrian_run+0x24c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b0d      	cmp	r3, #13
 8000a92:	d007      	beq.n	8000aa4 <fsm_pedestrian_run+0x1fc>
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <fsm_pedestrian_run+0x24c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b05      	cmp	r3, #5
 8000a9a:	d003      	beq.n	8000aa4 <fsm_pedestrian_run+0x1fc>
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <fsm_pedestrian_run+0x24c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b0e      	cmp	r3, #14
 8000aa2:	d11d      	bne.n	8000ae0 <fsm_pedestrian_run+0x238>
				pedestrianStatus = PED_RED;
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <fsm_pedestrian_run+0x240>)
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	601a      	str	r2, [r3, #0]
				setTimer3(2000);
 8000aaa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000aae:	f000 ff9f 	bl	80019f0 <setTimer3>
				HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab8:	480c      	ldr	r0, [pc, #48]	; (8000aec <fsm_pedestrian_run+0x244>)
 8000aba:	f001 fbe4 	bl	8002286 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac4:	480a      	ldr	r0, [pc, #40]	; (8000af0 <fsm_pedestrian_run+0x248>)
 8000ac6:	f001 fbde 	bl	8002286 <HAL_GPIO_WritePin>
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,0);
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <fsm_pedestrian_run+0x264>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	635a      	str	r2, [r3, #52]	; 0x34
			}
			break;
 8000ad2:	e005      	b.n	8000ae0 <fsm_pedestrian_run+0x238>
		default:
			break;
 8000ad4:	bf00      	nop
 8000ad6:	e004      	b.n	8000ae2 <fsm_pedestrian_run+0x23a>
			break;
 8000ad8:	bf00      	nop
 8000ada:	e002      	b.n	8000ae2 <fsm_pedestrian_run+0x23a>
			break;
 8000adc:	bf00      	nop
 8000ade:	e000      	b.n	8000ae2 <fsm_pedestrian_run+0x23a>
			break;
 8000ae0:	bf00      	nop
	}
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000104 	.word	0x20000104
 8000aec:	40010c00 	.word	0x40010c00
 8000af0:	40010800 	.word	0x40010800
 8000af4:	20000100 	.word	0x20000100
 8000af8:	2000012c 	.word	0x2000012c
 8000afc:	20000124 	.word	0x20000124
 8000b00:	200000fc 	.word	0x200000fc
 8000b04:	20000108 	.word	0x20000108
 8000b08:	20000004 	.word	0x20000004
 8000b0c:	2000013c 	.word	0x2000013c

08000b10 <fsm_tuning>:
#include "fsm_tuning.h"

void fsm_tuning() {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	switch(status) {
 8000b14:	4baa      	ldr	r3, [pc, #680]	; (8000dc0 <fsm_tuning+0x2b0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3b15      	subs	r3, #21
 8000b1a:	2b05      	cmp	r3, #5
 8000b1c:	f200 83c0 	bhi.w	80012a0 <fsm_tuning+0x790>
 8000b20:	a201      	add	r2, pc, #4	; (adr r2, 8000b28 <fsm_tuning+0x18>)
 8000b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b26:	bf00      	nop
 8000b28:	08000b41 	.word	0x08000b41
 8000b2c:	08000c81 	.word	0x08000c81
 8000b30:	08000ded 	.word	0x08000ded
 8000b34:	08000f0b 	.word	0x08000f0b
 8000b38:	08001055 	.word	0x08001055
 8000b3c:	0800117d 	.word	0x0800117d
	case TUNING_RED1:
		if(timer1_flag==1){
 8000b40:	4ba0      	ldr	r3, [pc, #640]	; (8000dc4 <fsm_tuning+0x2b4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d10b      	bne.n	8000b60 <fsm_tuning+0x50>
			timer1_flag = 0;
 8000b48:	4b9e      	ldr	r3, [pc, #632]	; (8000dc4 <fsm_tuning+0x2b4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000b4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b52:	f000 ff15 	bl	8001980 <setTimer1>
			HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 8000b56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b5a:	489b      	ldr	r0, [pc, #620]	; (8000dc8 <fsm_tuning+0x2b8>)
 8000b5c:	f001 fbab 	bl	80022b6 <HAL_GPIO_TogglePin>
		}
		if(isButtonPressed(1)) {
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff faf3 	bl	800014c <isButtonPressed>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d036      	beq.n	8000bda <fsm_tuning+0xca>
			status = AUTO_RED_GREEN;
 8000b6c:	4b94      	ldr	r3, [pc, #592]	; (8000dc0 <fsm_tuning+0x2b0>)
 8000b6e:	2202      	movs	r2, #2
 8000b70:	601a      	str	r2, [r3, #0]
			timer_red1 = counter;
 8000b72:	4b96      	ldr	r3, [pc, #600]	; (8000dcc <fsm_tuning+0x2bc>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a96      	ldr	r2, [pc, #600]	; (8000dd0 <fsm_tuning+0x2c0>)
 8000b78:	6013      	str	r3, [r2, #0]
			if(timer_red1 <= timer_yellow2) timer_yellow2 = 1;
 8000b7a:	4b95      	ldr	r3, [pc, #596]	; (8000dd0 <fsm_tuning+0x2c0>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b95      	ldr	r3, [pc, #596]	; (8000dd4 <fsm_tuning+0x2c4>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	dc02      	bgt.n	8000b8c <fsm_tuning+0x7c>
 8000b86:	4b93      	ldr	r3, [pc, #588]	; (8000dd4 <fsm_tuning+0x2c4>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	601a      	str	r2, [r3, #0]
			timer_green2 = timer_red1 - timer_yellow2;
 8000b8c:	4b90      	ldr	r3, [pc, #576]	; (8000dd0 <fsm_tuning+0x2c0>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b90      	ldr	r3, [pc, #576]	; (8000dd4 <fsm_tuning+0x2c4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	4a90      	ldr	r2, [pc, #576]	; (8000dd8 <fsm_tuning+0x2c8>)
 8000b98:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000b9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b9e:	f000 feef 	bl	8001980 <setTimer1>
			counter = timer_red1;
 8000ba2:	4b8b      	ldr	r3, [pc, #556]	; (8000dd0 <fsm_tuning+0x2c0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a89      	ldr	r2, [pc, #548]	; (8000dcc <fsm_tuning+0x2bc>)
 8000ba8:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8000baa:	2201      	movs	r2, #1
 8000bac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb0:	4885      	ldr	r0, [pc, #532]	; (8000dc8 <fsm_tuning+0x2b8>)
 8000bb2:	f001 fb68 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2108      	movs	r1, #8
 8000bba:	4888      	ldr	r0, [pc, #544]	; (8000ddc <fsm_tuning+0x2cc>)
 8000bbc:	f001 fb63 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	4885      	ldr	r0, [pc, #532]	; (8000ddc <fsm_tuning+0x2cc>)
 8000bc6:	f001 fb5e 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2110      	movs	r1, #16
 8000bce:	4883      	ldr	r0, [pc, #524]	; (8000ddc <fsm_tuning+0x2cc>)
 8000bd0:	f001 fb59 	bl	8002286 <HAL_GPIO_WritePin>
			displayCounter();
 8000bd4:	f7ff fbe2 	bl	800039c <displayCounter>
			break;
 8000bd8:	e36f      	b.n	80012ba <fsm_tuning+0x7aa>
		}
		if(isButtonPressed(2)) {
 8000bda:	2002      	movs	r0, #2
 8000bdc:	f7ff fab6 	bl	800014c <isButtonPressed>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d036      	beq.n	8000c54 <fsm_tuning+0x144>
			status = TUNING_RED2;
 8000be6:	4b76      	ldr	r3, [pc, #472]	; (8000dc0 <fsm_tuning+0x2b0>)
 8000be8:	2216      	movs	r2, #22
 8000bea:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000bec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf0:	f000 fec6 	bl	8001980 <setTimer1>
			timer_red1 = counter;
 8000bf4:	4b75      	ldr	r3, [pc, #468]	; (8000dcc <fsm_tuning+0x2bc>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a75      	ldr	r2, [pc, #468]	; (8000dd0 <fsm_tuning+0x2c0>)
 8000bfa:	6013      	str	r3, [r2, #0]
			if(timer_red1 <= timer_yellow2) timer_yellow2 = 1;
 8000bfc:	4b74      	ldr	r3, [pc, #464]	; (8000dd0 <fsm_tuning+0x2c0>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b74      	ldr	r3, [pc, #464]	; (8000dd4 <fsm_tuning+0x2c4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dc02      	bgt.n	8000c0e <fsm_tuning+0xfe>
 8000c08:	4b72      	ldr	r3, [pc, #456]	; (8000dd4 <fsm_tuning+0x2c4>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	601a      	str	r2, [r3, #0]
			timer_green2 = timer_red1 - timer_yellow2;
 8000c0e:	4b70      	ldr	r3, [pc, #448]	; (8000dd0 <fsm_tuning+0x2c0>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4b70      	ldr	r3, [pc, #448]	; (8000dd4 <fsm_tuning+0x2c4>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	4a6f      	ldr	r2, [pc, #444]	; (8000dd8 <fsm_tuning+0x2c8>)
 8000c1a:	6013      	str	r3, [r2, #0]
			counter = timer_red2;
 8000c1c:	4b70      	ldr	r3, [pc, #448]	; (8000de0 <fsm_tuning+0x2d0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a6a      	ldr	r2, [pc, #424]	; (8000dcc <fsm_tuning+0x2bc>)
 8000c22:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c2a:	4867      	ldr	r0, [pc, #412]	; (8000dc8 <fsm_tuning+0x2b8>)
 8000c2c:	f001 fb2b 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2108      	movs	r1, #8
 8000c34:	4869      	ldr	r0, [pc, #420]	; (8000ddc <fsm_tuning+0x2cc>)
 8000c36:	f001 fb26 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2120      	movs	r1, #32
 8000c3e:	4867      	ldr	r0, [pc, #412]	; (8000ddc <fsm_tuning+0x2cc>)
 8000c40:	f001 fb21 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2110      	movs	r1, #16
 8000c48:	4864      	ldr	r0, [pc, #400]	; (8000ddc <fsm_tuning+0x2cc>)
 8000c4a:	f001 fb1c 	bl	8002286 <HAL_GPIO_WritePin>
			displayCounter();
 8000c4e:	f7ff fba5 	bl	800039c <displayCounter>
			break;
 8000c52:	e332      	b.n	80012ba <fsm_tuning+0x7aa>
		}
		if(isButtonPressed(3)) {
 8000c54:	2003      	movs	r0, #3
 8000c56:	f7ff fa79 	bl	800014c <isButtonPressed>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f000 8321 	beq.w	80012a4 <fsm_tuning+0x794>
			counter++;
 8000c62:	4b5a      	ldr	r3, [pc, #360]	; (8000dcc <fsm_tuning+0x2bc>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	4a58      	ldr	r2, [pc, #352]	; (8000dcc <fsm_tuning+0x2bc>)
 8000c6a:	6013      	str	r3, [r2, #0]
			if(counter > 99) {
 8000c6c:	4b57      	ldr	r3, [pc, #348]	; (8000dcc <fsm_tuning+0x2bc>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b63      	cmp	r3, #99	; 0x63
 8000c72:	dd02      	ble.n	8000c7a <fsm_tuning+0x16a>
				counter = 2;
 8000c74:	4b55      	ldr	r3, [pc, #340]	; (8000dcc <fsm_tuning+0x2bc>)
 8000c76:	2202      	movs	r2, #2
 8000c78:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000c7a:	f7ff fb8f 	bl	800039c <displayCounter>
		}
		break;
 8000c7e:	e311      	b.n	80012a4 <fsm_tuning+0x794>
	case TUNING_RED2:
		if(timer1_flag==1) {
 8000c80:	4b50      	ldr	r3, [pc, #320]	; (8000dc4 <fsm_tuning+0x2b4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d10a      	bne.n	8000c9e <fsm_tuning+0x18e>
			timer1_flag = 0;
 8000c88:	4b4e      	ldr	r3, [pc, #312]	; (8000dc4 <fsm_tuning+0x2b4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000c8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c92:	f000 fe75 	bl	8001980 <setTimer1>
			HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 8000c96:	2120      	movs	r1, #32
 8000c98:	4850      	ldr	r0, [pc, #320]	; (8000ddc <fsm_tuning+0x2cc>)
 8000c9a:	f001 fb0c 	bl	80022b6 <HAL_GPIO_TogglePin>
		}
		if(isButtonPressed(1)) {
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff fa54 	bl	800014c <isButtonPressed>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d036      	beq.n	8000d18 <fsm_tuning+0x208>
			timer_red2 = counter;
 8000caa:	4b48      	ldr	r3, [pc, #288]	; (8000dcc <fsm_tuning+0x2bc>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a4c      	ldr	r2, [pc, #304]	; (8000de0 <fsm_tuning+0x2d0>)
 8000cb0:	6013      	str	r3, [r2, #0]
			if(timer_red2 <= timer_yellow1) timer_yellow1 = 1;
 8000cb2:	4b4b      	ldr	r3, [pc, #300]	; (8000de0 <fsm_tuning+0x2d0>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4b4b      	ldr	r3, [pc, #300]	; (8000de4 <fsm_tuning+0x2d4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	dc02      	bgt.n	8000cc4 <fsm_tuning+0x1b4>
 8000cbe:	4b49      	ldr	r3, [pc, #292]	; (8000de4 <fsm_tuning+0x2d4>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]
			timer_green1 = timer_red2 - timer_yellow1;
 8000cc4:	4b46      	ldr	r3, [pc, #280]	; (8000de0 <fsm_tuning+0x2d0>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b46      	ldr	r3, [pc, #280]	; (8000de4 <fsm_tuning+0x2d4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	4a46      	ldr	r2, [pc, #280]	; (8000de8 <fsm_tuning+0x2d8>)
 8000cd0:	6013      	str	r3, [r2, #0]
			status = AUTO_RED_GREEN;
 8000cd2:	4b3b      	ldr	r3, [pc, #236]	; (8000dc0 <fsm_tuning+0x2b0>)
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000cd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cdc:	f000 fe50 	bl	8001980 <setTimer1>
			counter = timer_red1;
 8000ce0:	4b3b      	ldr	r3, [pc, #236]	; (8000dd0 <fsm_tuning+0x2c0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a39      	ldr	r2, [pc, #228]	; (8000dcc <fsm_tuning+0x2bc>)
 8000ce6:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cee:	4836      	ldr	r0, [pc, #216]	; (8000dc8 <fsm_tuning+0x2b8>)
 8000cf0:	f001 fac9 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2108      	movs	r1, #8
 8000cf8:	4838      	ldr	r0, [pc, #224]	; (8000ddc <fsm_tuning+0x2cc>)
 8000cfa:	f001 fac4 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2120      	movs	r1, #32
 8000d02:	4836      	ldr	r0, [pc, #216]	; (8000ddc <fsm_tuning+0x2cc>)
 8000d04:	f001 fabf 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2110      	movs	r1, #16
 8000d0c:	4833      	ldr	r0, [pc, #204]	; (8000ddc <fsm_tuning+0x2cc>)
 8000d0e:	f001 faba 	bl	8002286 <HAL_GPIO_WritePin>
			displayCounter();
 8000d12:	f7ff fb43 	bl	800039c <displayCounter>
			break;
 8000d16:	e2d0      	b.n	80012ba <fsm_tuning+0x7aa>
		}
		if(isButtonPressed(2)) {
 8000d18:	2002      	movs	r0, #2
 8000d1a:	f7ff fa17 	bl	800014c <isButtonPressed>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d036      	beq.n	8000d92 <fsm_tuning+0x282>
			status = TUNING_GREEN1;
 8000d24:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <fsm_tuning+0x2b0>)
 8000d26:	2217      	movs	r2, #23
 8000d28:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000d2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d2e:	f000 fe27 	bl	8001980 <setTimer1>
			timer_red2 = counter;
 8000d32:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <fsm_tuning+0x2bc>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a2a      	ldr	r2, [pc, #168]	; (8000de0 <fsm_tuning+0x2d0>)
 8000d38:	6013      	str	r3, [r2, #0]
			if(timer_red2 <= timer_yellow1) timer_yellow1 = 1;
 8000d3a:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <fsm_tuning+0x2d0>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <fsm_tuning+0x2d4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	dc02      	bgt.n	8000d4c <fsm_tuning+0x23c>
 8000d46:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <fsm_tuning+0x2d4>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
			timer_green1 = timer_red2 - timer_yellow1;
 8000d4c:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <fsm_tuning+0x2d0>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <fsm_tuning+0x2d4>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	4a24      	ldr	r2, [pc, #144]	; (8000de8 <fsm_tuning+0x2d8>)
 8000d58:	6013      	str	r3, [r2, #0]
			counter = timer_green1;
 8000d5a:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <fsm_tuning+0x2d8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <fsm_tuning+0x2bc>)
 8000d60:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d68:	4817      	ldr	r0, [pc, #92]	; (8000dc8 <fsm_tuning+0x2b8>)
 8000d6a:	f001 fa8c 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2108      	movs	r1, #8
 8000d72:	481a      	ldr	r0, [pc, #104]	; (8000ddc <fsm_tuning+0x2cc>)
 8000d74:	f001 fa87 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	4817      	ldr	r0, [pc, #92]	; (8000ddc <fsm_tuning+0x2cc>)
 8000d7e:	f001 fa82 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2110      	movs	r1, #16
 8000d86:	4815      	ldr	r0, [pc, #84]	; (8000ddc <fsm_tuning+0x2cc>)
 8000d88:	f001 fa7d 	bl	8002286 <HAL_GPIO_WritePin>
			displayCounter();
 8000d8c:	f7ff fb06 	bl	800039c <displayCounter>
			break;
 8000d90:	e293      	b.n	80012ba <fsm_tuning+0x7aa>
		}
		if(isButtonPressed(3)) {
 8000d92:	2003      	movs	r0, #3
 8000d94:	f7ff f9da 	bl	800014c <isButtonPressed>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 8284 	beq.w	80012a8 <fsm_tuning+0x798>
			counter++;
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <fsm_tuning+0x2bc>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <fsm_tuning+0x2bc>)
 8000da8:	6013      	str	r3, [r2, #0]
			if(counter > 99) {
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <fsm_tuning+0x2bc>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b63      	cmp	r3, #99	; 0x63
 8000db0:	dd02      	ble.n	8000db8 <fsm_tuning+0x2a8>
				counter = 2;
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <fsm_tuning+0x2bc>)
 8000db4:	2202      	movs	r2, #2
 8000db6:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000db8:	f7ff faf0 	bl	800039c <displayCounter>
		}
		break;
 8000dbc:	e274      	b.n	80012a8 <fsm_tuning+0x798>
 8000dbe:	bf00      	nop
 8000dc0:	20000100 	.word	0x20000100
 8000dc4:	2000011c 	.word	0x2000011c
 8000dc8:	40010800 	.word	0x40010800
 8000dcc:	20000108 	.word	0x20000108
 8000dd0:	20000004 	.word	0x20000004
 8000dd4:	20000018 	.word	0x20000018
 8000dd8:	20000014 	.word	0x20000014
 8000ddc:	40010c00 	.word	0x40010c00
 8000de0:	20000010 	.word	0x20000010
 8000de4:	2000000c 	.word	0x2000000c
 8000de8:	20000008 	.word	0x20000008
	case TUNING_GREEN1:
		if(timer1_flag==1) {
 8000dec:	4b8e      	ldr	r3, [pc, #568]	; (8001028 <fsm_tuning+0x518>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d10a      	bne.n	8000e0a <fsm_tuning+0x2fa>
			timer1_flag = 0;
 8000df4:	4b8c      	ldr	r3, [pc, #560]	; (8001028 <fsm_tuning+0x518>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000dfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dfe:	f000 fdbf 	bl	8001980 <setTimer1>
			HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 8000e02:	2108      	movs	r1, #8
 8000e04:	4889      	ldr	r0, [pc, #548]	; (800102c <fsm_tuning+0x51c>)
 8000e06:	f001 fa56 	bl	80022b6 <HAL_GPIO_TogglePin>
		}
		if(isButtonPressed(1)) {
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f7ff f99e 	bl	800014c <isButtonPressed>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d02d      	beq.n	8000e72 <fsm_tuning+0x362>
			timer_green1 = counter;
 8000e16:	4b86      	ldr	r3, [pc, #536]	; (8001030 <fsm_tuning+0x520>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a86      	ldr	r2, [pc, #536]	; (8001034 <fsm_tuning+0x524>)
 8000e1c:	6013      	str	r3, [r2, #0]
			timer_yellow1 = timer_red2 - timer_green1;
 8000e1e:	4b86      	ldr	r3, [pc, #536]	; (8001038 <fsm_tuning+0x528>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4b84      	ldr	r3, [pc, #528]	; (8001034 <fsm_tuning+0x524>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	4a84      	ldr	r2, [pc, #528]	; (800103c <fsm_tuning+0x52c>)
 8000e2a:	6013      	str	r3, [r2, #0]
			status = AUTO_RED_GREEN;
 8000e2c:	4b84      	ldr	r3, [pc, #528]	; (8001040 <fsm_tuning+0x530>)
 8000e2e:	2202      	movs	r2, #2
 8000e30:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000e32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e36:	f000 fda3 	bl	8001980 <setTimer1>
			counter = timer_red1;
 8000e3a:	4b82      	ldr	r3, [pc, #520]	; (8001044 <fsm_tuning+0x534>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a7c      	ldr	r2, [pc, #496]	; (8001030 <fsm_tuning+0x520>)
 8000e40:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e48:	487f      	ldr	r0, [pc, #508]	; (8001048 <fsm_tuning+0x538>)
 8000e4a:	f001 fa1c 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2108      	movs	r1, #8
 8000e52:	4876      	ldr	r0, [pc, #472]	; (800102c <fsm_tuning+0x51c>)
 8000e54:	f001 fa17 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2120      	movs	r1, #32
 8000e5c:	4873      	ldr	r0, [pc, #460]	; (800102c <fsm_tuning+0x51c>)
 8000e5e:	f001 fa12 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2110      	movs	r1, #16
 8000e66:	4871      	ldr	r0, [pc, #452]	; (800102c <fsm_tuning+0x51c>)
 8000e68:	f001 fa0d 	bl	8002286 <HAL_GPIO_WritePin>
			displayCounter();
 8000e6c:	f7ff fa96 	bl	800039c <displayCounter>
			break;
 8000e70:	e223      	b.n	80012ba <fsm_tuning+0x7aa>
		}
		if(isButtonPressed(2)) {
 8000e72:	2002      	movs	r0, #2
 8000e74:	f7ff f96a 	bl	800014c <isButtonPressed>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d02d      	beq.n	8000eda <fsm_tuning+0x3ca>
			status = TUNING_GREEN2;
 8000e7e:	4b70      	ldr	r3, [pc, #448]	; (8001040 <fsm_tuning+0x530>)
 8000e80:	2218      	movs	r2, #24
 8000e82:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000e84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e88:	f000 fd7a 	bl	8001980 <setTimer1>
			timer_green1 = counter;
 8000e8c:	4b68      	ldr	r3, [pc, #416]	; (8001030 <fsm_tuning+0x520>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a68      	ldr	r2, [pc, #416]	; (8001034 <fsm_tuning+0x524>)
 8000e92:	6013      	str	r3, [r2, #0]
			timer_yellow1 = timer_red2 - timer_green1;
 8000e94:	4b68      	ldr	r3, [pc, #416]	; (8001038 <fsm_tuning+0x528>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b66      	ldr	r3, [pc, #408]	; (8001034 <fsm_tuning+0x524>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	4a67      	ldr	r2, [pc, #412]	; (800103c <fsm_tuning+0x52c>)
 8000ea0:	6013      	str	r3, [r2, #0]
			counter = timer_green2;
 8000ea2:	4b6a      	ldr	r3, [pc, #424]	; (800104c <fsm_tuning+0x53c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a62      	ldr	r2, [pc, #392]	; (8001030 <fsm_tuning+0x520>)
 8000ea8:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb0:	4865      	ldr	r0, [pc, #404]	; (8001048 <fsm_tuning+0x538>)
 8000eb2:	f001 f9e8 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2108      	movs	r1, #8
 8000eba:	485c      	ldr	r0, [pc, #368]	; (800102c <fsm_tuning+0x51c>)
 8000ebc:	f001 f9e3 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2120      	movs	r1, #32
 8000ec4:	4859      	ldr	r0, [pc, #356]	; (800102c <fsm_tuning+0x51c>)
 8000ec6:	f001 f9de 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2110      	movs	r1, #16
 8000ece:	4857      	ldr	r0, [pc, #348]	; (800102c <fsm_tuning+0x51c>)
 8000ed0:	f001 f9d9 	bl	8002286 <HAL_GPIO_WritePin>
			displayCounter();
 8000ed4:	f7ff fa62 	bl	800039c <displayCounter>
			break;
 8000ed8:	e1ef      	b.n	80012ba <fsm_tuning+0x7aa>
		}
		if(isButtonPressed(3)) {
 8000eda:	2003      	movs	r0, #3
 8000edc:	f7ff f936 	bl	800014c <isButtonPressed>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 81e2 	beq.w	80012ac <fsm_tuning+0x79c>
			counter++;
 8000ee8:	4b51      	ldr	r3, [pc, #324]	; (8001030 <fsm_tuning+0x520>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	4a50      	ldr	r2, [pc, #320]	; (8001030 <fsm_tuning+0x520>)
 8000ef0:	6013      	str	r3, [r2, #0]
			if(counter > timer_red2 - 1){
 8000ef2:	4b51      	ldr	r3, [pc, #324]	; (8001038 <fsm_tuning+0x528>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	4b4e      	ldr	r3, [pc, #312]	; (8001030 <fsm_tuning+0x520>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	dc02      	bgt.n	8000f04 <fsm_tuning+0x3f4>
				counter = 1;
 8000efe:	4b4c      	ldr	r3, [pc, #304]	; (8001030 <fsm_tuning+0x520>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000f04:	f7ff fa4a 	bl	800039c <displayCounter>
		}
		break;
 8000f08:	e1d0      	b.n	80012ac <fsm_tuning+0x79c>
	case TUNING_GREEN2:
		if(timer1_flag==1) {
 8000f0a:	4b47      	ldr	r3, [pc, #284]	; (8001028 <fsm_tuning+0x518>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d10a      	bne.n	8000f28 <fsm_tuning+0x418>
			timer1_flag = 0;
 8000f12:	4b45      	ldr	r3, [pc, #276]	; (8001028 <fsm_tuning+0x518>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000f18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f1c:	f000 fd30 	bl	8001980 <setTimer1>
			HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 8000f20:	2110      	movs	r1, #16
 8000f22:	4842      	ldr	r0, [pc, #264]	; (800102c <fsm_tuning+0x51c>)
 8000f24:	f001 f9c7 	bl	80022b6 <HAL_GPIO_TogglePin>
		}
		if(isButtonPressed(1)) {
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f7ff f90f 	bl	800014c <isButtonPressed>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d02d      	beq.n	8000f90 <fsm_tuning+0x480>
			status = AUTO_RED_GREEN;
 8000f34:	4b42      	ldr	r3, [pc, #264]	; (8001040 <fsm_tuning+0x530>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	601a      	str	r2, [r3, #0]
			timer_green2 = counter;
 8000f3a:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <fsm_tuning+0x520>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a43      	ldr	r2, [pc, #268]	; (800104c <fsm_tuning+0x53c>)
 8000f40:	6013      	str	r3, [r2, #0]
			timer_yellow2 = timer_red1 - timer_green2;
 8000f42:	4b40      	ldr	r3, [pc, #256]	; (8001044 <fsm_tuning+0x534>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4b41      	ldr	r3, [pc, #260]	; (800104c <fsm_tuning+0x53c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	4a40      	ldr	r2, [pc, #256]	; (8001050 <fsm_tuning+0x540>)
 8000f4e:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000f50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f54:	f000 fd14 	bl	8001980 <setTimer1>
			counter = timer_red1;
 8000f58:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <fsm_tuning+0x534>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a34      	ldr	r2, [pc, #208]	; (8001030 <fsm_tuning+0x520>)
 8000f5e:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f66:	4838      	ldr	r0, [pc, #224]	; (8001048 <fsm_tuning+0x538>)
 8000f68:	f001 f98d 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2108      	movs	r1, #8
 8000f70:	482e      	ldr	r0, [pc, #184]	; (800102c <fsm_tuning+0x51c>)
 8000f72:	f001 f988 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2120      	movs	r1, #32
 8000f7a:	482c      	ldr	r0, [pc, #176]	; (800102c <fsm_tuning+0x51c>)
 8000f7c:	f001 f983 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2110      	movs	r1, #16
 8000f84:	4829      	ldr	r0, [pc, #164]	; (800102c <fsm_tuning+0x51c>)
 8000f86:	f001 f97e 	bl	8002286 <HAL_GPIO_WritePin>
			displayCounter();
 8000f8a:	f7ff fa07 	bl	800039c <displayCounter>
			break;
 8000f8e:	e194      	b.n	80012ba <fsm_tuning+0x7aa>
		}
		if(isButtonPressed(2)) {
 8000f90:	2002      	movs	r0, #2
 8000f92:	f7ff f8db 	bl	800014c <isButtonPressed>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d02d      	beq.n	8000ff8 <fsm_tuning+0x4e8>
			status = TUNING_YELLOW1;
 8000f9c:	4b28      	ldr	r3, [pc, #160]	; (8001040 <fsm_tuning+0x530>)
 8000f9e:	2219      	movs	r2, #25
 8000fa0:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000fa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa6:	f000 fceb 	bl	8001980 <setTimer1>
			timer_green2 = counter;
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <fsm_tuning+0x520>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a27      	ldr	r2, [pc, #156]	; (800104c <fsm_tuning+0x53c>)
 8000fb0:	6013      	str	r3, [r2, #0]
			timer_yellow2 = timer_red1 - timer_green2;
 8000fb2:	4b24      	ldr	r3, [pc, #144]	; (8001044 <fsm_tuning+0x534>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <fsm_tuning+0x53c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	4a24      	ldr	r2, [pc, #144]	; (8001050 <fsm_tuning+0x540>)
 8000fbe:	6013      	str	r3, [r2, #0]
			counter = timer_yellow1;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <fsm_tuning+0x52c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a1a      	ldr	r2, [pc, #104]	; (8001030 <fsm_tuning+0x520>)
 8000fc6:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fce:	481e      	ldr	r0, [pc, #120]	; (8001048 <fsm_tuning+0x538>)
 8000fd0:	f001 f959 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	4814      	ldr	r0, [pc, #80]	; (800102c <fsm_tuning+0x51c>)
 8000fda:	f001 f954 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2120      	movs	r1, #32
 8000fe2:	4812      	ldr	r0, [pc, #72]	; (800102c <fsm_tuning+0x51c>)
 8000fe4:	f001 f94f 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2110      	movs	r1, #16
 8000fec:	480f      	ldr	r0, [pc, #60]	; (800102c <fsm_tuning+0x51c>)
 8000fee:	f001 f94a 	bl	8002286 <HAL_GPIO_WritePin>
			displayCounter();
 8000ff2:	f7ff f9d3 	bl	800039c <displayCounter>
			break;
 8000ff6:	e160      	b.n	80012ba <fsm_tuning+0x7aa>
		}
		if(isButtonPressed(3)) {
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f7ff f8a7 	bl	800014c <isButtonPressed>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	f000 8155 	beq.w	80012b0 <fsm_tuning+0x7a0>
			counter++;
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <fsm_tuning+0x520>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	4a08      	ldr	r2, [pc, #32]	; (8001030 <fsm_tuning+0x520>)
 800100e:	6013      	str	r3, [r2, #0]
			if(counter > timer_red1 - 1){
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <fsm_tuning+0x534>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <fsm_tuning+0x520>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	429a      	cmp	r2, r3
 800101a:	dc02      	bgt.n	8001022 <fsm_tuning+0x512>
				counter = 1;
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <fsm_tuning+0x520>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8001022:	f7ff f9bb 	bl	800039c <displayCounter>
		}
		break;
 8001026:	e143      	b.n	80012b0 <fsm_tuning+0x7a0>
 8001028:	2000011c 	.word	0x2000011c
 800102c:	40010c00 	.word	0x40010c00
 8001030:	20000108 	.word	0x20000108
 8001034:	20000008 	.word	0x20000008
 8001038:	20000010 	.word	0x20000010
 800103c:	2000000c 	.word	0x2000000c
 8001040:	20000100 	.word	0x20000100
 8001044:	20000004 	.word	0x20000004
 8001048:	40010800 	.word	0x40010800
 800104c:	20000014 	.word	0x20000014
 8001050:	20000018 	.word	0x20000018
	case TUNING_YELLOW1:
		if(timer1_flag==1) {
 8001054:	4b9a      	ldr	r3, [pc, #616]	; (80012c0 <fsm_tuning+0x7b0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d10f      	bne.n	800107c <fsm_tuning+0x56c>
			timer1_flag = 0;
 800105c:	4b98      	ldr	r3, [pc, #608]	; (80012c0 <fsm_tuning+0x7b0>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001062:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001066:	f000 fc8b 	bl	8001980 <setTimer1>
			HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 800106a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106e:	4895      	ldr	r0, [pc, #596]	; (80012c4 <fsm_tuning+0x7b4>)
 8001070:	f001 f921 	bl	80022b6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 8001074:	2108      	movs	r1, #8
 8001076:	4894      	ldr	r0, [pc, #592]	; (80012c8 <fsm_tuning+0x7b8>)
 8001078:	f001 f91d 	bl	80022b6 <HAL_GPIO_TogglePin>
		}
		if(isButtonPressed(1)) {
 800107c:	2001      	movs	r0, #1
 800107e:	f7ff f865 	bl	800014c <isButtonPressed>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d02d      	beq.n	80010e4 <fsm_tuning+0x5d4>
			status = AUTO_RED_GREEN;
 8001088:	4b90      	ldr	r3, [pc, #576]	; (80012cc <fsm_tuning+0x7bc>)
 800108a:	2202      	movs	r2, #2
 800108c:	601a      	str	r2, [r3, #0]
			timer_yellow1 = counter;
 800108e:	4b90      	ldr	r3, [pc, #576]	; (80012d0 <fsm_tuning+0x7c0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a90      	ldr	r2, [pc, #576]	; (80012d4 <fsm_tuning+0x7c4>)
 8001094:	6013      	str	r3, [r2, #0]
			timer_green1 = timer_red2 - timer_yellow1;
 8001096:	4b90      	ldr	r3, [pc, #576]	; (80012d8 <fsm_tuning+0x7c8>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b8e      	ldr	r3, [pc, #568]	; (80012d4 <fsm_tuning+0x7c4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	4a8e      	ldr	r2, [pc, #568]	; (80012dc <fsm_tuning+0x7cc>)
 80010a2:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 80010a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a8:	f000 fc6a 	bl	8001980 <setTimer1>
			counter = timer_red1;
 80010ac:	4b8c      	ldr	r3, [pc, #560]	; (80012e0 <fsm_tuning+0x7d0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a87      	ldr	r2, [pc, #540]	; (80012d0 <fsm_tuning+0x7c0>)
 80010b2:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ba:	4882      	ldr	r0, [pc, #520]	; (80012c4 <fsm_tuning+0x7b4>)
 80010bc:	f001 f8e3 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2108      	movs	r1, #8
 80010c4:	4880      	ldr	r0, [pc, #512]	; (80012c8 <fsm_tuning+0x7b8>)
 80010c6:	f001 f8de 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2120      	movs	r1, #32
 80010ce:	487e      	ldr	r0, [pc, #504]	; (80012c8 <fsm_tuning+0x7b8>)
 80010d0:	f001 f8d9 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2110      	movs	r1, #16
 80010d8:	487b      	ldr	r0, [pc, #492]	; (80012c8 <fsm_tuning+0x7b8>)
 80010da:	f001 f8d4 	bl	8002286 <HAL_GPIO_WritePin>
			displayCounter();
 80010de:	f7ff f95d 	bl	800039c <displayCounter>
			break;
 80010e2:	e0ea      	b.n	80012ba <fsm_tuning+0x7aa>
		}



		if(isButtonPressed(2)) {
 80010e4:	2002      	movs	r0, #2
 80010e6:	f7ff f831 	bl	800014c <isButtonPressed>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d02d      	beq.n	800114c <fsm_tuning+0x63c>
			status = TUNING_YELLOW2;
 80010f0:	4b76      	ldr	r3, [pc, #472]	; (80012cc <fsm_tuning+0x7bc>)
 80010f2:	221a      	movs	r2, #26
 80010f4:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80010f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010fa:	f000 fc41 	bl	8001980 <setTimer1>
			timer_yellow1 = counter;
 80010fe:	4b74      	ldr	r3, [pc, #464]	; (80012d0 <fsm_tuning+0x7c0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a74      	ldr	r2, [pc, #464]	; (80012d4 <fsm_tuning+0x7c4>)
 8001104:	6013      	str	r3, [r2, #0]
			timer_green1 = timer_red2 - timer_yellow1;
 8001106:	4b74      	ldr	r3, [pc, #464]	; (80012d8 <fsm_tuning+0x7c8>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b72      	ldr	r3, [pc, #456]	; (80012d4 <fsm_tuning+0x7c4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	4a72      	ldr	r2, [pc, #456]	; (80012dc <fsm_tuning+0x7cc>)
 8001112:	6013      	str	r3, [r2, #0]
			counter = timer_yellow2;
 8001114:	4b73      	ldr	r3, [pc, #460]	; (80012e4 <fsm_tuning+0x7d4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a6d      	ldr	r2, [pc, #436]	; (80012d0 <fsm_tuning+0x7c0>)
 800111a:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001122:	4868      	ldr	r0, [pc, #416]	; (80012c4 <fsm_tuning+0x7b4>)
 8001124:	f001 f8af 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2108      	movs	r1, #8
 800112c:	4866      	ldr	r0, [pc, #408]	; (80012c8 <fsm_tuning+0x7b8>)
 800112e:	f001 f8aa 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	2120      	movs	r1, #32
 8001136:	4864      	ldr	r0, [pc, #400]	; (80012c8 <fsm_tuning+0x7b8>)
 8001138:	f001 f8a5 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	2110      	movs	r1, #16
 8001140:	4861      	ldr	r0, [pc, #388]	; (80012c8 <fsm_tuning+0x7b8>)
 8001142:	f001 f8a0 	bl	8002286 <HAL_GPIO_WritePin>
			displayCounter();
 8001146:	f7ff f929 	bl	800039c <displayCounter>
			break;
 800114a:	e0b6      	b.n	80012ba <fsm_tuning+0x7aa>
		}

		if(isButtonPressed(3)) {
 800114c:	2003      	movs	r0, #3
 800114e:	f7fe fffd 	bl	800014c <isButtonPressed>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80ad 	beq.w	80012b4 <fsm_tuning+0x7a4>
			counter++;
 800115a:	4b5d      	ldr	r3, [pc, #372]	; (80012d0 <fsm_tuning+0x7c0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	4a5b      	ldr	r2, [pc, #364]	; (80012d0 <fsm_tuning+0x7c0>)
 8001162:	6013      	str	r3, [r2, #0]
			if(counter > timer_red2 - 1){
 8001164:	4b5c      	ldr	r3, [pc, #368]	; (80012d8 <fsm_tuning+0x7c8>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b59      	ldr	r3, [pc, #356]	; (80012d0 <fsm_tuning+0x7c0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	dc02      	bgt.n	8001176 <fsm_tuning+0x666>
				counter = 1;
 8001170:	4b57      	ldr	r3, [pc, #348]	; (80012d0 <fsm_tuning+0x7c0>)
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8001176:	f7ff f911 	bl	800039c <displayCounter>
		}
		break;
 800117a:	e09b      	b.n	80012b4 <fsm_tuning+0x7a4>
	case TUNING_YELLOW2:
		if(timer1_flag==1) {
 800117c:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <fsm_tuning+0x7b0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d10e      	bne.n	80011a2 <fsm_tuning+0x692>
			timer1_flag = 0;
 8001184:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <fsm_tuning+0x7b0>)
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800118a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800118e:	f000 fbf7 	bl	8001980 <setTimer1>
			HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 8001192:	2120      	movs	r1, #32
 8001194:	484c      	ldr	r0, [pc, #304]	; (80012c8 <fsm_tuning+0x7b8>)
 8001196:	f001 f88e 	bl	80022b6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 800119a:	2110      	movs	r1, #16
 800119c:	484a      	ldr	r0, [pc, #296]	; (80012c8 <fsm_tuning+0x7b8>)
 800119e:	f001 f88a 	bl	80022b6 <HAL_GPIO_TogglePin>
		}

		if(isButtonPressed(1)) {
 80011a2:	2001      	movs	r0, #1
 80011a4:	f7fe ffd2 	bl	800014c <isButtonPressed>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d02d      	beq.n	800120a <fsm_tuning+0x6fa>
			status = AUTO_RED_GREEN;
 80011ae:	4b47      	ldr	r3, [pc, #284]	; (80012cc <fsm_tuning+0x7bc>)
 80011b0:	2202      	movs	r2, #2
 80011b2:	601a      	str	r2, [r3, #0]
			timer_yellow2 = counter;
 80011b4:	4b46      	ldr	r3, [pc, #280]	; (80012d0 <fsm_tuning+0x7c0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a4a      	ldr	r2, [pc, #296]	; (80012e4 <fsm_tuning+0x7d4>)
 80011ba:	6013      	str	r3, [r2, #0]
			timer_green2 = timer_red1 - timer_yellow2;
 80011bc:	4b48      	ldr	r3, [pc, #288]	; (80012e0 <fsm_tuning+0x7d0>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b48      	ldr	r3, [pc, #288]	; (80012e4 <fsm_tuning+0x7d4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	4a48      	ldr	r2, [pc, #288]	; (80012e8 <fsm_tuning+0x7d8>)
 80011c8:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 80011ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ce:	f000 fbd7 	bl	8001980 <setTimer1>
			counter = timer_red1;
 80011d2:	4b43      	ldr	r3, [pc, #268]	; (80012e0 <fsm_tuning+0x7d0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a3e      	ldr	r2, [pc, #248]	; (80012d0 <fsm_tuning+0x7c0>)
 80011d8:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e0:	4838      	ldr	r0, [pc, #224]	; (80012c4 <fsm_tuning+0x7b4>)
 80011e2:	f001 f850 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2108      	movs	r1, #8
 80011ea:	4837      	ldr	r0, [pc, #220]	; (80012c8 <fsm_tuning+0x7b8>)
 80011ec:	f001 f84b 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2120      	movs	r1, #32
 80011f4:	4834      	ldr	r0, [pc, #208]	; (80012c8 <fsm_tuning+0x7b8>)
 80011f6:	f001 f846 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2110      	movs	r1, #16
 80011fe:	4832      	ldr	r0, [pc, #200]	; (80012c8 <fsm_tuning+0x7b8>)
 8001200:	f001 f841 	bl	8002286 <HAL_GPIO_WritePin>
			displayCounter();
 8001204:	f7ff f8ca 	bl	800039c <displayCounter>
			break;
 8001208:	e057      	b.n	80012ba <fsm_tuning+0x7aa>
		}



		if(isButtonPressed(2)) {
 800120a:	2002      	movs	r0, #2
 800120c:	f7fe ff9e 	bl	800014c <isButtonPressed>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d02d      	beq.n	8001272 <fsm_tuning+0x762>
			status = TUNING_RED1;
 8001216:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <fsm_tuning+0x7bc>)
 8001218:	2215      	movs	r2, #21
 800121a:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800121c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001220:	f000 fbae 	bl	8001980 <setTimer1>
			timer_yellow2 = counter;
 8001224:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <fsm_tuning+0x7c0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a2e      	ldr	r2, [pc, #184]	; (80012e4 <fsm_tuning+0x7d4>)
 800122a:	6013      	str	r3, [r2, #0]
			timer_green2 = timer_red1 - timer_yellow2;
 800122c:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <fsm_tuning+0x7d0>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <fsm_tuning+0x7d4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	4a2c      	ldr	r2, [pc, #176]	; (80012e8 <fsm_tuning+0x7d8>)
 8001238:	6013      	str	r3, [r2, #0]
			counter = timer_red1;
 800123a:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <fsm_tuning+0x7d0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a24      	ldr	r2, [pc, #144]	; (80012d0 <fsm_tuning+0x7c0>)
 8001240:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001248:	481e      	ldr	r0, [pc, #120]	; (80012c4 <fsm_tuning+0x7b4>)
 800124a:	f001 f81c 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2108      	movs	r1, #8
 8001252:	481d      	ldr	r0, [pc, #116]	; (80012c8 <fsm_tuning+0x7b8>)
 8001254:	f001 f817 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	2120      	movs	r1, #32
 800125c:	481a      	ldr	r0, [pc, #104]	; (80012c8 <fsm_tuning+0x7b8>)
 800125e:	f001 f812 	bl	8002286 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2110      	movs	r1, #16
 8001266:	4818      	ldr	r0, [pc, #96]	; (80012c8 <fsm_tuning+0x7b8>)
 8001268:	f001 f80d 	bl	8002286 <HAL_GPIO_WritePin>
			displayCounter();
 800126c:	f7ff f896 	bl	800039c <displayCounter>
			break;
 8001270:	e023      	b.n	80012ba <fsm_tuning+0x7aa>
		}

		if(isButtonPressed(3)) {
 8001272:	2003      	movs	r0, #3
 8001274:	f7fe ff6a 	bl	800014c <isButtonPressed>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d01c      	beq.n	80012b8 <fsm_tuning+0x7a8>
			counter++;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <fsm_tuning+0x7c0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <fsm_tuning+0x7c0>)
 8001286:	6013      	str	r3, [r2, #0]
			if(counter > timer_red1 - 1){
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <fsm_tuning+0x7d0>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <fsm_tuning+0x7c0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	dc02      	bgt.n	800129a <fsm_tuning+0x78a>
				counter = 1;
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <fsm_tuning+0x7c0>)
 8001296:	2201      	movs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 800129a:	f7ff f87f 	bl	800039c <displayCounter>
		}
		break;
 800129e:	e00b      	b.n	80012b8 <fsm_tuning+0x7a8>
	default:
		break;
 80012a0:	bf00      	nop
 80012a2:	e00a      	b.n	80012ba <fsm_tuning+0x7aa>
		break;
 80012a4:	bf00      	nop
 80012a6:	e008      	b.n	80012ba <fsm_tuning+0x7aa>
		break;
 80012a8:	bf00      	nop
 80012aa:	e006      	b.n	80012ba <fsm_tuning+0x7aa>
		break;
 80012ac:	bf00      	nop
 80012ae:	e004      	b.n	80012ba <fsm_tuning+0x7aa>
		break;
 80012b0:	bf00      	nop
 80012b2:	e002      	b.n	80012ba <fsm_tuning+0x7aa>
		break;
 80012b4:	bf00      	nop
 80012b6:	e000      	b.n	80012ba <fsm_tuning+0x7aa>
		break;
 80012b8:	bf00      	nop
	}
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2000011c 	.word	0x2000011c
 80012c4:	40010800 	.word	0x40010800
 80012c8:	40010c00 	.word	0x40010c00
 80012cc:	20000100 	.word	0x20000100
 80012d0:	20000108 	.word	0x20000108
 80012d4:	2000000c 	.word	0x2000000c
 80012d8:	20000010 	.word	0x20000010
 80012dc:	20000008 	.word	0x20000008
 80012e0:	20000004 	.word	0x20000004
 80012e4:	20000018 	.word	0x20000018
 80012e8:	20000014 	.word	0x20000014

080012ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f0:	f000 fc0e 	bl	8001b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f4:	f000 f824 	bl	8001340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f8:	f000 f950 	bl	800159c <MX_GPIO_Init>
  MX_TIM2_Init();
 80012fc:	f000 f862 	bl	80013c4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001300:	f000 f922 	bl	8001548 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001304:	f000 f8aa 	bl	800145c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001308:	4809      	ldr	r0, [pc, #36]	; (8001330 <main+0x44>)
 800130a:	f001 fc57 	bl	8002bbc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800130e:	2100      	movs	r1, #0
 8001310:	4808      	ldr	r0, [pc, #32]	; (8001334 <main+0x48>)
 8001312:	f001 fcfd 	bl	8002d10 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <main+0x4c>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]
  pedestrianStatus = INIT;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <main+0x50>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  mode_selector();
 8001322:	f7fe ffb1 	bl	8000288 <mode_selector>
	  mode_run();
 8001326:	f000 f9ad 	bl	8001684 <mode_run>
	  fsm_pedestrian_run();
 800132a:	f7ff fabd 	bl	80008a8 <fsm_pedestrian_run>
	  mode_selector();
 800132e:	e7f8      	b.n	8001322 <main+0x36>
 8001330:	20000184 	.word	0x20000184
 8001334:	2000013c 	.word	0x2000013c
 8001338:	20000100 	.word	0x20000100
 800133c:	20000104 	.word	0x20000104

08001340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b090      	sub	sp, #64	; 0x40
 8001344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001346:	f107 0318 	add.w	r3, r7, #24
 800134a:	2228      	movs	r2, #40	; 0x28
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f002 ffac 	bl	80042ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001362:	2302      	movs	r3, #2
 8001364:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001366:	2301      	movs	r3, #1
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800136a:	2310      	movs	r3, #16
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136e:	2302      	movs	r3, #2
 8001370:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001372:	2300      	movs	r3, #0
 8001374:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001376:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800137a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137c:	f107 0318 	add.w	r3, r7, #24
 8001380:	4618      	mov	r0, r3
 8001382:	f000 ffb1 	bl	80022e8 <HAL_RCC_OscConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800138c:	f000 f974 	bl	8001678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001390:	230f      	movs	r3, #15
 8001392:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001394:	2302      	movs	r3, #2
 8001396:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800139c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2102      	movs	r1, #2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 fa1c 	bl	80027e8 <HAL_RCC_ClockConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80013b6:	f000 f95f 	bl	8001678 <Error_Handler>
  }
}
 80013ba:	bf00      	nop
 80013bc:	3740      	adds	r7, #64	; 0x40
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d8:	463b      	mov	r3, r7
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <MX_TIM2_Init+0x94>)
 80013e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <MX_TIM2_Init+0x94>)
 80013ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80013ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <MX_TIM2_Init+0x94>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <MX_TIM2_Init+0x94>)
 80013f8:	223f      	movs	r2, #63	; 0x3f
 80013fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <MX_TIM2_Init+0x94>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <MX_TIM2_Init+0x94>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001408:	4813      	ldr	r0, [pc, #76]	; (8001458 <MX_TIM2_Init+0x94>)
 800140a:	f001 fb87 	bl	8002b1c <HAL_TIM_Base_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001414:	f000 f930 	bl	8001678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	4619      	mov	r1, r3
 8001424:	480c      	ldr	r0, [pc, #48]	; (8001458 <MX_TIM2_Init+0x94>)
 8001426:	f001 fedb 	bl	80031e0 <HAL_TIM_ConfigClockSource>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001430:	f000 f922 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_TIM2_Init+0x94>)
 8001442:	f002 fa59 	bl	80038f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800144c:	f000 f914 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000184 	.word	0x20000184

0800145c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08e      	sub	sp, #56	; 0x38
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	f107 0320 	add.w	r3, r7, #32
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
 8001488:	615a      	str	r2, [r3, #20]
 800148a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800148c:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <MX_TIM3_Init+0xe4>)
 800148e:	4a2d      	ldr	r2, [pc, #180]	; (8001544 <MX_TIM3_Init+0xe8>)
 8001490:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8001492:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <MX_TIM3_Init+0xe4>)
 8001494:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001498:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	4b29      	ldr	r3, [pc, #164]	; (8001540 <MX_TIM3_Init+0xe4>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63;
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <MX_TIM3_Init+0xe4>)
 80014a2:	223f      	movs	r2, #63	; 0x3f
 80014a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a6:	4b26      	ldr	r3, [pc, #152]	; (8001540 <MX_TIM3_Init+0xe4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <MX_TIM3_Init+0xe4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014b2:	4823      	ldr	r0, [pc, #140]	; (8001540 <MX_TIM3_Init+0xe4>)
 80014b4:	f001 fb32 	bl	8002b1c <HAL_TIM_Base_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80014be:	f000 f8db 	bl	8001678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014cc:	4619      	mov	r1, r3
 80014ce:	481c      	ldr	r0, [pc, #112]	; (8001540 <MX_TIM3_Init+0xe4>)
 80014d0:	f001 fe86 	bl	80031e0 <HAL_TIM_ConfigClockSource>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80014da:	f000 f8cd 	bl	8001678 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014de:	4818      	ldr	r0, [pc, #96]	; (8001540 <MX_TIM3_Init+0xe4>)
 80014e0:	f001 fbbe 	bl	8002c60 <HAL_TIM_PWM_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80014ea:	f000 f8c5 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014f6:	f107 0320 	add.w	r3, r7, #32
 80014fa:	4619      	mov	r1, r3
 80014fc:	4810      	ldr	r0, [pc, #64]	; (8001540 <MX_TIM3_Init+0xe4>)
 80014fe:	f002 f9fb 	bl	80038f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001508:	f000 f8b6 	bl	8001678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150c:	2360      	movs	r3, #96	; 0x60
 800150e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2200      	movs	r2, #0
 8001520:	4619      	mov	r1, r3
 8001522:	4807      	ldr	r0, [pc, #28]	; (8001540 <MX_TIM3_Init+0xe4>)
 8001524:	f001 fd9e 	bl	8003064 <HAL_TIM_PWM_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800152e:	f000 f8a3 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001532:	4803      	ldr	r0, [pc, #12]	; (8001540 <MX_TIM3_Init+0xe4>)
 8001534:	f000 f928 	bl	8001788 <HAL_TIM_MspPostInit>

}
 8001538:	bf00      	nop
 800153a:	3738      	adds	r7, #56	; 0x38
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2000013c 	.word	0x2000013c
 8001544:	40000400 	.word	0x40000400

08001548 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 800154e:	4a12      	ldr	r2, [pc, #72]	; (8001598 <MX_USART2_UART_Init+0x50>)
 8001550:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 8001554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001558:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_USART2_UART_Init+0x4c>)
 8001580:	f002 fa2a 	bl	80039d8 <HAL_UART_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800158a:	f000 f875 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200001cc 	.word	0x200001cc
 8001598:	40004400 	.word	0x40004400

0800159c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	4b2e      	ldr	r3, [pc, #184]	; (800166c <MX_GPIO_Init+0xd0>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a2d      	ldr	r2, [pc, #180]	; (800166c <MX_GPIO_Init+0xd0>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <MX_GPIO_Init+0xd0>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c8:	4b28      	ldr	r3, [pc, #160]	; (800166c <MX_GPIO_Init+0xd0>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a27      	ldr	r2, [pc, #156]	; (800166c <MX_GPIO_Init+0xd0>)
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <MX_GPIO_Init+0xd0>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	603b      	str	r3, [r7, #0]
 80015de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin, GPIO_PIN_RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80015e6:	4822      	ldr	r0, [pc, #136]	; (8001670 <MX_GPIO_Init+0xd4>)
 80015e8:	f000 fe4d 	bl	8002286 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PedestrianLight_1_Pin|TrafficLight1_0_Pin, GPIO_PIN_RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80015f2:	4820      	ldr	r0, [pc, #128]	; (8001674 <MX_GPIO_Init+0xd8>)
 80015f4:	f000 fe47 	bl	8002286 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PedestrianButton_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = PedestrianButton_Pin|Button1_Pin|Button2_Pin;
 80015f8:	2313      	movs	r3, #19
 80015fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	4619      	mov	r1, r3
 800160a:	481a      	ldr	r0, [pc, #104]	; (8001674 <MX_GPIO_Init+0xd8>)
 800160c:	f000 fca0 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8001610:	2301      	movs	r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0308 	add.w	r3, r7, #8
 8001620:	4619      	mov	r1, r3
 8001622:	4813      	ldr	r0, [pc, #76]	; (8001670 <MX_GPIO_Init+0xd4>)
 8001624:	f000 fc94 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_0_Pin TrafficLight1_1_Pin TrafficLight2_1_Pin TrafficLight2_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin;
 8001628:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800162c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2302      	movs	r3, #2
 8001638:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	4619      	mov	r1, r3
 8001640:	480b      	ldr	r0, [pc, #44]	; (8001670 <MX_GPIO_Init+0xd4>)
 8001642:	f000 fc85 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_1_Pin TrafficLight1_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_1_Pin|TrafficLight1_0_Pin;
 8001646:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800164a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2302      	movs	r3, #2
 8001656:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	4619      	mov	r1, r3
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_GPIO_Init+0xd8>)
 8001660:	f000 fc76 	bl	8001f50 <HAL_GPIO_Init>

}
 8001664:	bf00      	nop
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40021000 	.word	0x40021000
 8001670:	40010c00 	.word	0x40010c00
 8001674:	40010800 	.word	0x40010800

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	e7fe      	b.n	8001680 <Error_Handler+0x8>
	...

08001684 <mode_run>:
#include "fsm_auto.h"
#include "fsm_manual.h"
#include "fsm_pedestrian.h"
#include "fsm_tuning.h"

void mode_run() {
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	switch(mode) {
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <mode_run+0x2c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b03      	cmp	r3, #3
 800168e:	d00a      	beq.n	80016a6 <mode_run+0x22>
 8001690:	2b03      	cmp	r3, #3
 8001692:	dc0a      	bgt.n	80016aa <mode_run+0x26>
 8001694:	2b01      	cmp	r3, #1
 8001696:	d002      	beq.n	800169e <mode_run+0x1a>
 8001698:	2b02      	cmp	r3, #2
 800169a:	d002      	beq.n	80016a2 <mode_run+0x1e>
	case 2:
		fsm_manual(); //MANUAL MODE
	case 3:
		fsm_tuning(); //TWEAK THE TIMING
	}
}
 800169c:	e005      	b.n	80016aa <mode_run+0x26>
		fsm_automatic(); //AUTOMATIK
 800169e:	f7fe feab 	bl	80003f8 <fsm_automatic>
		fsm_manual(); //MANUAL MODE
 80016a2:	f7fe ffa9 	bl	80005f8 <fsm_manual>
		fsm_tuning(); //TWEAK THE TIMING
 80016a6:	f7ff fa33 	bl	8000b10 <fsm_tuning>
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000000 	.word	0x20000000

080016b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_MspInit+0x5c>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	4a14      	ldr	r2, [pc, #80]	; (8001710 <HAL_MspInit+0x5c>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6193      	str	r3, [r2, #24]
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_MspInit+0x5c>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_MspInit+0x5c>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_MspInit+0x5c>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_MspInit+0x5c>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_MspInit+0x60>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <HAL_MspInit+0x60>)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	40021000 	.word	0x40021000
 8001714:	40010000 	.word	0x40010000

08001718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001728:	d114      	bne.n	8001754 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_TIM_Base_MspInit+0x68>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a14      	ldr	r2, [pc, #80]	; (8001780 <HAL_TIM_Base_MspInit+0x68>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	61d3      	str	r3, [r2, #28]
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_TIM_Base_MspInit+0x68>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	201c      	movs	r0, #28
 8001748:	f000 fb1b 	bl	8001d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800174c:	201c      	movs	r0, #28
 800174e:	f000 fb34 	bl	8001dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001752:	e010      	b.n	8001776 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_TIM_Base_MspInit+0x6c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d10b      	bne.n	8001776 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_TIM_Base_MspInit+0x68>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a07      	ldr	r2, [pc, #28]	; (8001780 <HAL_TIM_Base_MspInit+0x68>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_TIM_Base_MspInit+0x68>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
}
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000
 8001784:	40000400 	.word	0x40000400

08001788 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <HAL_TIM_MspPostInit+0x58>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d117      	bne.n	80017d8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a8:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <HAL_TIM_MspPostInit+0x5c>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <HAL_TIM_MspPostInit+0x5c>)
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_TIM_MspPostInit+0x5c>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80017c0:	2340      	movs	r3, #64	; 0x40
 80017c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0310 	add.w	r3, r7, #16
 80017d0:	4619      	mov	r1, r3
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <HAL_TIM_MspPostInit+0x60>)
 80017d4:	f000 fbbc 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017d8:	bf00      	nop
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40000400 	.word	0x40000400
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010800 	.word	0x40010800

080017ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1f      	ldr	r2, [pc, #124]	; (8001884 <HAL_UART_MspInit+0x98>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d137      	bne.n	800187c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800180c:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <HAL_UART_MspInit+0x9c>)
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	4a1d      	ldr	r2, [pc, #116]	; (8001888 <HAL_UART_MspInit+0x9c>)
 8001812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001816:	61d3      	str	r3, [r2, #28]
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_UART_MspInit+0x9c>)
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001824:	4b18      	ldr	r3, [pc, #96]	; (8001888 <HAL_UART_MspInit+0x9c>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	4a17      	ldr	r2, [pc, #92]	; (8001888 <HAL_UART_MspInit+0x9c>)
 800182a:	f043 0304 	orr.w	r3, r3, #4
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_UART_MspInit+0x9c>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800183c:	2304      	movs	r3, #4
 800183e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	4619      	mov	r1, r3
 800184e:	480f      	ldr	r0, [pc, #60]	; (800188c <HAL_UART_MspInit+0xa0>)
 8001850:	f000 fb7e 	bl	8001f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001854:	2308      	movs	r3, #8
 8001856:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	4619      	mov	r1, r3
 8001866:	4809      	ldr	r0, [pc, #36]	; (800188c <HAL_UART_MspInit+0xa0>)
 8001868:	f000 fb72 	bl	8001f50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	2026      	movs	r0, #38	; 0x26
 8001872:	f000 fa86 	bl	8001d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001876:	2026      	movs	r0, #38	; 0x26
 8001878:	f000 fa9f 	bl	8001dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40004400 	.word	0x40004400
 8001888:	40021000 	.word	0x40021000
 800188c:	40010800 	.word	0x40010800

08001890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <NMI_Handler+0x4>

08001896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <HardFault_Handler+0x4>

0800189c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <MemManage_Handler+0x4>

080018a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <BusFault_Handler+0x4>

080018a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <UsageFault_Handler+0x4>

080018ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d6:	f000 f961 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <TIM2_IRQHandler+0x10>)
 80018e6:	f001 fab5 	bl	8002e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000184 	.word	0x20000184

080018f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <USART2_IRQHandler+0x10>)
 80018fa:	f002 f8ff 	bl	8003afc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200001cc 	.word	0x200001cc

08001908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <_sbrk+0x5c>)
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <_sbrk+0x60>)
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <_sbrk+0x64>)
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <_sbrk+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d207      	bcs.n	8001948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001938:	f002 fc8e 	bl	8004258 <__errno>
 800193c:	4603      	mov	r3, r0
 800193e:	220c      	movs	r2, #12
 8001940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	e009      	b.n	800195c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <_sbrk+0x64>)
 8001958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20005000 	.word	0x20005000
 8001968:	00000400 	.word	0x00000400
 800196c:	20000118 	.word	0x20000118
 8001970:	20000228 	.word	0x20000228

08001974 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <setTimer1>:

int timer3_flag = 0;
int timer3_counter = 0;

//SET TIMERS
void setTimer1(int duration){
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <setTimer1+0x2c>)
 800198c:	fb82 1203 	smull	r1, r2, r2, r3
 8001990:	1092      	asrs	r2, r2, #2
 8001992:	17db      	asrs	r3, r3, #31
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <setTimer1+0x30>)
 8001998:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <setTimer1+0x34>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	66666667 	.word	0x66666667
 80019b0:	20000120 	.word	0x20000120
 80019b4:	2000011c 	.word	0x2000011c

080019b8 <setTimer2>:

void setTimer2(int duration){
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <setTimer2+0x2c>)
 80019c4:	fb82 1203 	smull	r1, r2, r2, r3
 80019c8:	1092      	asrs	r2, r2, #2
 80019ca:	17db      	asrs	r3, r3, #31
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	4a06      	ldr	r2, [pc, #24]	; (80019e8 <setTimer2+0x30>)
 80019d0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <setTimer2+0x34>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	66666667 	.word	0x66666667
 80019e8:	20000128 	.word	0x20000128
 80019ec:	20000124 	.word	0x20000124

080019f0 <setTimer3>:

void setTimer3(int duration){
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <setTimer3+0x2c>)
 80019fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001a00:	1092      	asrs	r2, r2, #2
 8001a02:	17db      	asrs	r3, r3, #31
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <setTimer3+0x30>)
 8001a08:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <setTimer3+0x34>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	66666667 	.word	0x66666667
 8001a20:	20000130 	.word	0x20000130
 8001a24:	2000012c 	.word	0x2000012c

08001a28 <timer_run>:

//TIMER DRIVERS
void timer_run(){
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <timer_run+0x6c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	dd0b      	ble.n	8001a4c <timer_run+0x24>
		timer1_counter--;
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <timer_run+0x6c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	4a16      	ldr	r2, [pc, #88]	; (8001a94 <timer_run+0x6c>)
 8001a3c:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <timer_run+0x6c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d102      	bne.n	8001a4c <timer_run+0x24>
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <timer_run+0x70>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <timer_run+0x74>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	dd0b      	ble.n	8001a6c <timer_run+0x44>
		timer2_counter--;
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <timer_run+0x74>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	4a10      	ldr	r2, [pc, #64]	; (8001a9c <timer_run+0x74>)
 8001a5c:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <timer_run+0x74>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d102      	bne.n	8001a6c <timer_run+0x44>
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <timer_run+0x78>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <timer_run+0x7c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	dd0b      	ble.n	8001a8c <timer_run+0x64>
		timer3_counter--;
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <timer_run+0x7c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <timer_run+0x7c>)
 8001a7c:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) timer3_flag = 1;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <timer_run+0x7c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d102      	bne.n	8001a8c <timer_run+0x64>
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <timer_run+0x80>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
	}
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	20000120 	.word	0x20000120
 8001a98:	2000011c 	.word	0x2000011c
 8001a9c:	20000128 	.word	0x20000128
 8001aa0:	20000124 	.word	0x20000124
 8001aa4:	20000130 	.word	0x20000130
 8001aa8:	2000012c 	.word	0x2000012c

08001aac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	timer_run();
 8001ab4:	f7ff ffb8 	bl	8001a28 <timer_run>
	button_processing();
 8001ab8:	f7fe fb62 	bl	8000180 <button_processing>
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac4:	480c      	ldr	r0, [pc, #48]	; (8001af8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ac6:	490d      	ldr	r1, [pc, #52]	; (8001afc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001acc:	e002      	b.n	8001ad4 <LoopCopyDataInit>

08001ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad2:	3304      	adds	r3, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad8:	d3f9      	bcc.n	8001ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001adc:	4c0a      	ldr	r4, [pc, #40]	; (8001b08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae0:	e001      	b.n	8001ae6 <LoopFillZerobss>

08001ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae4:	3204      	adds	r2, #4

08001ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae8:	d3fb      	bcc.n	8001ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001aea:	f7ff ff43 	bl	8001974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aee:	f002 fbb9 	bl	8004264 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001af2:	f7ff fbfb 	bl	80012ec <main>
  bx lr
 8001af6:	4770      	bx	lr
  ldr r0, =_sdata
 8001af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001afc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001b00:	08004bbc 	.word	0x08004bbc
  ldr r2, =_sbss
 8001b04:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001b08:	20000224 	.word	0x20000224

08001b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b0c:	e7fe      	b.n	8001b0c <ADC1_2_IRQHandler>
	...

08001b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_Init+0x28>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_Init+0x28>)
 8001b1a:	f043 0310 	orr.w	r3, r3, #16
 8001b1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f000 f923 	bl	8001d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b26:	200f      	movs	r0, #15
 8001b28:	f000 f808 	bl	8001b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2c:	f7ff fdc2 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40022000 	.word	0x40022000

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x54>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x58>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f93b 	bl	8001dd6 <HAL_SYSTICK_Config>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00e      	b.n	8001b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d80a      	bhi.n	8001b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b70:	2200      	movs	r2, #0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f000 f903 	bl	8001d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <HAL_InitTick+0x5c>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	2000001c 	.word	0x2000001c
 8001b94:	20000024 	.word	0x20000024
 8001b98:	20000020 	.word	0x20000020

08001b9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_IncTick+0x1c>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a03      	ldr	r2, [pc, #12]	; (8001bbc <HAL_IncTick+0x20>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	20000024 	.word	0x20000024
 8001bbc:	20000210 	.word	0x20000210

08001bc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b02      	ldr	r3, [pc, #8]	; (8001bd0 <HAL_GetTick+0x10>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	20000210 	.word	0x20000210

08001bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c06:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	60d3      	str	r3, [r2, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <__NVIC_GetPriorityGrouping+0x18>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	f003 0307 	and.w	r3, r3, #7
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	db0b      	blt.n	8001c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	f003 021f 	and.w	r2, r3, #31
 8001c50:	4906      	ldr	r1, [pc, #24]	; (8001c6c <__NVIC_EnableIRQ+0x34>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	2001      	movs	r0, #1
 8001c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	e000e100 	.word	0xe000e100

08001c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db0a      	blt.n	8001c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	490c      	ldr	r1, [pc, #48]	; (8001cbc <__NVIC_SetPriority+0x4c>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	440b      	add	r3, r1
 8001c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c98:	e00a      	b.n	8001cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <__NVIC_SetPriority+0x50>)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	0112      	lsls	r2, r2, #4
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	440b      	add	r3, r1
 8001cae:	761a      	strb	r2, [r3, #24]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f1c3 0307 	rsb	r3, r3, #7
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	bf28      	it	cs
 8001ce2:	2304      	movcs	r3, #4
 8001ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d902      	bls.n	8001cf4 <NVIC_EncodePriority+0x30>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3b03      	subs	r3, #3
 8001cf2:	e000      	b.n	8001cf6 <NVIC_EncodePriority+0x32>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43d9      	mvns	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	4313      	orrs	r3, r2
         );
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d38:	d301      	bcc.n	8001d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e00f      	b.n	8001d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <SysTick_Config+0x40>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d46:	210f      	movs	r1, #15
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4c:	f7ff ff90 	bl	8001c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <SysTick_Config+0x40>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <SysTick_Config+0x40>)
 8001d58:	2207      	movs	r2, #7
 8001d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	e000e010 	.word	0xe000e010

08001d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff2d 	bl	8001bd4 <__NVIC_SetPriorityGrouping>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d94:	f7ff ff42 	bl	8001c1c <__NVIC_GetPriorityGrouping>
 8001d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	6978      	ldr	r0, [r7, #20]
 8001da0:	f7ff ff90 	bl	8001cc4 <NVIC_EncodePriority>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff5f 	bl	8001c70 <__NVIC_SetPriority>
}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff35 	bl	8001c38 <__NVIC_EnableIRQ>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ffa2 	bl	8001d28 <SysTick_Config>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d008      	beq.n	8001e16 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2204      	movs	r2, #4
 8001e08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e020      	b.n	8001e58 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 020e 	bic.w	r2, r2, #14
 8001e24:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3e:	2101      	movs	r1, #1
 8001e40:	fa01 f202 	lsl.w	r2, r1, r2
 8001e44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d005      	beq.n	8001e86 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e051      	b.n	8001f2a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 020e 	bic.w	r2, r2, #14
 8001e94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a22      	ldr	r2, [pc, #136]	; (8001f34 <HAL_DMA_Abort_IT+0xd0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d029      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xa0>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a20      	ldr	r2, [pc, #128]	; (8001f38 <HAL_DMA_Abort_IT+0xd4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d022      	beq.n	8001f00 <HAL_DMA_Abort_IT+0x9c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a1f      	ldr	r2, [pc, #124]	; (8001f3c <HAL_DMA_Abort_IT+0xd8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d01a      	beq.n	8001efa <HAL_DMA_Abort_IT+0x96>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <HAL_DMA_Abort_IT+0xdc>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d012      	beq.n	8001ef4 <HAL_DMA_Abort_IT+0x90>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a1c      	ldr	r2, [pc, #112]	; (8001f44 <HAL_DMA_Abort_IT+0xe0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d00a      	beq.n	8001eee <HAL_DMA_Abort_IT+0x8a>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1a      	ldr	r2, [pc, #104]	; (8001f48 <HAL_DMA_Abort_IT+0xe4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d102      	bne.n	8001ee8 <HAL_DMA_Abort_IT+0x84>
 8001ee2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ee6:	e00e      	b.n	8001f06 <HAL_DMA_Abort_IT+0xa2>
 8001ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eec:	e00b      	b.n	8001f06 <HAL_DMA_Abort_IT+0xa2>
 8001eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ef2:	e008      	b.n	8001f06 <HAL_DMA_Abort_IT+0xa2>
 8001ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef8:	e005      	b.n	8001f06 <HAL_DMA_Abort_IT+0xa2>
 8001efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001efe:	e002      	b.n	8001f06 <HAL_DMA_Abort_IT+0xa2>
 8001f00:	2310      	movs	r3, #16
 8001f02:	e000      	b.n	8001f06 <HAL_DMA_Abort_IT+0xa2>
 8001f04:	2301      	movs	r3, #1
 8001f06:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <HAL_DMA_Abort_IT+0xe8>)
 8001f08:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	4798      	blx	r3
    } 
  }
  return status;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40020008 	.word	0x40020008
 8001f38:	4002001c 	.word	0x4002001c
 8001f3c:	40020030 	.word	0x40020030
 8001f40:	40020044 	.word	0x40020044
 8001f44:	40020058 	.word	0x40020058
 8001f48:	4002006c 	.word	0x4002006c
 8001f4c:	40020000 	.word	0x40020000

08001f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b08b      	sub	sp, #44	; 0x2c
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f62:	e169      	b.n	8002238 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f64:	2201      	movs	r2, #1
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	f040 8158 	bne.w	8002232 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4a9a      	ldr	r2, [pc, #616]	; (80021f0 <HAL_GPIO_Init+0x2a0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d05e      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001f8c:	4a98      	ldr	r2, [pc, #608]	; (80021f0 <HAL_GPIO_Init+0x2a0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d875      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001f92:	4a98      	ldr	r2, [pc, #608]	; (80021f4 <HAL_GPIO_Init+0x2a4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d058      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001f98:	4a96      	ldr	r2, [pc, #600]	; (80021f4 <HAL_GPIO_Init+0x2a4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d86f      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001f9e:	4a96      	ldr	r2, [pc, #600]	; (80021f8 <HAL_GPIO_Init+0x2a8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d052      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001fa4:	4a94      	ldr	r2, [pc, #592]	; (80021f8 <HAL_GPIO_Init+0x2a8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d869      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001faa:	4a94      	ldr	r2, [pc, #592]	; (80021fc <HAL_GPIO_Init+0x2ac>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d04c      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001fb0:	4a92      	ldr	r2, [pc, #584]	; (80021fc <HAL_GPIO_Init+0x2ac>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d863      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001fb6:	4a92      	ldr	r2, [pc, #584]	; (8002200 <HAL_GPIO_Init+0x2b0>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d046      	beq.n	800204a <HAL_GPIO_Init+0xfa>
 8001fbc:	4a90      	ldr	r2, [pc, #576]	; (8002200 <HAL_GPIO_Init+0x2b0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d85d      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001fc2:	2b12      	cmp	r3, #18
 8001fc4:	d82a      	bhi.n	800201c <HAL_GPIO_Init+0xcc>
 8001fc6:	2b12      	cmp	r3, #18
 8001fc8:	d859      	bhi.n	800207e <HAL_GPIO_Init+0x12e>
 8001fca:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <HAL_GPIO_Init+0x80>)
 8001fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd0:	0800204b 	.word	0x0800204b
 8001fd4:	08002025 	.word	0x08002025
 8001fd8:	08002037 	.word	0x08002037
 8001fdc:	08002079 	.word	0x08002079
 8001fe0:	0800207f 	.word	0x0800207f
 8001fe4:	0800207f 	.word	0x0800207f
 8001fe8:	0800207f 	.word	0x0800207f
 8001fec:	0800207f 	.word	0x0800207f
 8001ff0:	0800207f 	.word	0x0800207f
 8001ff4:	0800207f 	.word	0x0800207f
 8001ff8:	0800207f 	.word	0x0800207f
 8001ffc:	0800207f 	.word	0x0800207f
 8002000:	0800207f 	.word	0x0800207f
 8002004:	0800207f 	.word	0x0800207f
 8002008:	0800207f 	.word	0x0800207f
 800200c:	0800207f 	.word	0x0800207f
 8002010:	0800207f 	.word	0x0800207f
 8002014:	0800202d 	.word	0x0800202d
 8002018:	08002041 	.word	0x08002041
 800201c:	4a79      	ldr	r2, [pc, #484]	; (8002204 <HAL_GPIO_Init+0x2b4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002022:	e02c      	b.n	800207e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	623b      	str	r3, [r7, #32]
          break;
 800202a:	e029      	b.n	8002080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	3304      	adds	r3, #4
 8002032:	623b      	str	r3, [r7, #32]
          break;
 8002034:	e024      	b.n	8002080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	3308      	adds	r3, #8
 800203c:	623b      	str	r3, [r7, #32]
          break;
 800203e:	e01f      	b.n	8002080 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	330c      	adds	r3, #12
 8002046:	623b      	str	r3, [r7, #32]
          break;
 8002048:	e01a      	b.n	8002080 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d102      	bne.n	8002058 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002052:	2304      	movs	r3, #4
 8002054:	623b      	str	r3, [r7, #32]
          break;
 8002056:	e013      	b.n	8002080 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d105      	bne.n	800206c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002060:	2308      	movs	r3, #8
 8002062:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	611a      	str	r2, [r3, #16]
          break;
 800206a:	e009      	b.n	8002080 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800206c:	2308      	movs	r3, #8
 800206e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	615a      	str	r2, [r3, #20]
          break;
 8002076:	e003      	b.n	8002080 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002078:	2300      	movs	r3, #0
 800207a:	623b      	str	r3, [r7, #32]
          break;
 800207c:	e000      	b.n	8002080 <HAL_GPIO_Init+0x130>
          break;
 800207e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2bff      	cmp	r3, #255	; 0xff
 8002084:	d801      	bhi.n	800208a <HAL_GPIO_Init+0x13a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	e001      	b.n	800208e <HAL_GPIO_Init+0x13e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3304      	adds	r3, #4
 800208e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2bff      	cmp	r3, #255	; 0xff
 8002094:	d802      	bhi.n	800209c <HAL_GPIO_Init+0x14c>
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	e002      	b.n	80020a2 <HAL_GPIO_Init+0x152>
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	3b08      	subs	r3, #8
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	210f      	movs	r1, #15
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	401a      	ands	r2, r3
 80020b4:	6a39      	ldr	r1, [r7, #32]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	fa01 f303 	lsl.w	r3, r1, r3
 80020bc:	431a      	orrs	r2, r3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 80b1 	beq.w	8002232 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020d0:	4b4d      	ldr	r3, [pc, #308]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	4a4c      	ldr	r2, [pc, #304]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6193      	str	r3, [r2, #24]
 80020dc:	4b4a      	ldr	r3, [pc, #296]	; (8002208 <HAL_GPIO_Init+0x2b8>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020e8:	4a48      	ldr	r2, [pc, #288]	; (800220c <HAL_GPIO_Init+0x2bc>)
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3302      	adds	r3, #2
 80020f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	220f      	movs	r2, #15
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4013      	ands	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a40      	ldr	r2, [pc, #256]	; (8002210 <HAL_GPIO_Init+0x2c0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d013      	beq.n	800213c <HAL_GPIO_Init+0x1ec>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3f      	ldr	r2, [pc, #252]	; (8002214 <HAL_GPIO_Init+0x2c4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00d      	beq.n	8002138 <HAL_GPIO_Init+0x1e8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3e      	ldr	r2, [pc, #248]	; (8002218 <HAL_GPIO_Init+0x2c8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d007      	beq.n	8002134 <HAL_GPIO_Init+0x1e4>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3d      	ldr	r2, [pc, #244]	; (800221c <HAL_GPIO_Init+0x2cc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_GPIO_Init+0x1e0>
 800212c:	2303      	movs	r3, #3
 800212e:	e006      	b.n	800213e <HAL_GPIO_Init+0x1ee>
 8002130:	2304      	movs	r3, #4
 8002132:	e004      	b.n	800213e <HAL_GPIO_Init+0x1ee>
 8002134:	2302      	movs	r3, #2
 8002136:	e002      	b.n	800213e <HAL_GPIO_Init+0x1ee>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <HAL_GPIO_Init+0x1ee>
 800213c:	2300      	movs	r3, #0
 800213e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002140:	f002 0203 	and.w	r2, r2, #3
 8002144:	0092      	lsls	r2, r2, #2
 8002146:	4093      	lsls	r3, r2
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800214e:	492f      	ldr	r1, [pc, #188]	; (800220c <HAL_GPIO_Init+0x2bc>)
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	3302      	adds	r3, #2
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d006      	beq.n	8002176 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002168:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	492c      	ldr	r1, [pc, #176]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]
 8002174:	e006      	b.n	8002184 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002176:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	43db      	mvns	r3, r3
 800217e:	4928      	ldr	r1, [pc, #160]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 8002180:	4013      	ands	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d006      	beq.n	800219e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002190:	4b23      	ldr	r3, [pc, #140]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	4922      	ldr	r1, [pc, #136]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
 800219c:	e006      	b.n	80021ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	491e      	ldr	r1, [pc, #120]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d006      	beq.n	80021c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	4918      	ldr	r1, [pc, #96]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	4914      	ldr	r1, [pc, #80]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d021      	beq.n	8002224 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	490e      	ldr	r1, [pc, #56]	; (8002220 <HAL_GPIO_Init+0x2d0>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60cb      	str	r3, [r1, #12]
 80021ec:	e021      	b.n	8002232 <HAL_GPIO_Init+0x2e2>
 80021ee:	bf00      	nop
 80021f0:	10320000 	.word	0x10320000
 80021f4:	10310000 	.word	0x10310000
 80021f8:	10220000 	.word	0x10220000
 80021fc:	10210000 	.word	0x10210000
 8002200:	10120000 	.word	0x10120000
 8002204:	10110000 	.word	0x10110000
 8002208:	40021000 	.word	0x40021000
 800220c:	40010000 	.word	0x40010000
 8002210:	40010800 	.word	0x40010800
 8002214:	40010c00 	.word	0x40010c00
 8002218:	40011000 	.word	0x40011000
 800221c:	40011400 	.word	0x40011400
 8002220:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_GPIO_Init+0x304>)
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	43db      	mvns	r3, r3
 800222c:	4909      	ldr	r1, [pc, #36]	; (8002254 <HAL_GPIO_Init+0x304>)
 800222e:	4013      	ands	r3, r2
 8002230:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	3301      	adds	r3, #1
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	fa22 f303 	lsr.w	r3, r2, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	f47f ae8e 	bne.w	8001f64 <HAL_GPIO_Init+0x14>
  }
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	372c      	adds	r7, #44	; 0x2c
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	40010400 	.word	0x40010400

08002258 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	887b      	ldrh	r3, [r7, #2]
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	e001      	b.n	800227a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800227a:	7bfb      	ldrb	r3, [r7, #15]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr

08002286 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	460b      	mov	r3, r1
 8002290:	807b      	strh	r3, [r7, #2]
 8002292:	4613      	mov	r3, r2
 8002294:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002296:	787b      	ldrb	r3, [r7, #1]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800229c:	887a      	ldrh	r2, [r7, #2]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022a2:	e003      	b.n	80022ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022a4:	887b      	ldrh	r3, [r7, #2]
 80022a6:	041a      	lsls	r2, r3, #16
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	611a      	str	r2, [r3, #16]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b085      	sub	sp, #20
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022c8:	887a      	ldrh	r2, [r7, #2]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4013      	ands	r3, r2
 80022ce:	041a      	lsls	r2, r3, #16
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	43d9      	mvns	r1, r3
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	400b      	ands	r3, r1
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	611a      	str	r2, [r3, #16]
}
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e26c      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 8087 	beq.w	8002416 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002308:	4b92      	ldr	r3, [pc, #584]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b04      	cmp	r3, #4
 8002312:	d00c      	beq.n	800232e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002314:	4b8f      	ldr	r3, [pc, #572]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b08      	cmp	r3, #8
 800231e:	d112      	bne.n	8002346 <HAL_RCC_OscConfig+0x5e>
 8002320:	4b8c      	ldr	r3, [pc, #560]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800232c:	d10b      	bne.n	8002346 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232e:	4b89      	ldr	r3, [pc, #548]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d06c      	beq.n	8002414 <HAL_RCC_OscConfig+0x12c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d168      	bne.n	8002414 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e246      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234e:	d106      	bne.n	800235e <HAL_RCC_OscConfig+0x76>
 8002350:	4b80      	ldr	r3, [pc, #512]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a7f      	ldr	r2, [pc, #508]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	e02e      	b.n	80023bc <HAL_RCC_OscConfig+0xd4>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x98>
 8002366:	4b7b      	ldr	r3, [pc, #492]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a7a      	ldr	r2, [pc, #488]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 800236c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b78      	ldr	r3, [pc, #480]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a77      	ldr	r2, [pc, #476]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002378:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e01d      	b.n	80023bc <HAL_RCC_OscConfig+0xd4>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002388:	d10c      	bne.n	80023a4 <HAL_RCC_OscConfig+0xbc>
 800238a:	4b72      	ldr	r3, [pc, #456]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a71      	ldr	r2, [pc, #452]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	4b6f      	ldr	r3, [pc, #444]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a6e      	ldr	r2, [pc, #440]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e00b      	b.n	80023bc <HAL_RCC_OscConfig+0xd4>
 80023a4:	4b6b      	ldr	r3, [pc, #428]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a6a      	ldr	r2, [pc, #424]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 80023aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b68      	ldr	r3, [pc, #416]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a67      	ldr	r2, [pc, #412]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 80023b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d013      	beq.n	80023ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7ff fbfc 	bl	8001bc0 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023cc:	f7ff fbf8 	bl	8001bc0 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1fa      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	4b5d      	ldr	r3, [pc, #372]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0xe4>
 80023ea:	e014      	b.n	8002416 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7ff fbe8 	bl	8001bc0 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f4:	f7ff fbe4 	bl	8001bc0 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e1e6      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002406:	4b53      	ldr	r3, [pc, #332]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x10c>
 8002412:	e000      	b.n	8002416 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d063      	beq.n	80024ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002422:	4b4c      	ldr	r3, [pc, #304]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00b      	beq.n	8002446 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800242e:	4b49      	ldr	r3, [pc, #292]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b08      	cmp	r3, #8
 8002438:	d11c      	bne.n	8002474 <HAL_RCC_OscConfig+0x18c>
 800243a:	4b46      	ldr	r3, [pc, #280]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d116      	bne.n	8002474 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002446:	4b43      	ldr	r3, [pc, #268]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_RCC_OscConfig+0x176>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d001      	beq.n	800245e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e1ba      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245e:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4939      	ldr	r1, [pc, #228]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	e03a      	b.n	80024ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d020      	beq.n	80024be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800247c:	4b36      	ldr	r3, [pc, #216]	; (8002558 <HAL_RCC_OscConfig+0x270>)
 800247e:	2201      	movs	r2, #1
 8002480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002482:	f7ff fb9d 	bl	8001bc0 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248a:	f7ff fb99 	bl	8001bc0 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e19b      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a8:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4927      	ldr	r1, [pc, #156]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]
 80024bc:	e015      	b.n	80024ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024be:	4b26      	ldr	r3, [pc, #152]	; (8002558 <HAL_RCC_OscConfig+0x270>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7ff fb7c 	bl	8001bc0 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024cc:	f7ff fb78 	bl	8001bc0 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e17a      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d03a      	beq.n	800256c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d019      	beq.n	8002532 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fe:	4b17      	ldr	r3, [pc, #92]	; (800255c <HAL_RCC_OscConfig+0x274>)
 8002500:	2201      	movs	r2, #1
 8002502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002504:	f7ff fb5c 	bl	8001bc0 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250c:	f7ff fb58 	bl	8001bc0 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e15a      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251e:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <HAL_RCC_OscConfig+0x26c>)
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800252a:	2001      	movs	r0, #1
 800252c:	f000 fad8 	bl	8002ae0 <RCC_Delay>
 8002530:	e01c      	b.n	800256c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_RCC_OscConfig+0x274>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002538:	f7ff fb42 	bl	8001bc0 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253e:	e00f      	b.n	8002560 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002540:	f7ff fb3e 	bl	8001bc0 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d908      	bls.n	8002560 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e140      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	42420000 	.word	0x42420000
 800255c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002560:	4b9e      	ldr	r3, [pc, #632]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1e9      	bne.n	8002540 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80a6 	beq.w	80026c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257e:	4b97      	ldr	r3, [pc, #604]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10d      	bne.n	80025a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	4b94      	ldr	r3, [pc, #592]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a93      	ldr	r2, [pc, #588]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002594:	61d3      	str	r3, [r2, #28]
 8002596:	4b91      	ldr	r3, [pc, #580]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a2:	2301      	movs	r3, #1
 80025a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a6:	4b8e      	ldr	r3, [pc, #568]	; (80027e0 <HAL_RCC_OscConfig+0x4f8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d118      	bne.n	80025e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b2:	4b8b      	ldr	r3, [pc, #556]	; (80027e0 <HAL_RCC_OscConfig+0x4f8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a8a      	ldr	r2, [pc, #552]	; (80027e0 <HAL_RCC_OscConfig+0x4f8>)
 80025b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025be:	f7ff faff 	bl	8001bc0 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c6:	f7ff fafb 	bl	8001bc0 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b64      	cmp	r3, #100	; 0x64
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e0fd      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	4b81      	ldr	r3, [pc, #516]	; (80027e0 <HAL_RCC_OscConfig+0x4f8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x312>
 80025ec:	4b7b      	ldr	r3, [pc, #492]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	4a7a      	ldr	r2, [pc, #488]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6213      	str	r3, [r2, #32]
 80025f8:	e02d      	b.n	8002656 <HAL_RCC_OscConfig+0x36e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x334>
 8002602:	4b76      	ldr	r3, [pc, #472]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	4a75      	ldr	r2, [pc, #468]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002608:	f023 0301 	bic.w	r3, r3, #1
 800260c:	6213      	str	r3, [r2, #32]
 800260e:	4b73      	ldr	r3, [pc, #460]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	4a72      	ldr	r2, [pc, #456]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002614:	f023 0304 	bic.w	r3, r3, #4
 8002618:	6213      	str	r3, [r2, #32]
 800261a:	e01c      	b.n	8002656 <HAL_RCC_OscConfig+0x36e>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b05      	cmp	r3, #5
 8002622:	d10c      	bne.n	800263e <HAL_RCC_OscConfig+0x356>
 8002624:	4b6d      	ldr	r3, [pc, #436]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	4a6c      	ldr	r2, [pc, #432]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800262a:	f043 0304 	orr.w	r3, r3, #4
 800262e:	6213      	str	r3, [r2, #32]
 8002630:	4b6a      	ldr	r3, [pc, #424]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4a69      	ldr	r2, [pc, #420]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6213      	str	r3, [r2, #32]
 800263c:	e00b      	b.n	8002656 <HAL_RCC_OscConfig+0x36e>
 800263e:	4b67      	ldr	r3, [pc, #412]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	4a66      	ldr	r2, [pc, #408]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	6213      	str	r3, [r2, #32]
 800264a:	4b64      	ldr	r3, [pc, #400]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	4a63      	ldr	r2, [pc, #396]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002650:	f023 0304 	bic.w	r3, r3, #4
 8002654:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d015      	beq.n	800268a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265e:	f7ff faaf 	bl	8001bc0 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002664:	e00a      	b.n	800267c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002666:	f7ff faab 	bl	8001bc0 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	f241 3288 	movw	r2, #5000	; 0x1388
 8002674:	4293      	cmp	r3, r2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e0ab      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267c:	4b57      	ldr	r3, [pc, #348]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0ee      	beq.n	8002666 <HAL_RCC_OscConfig+0x37e>
 8002688:	e014      	b.n	80026b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268a:	f7ff fa99 	bl	8001bc0 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002690:	e00a      	b.n	80026a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002692:	f7ff fa95 	bl	8001bc0 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e095      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a8:	4b4c      	ldr	r3, [pc, #304]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1ee      	bne.n	8002692 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026b4:	7dfb      	ldrb	r3, [r7, #23]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d105      	bne.n	80026c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ba:	4b48      	ldr	r3, [pc, #288]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	4a47      	ldr	r2, [pc, #284]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 8081 	beq.w	80027d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d0:	4b42      	ldr	r3, [pc, #264]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d061      	beq.n	80027a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d146      	bne.n	8002772 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e4:	4b3f      	ldr	r3, [pc, #252]	; (80027e4 <HAL_RCC_OscConfig+0x4fc>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ea:	f7ff fa69 	bl	8001bc0 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f2:	f7ff fa65 	bl	8001bc0 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e067      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002704:	4b35      	ldr	r3, [pc, #212]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002718:	d108      	bne.n	800272c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800271a:	4b30      	ldr	r3, [pc, #192]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	492d      	ldr	r1, [pc, #180]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800272c:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a19      	ldr	r1, [r3, #32]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	430b      	orrs	r3, r1
 800273e:	4927      	ldr	r1, [pc, #156]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <HAL_RCC_OscConfig+0x4fc>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7ff fa39 	bl	8001bc0 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002752:	f7ff fa35 	bl	8001bc0 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e037      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002764:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x46a>
 8002770:	e02f      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <HAL_RCC_OscConfig+0x4fc>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7ff fa22 	bl	8001bc0 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002780:	f7ff fa1e 	bl	8001bc0 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e020      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x498>
 800279e:	e018      	b.n	80027d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e013      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d106      	bne.n	80027ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40007000 	.word	0x40007000
 80027e4:	42420060 	.word	0x42420060

080027e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0d0      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027fc:	4b6a      	ldr	r3, [pc, #424]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d910      	bls.n	800282c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b67      	ldr	r3, [pc, #412]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 0207 	bic.w	r2, r3, #7
 8002812:	4965      	ldr	r1, [pc, #404]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b63      	ldr	r3, [pc, #396]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0b8      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d020      	beq.n	800287a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002844:	4b59      	ldr	r3, [pc, #356]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4a58      	ldr	r2, [pc, #352]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800284e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800285c:	4b53      	ldr	r3, [pc, #332]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4a52      	ldr	r2, [pc, #328]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002866:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002868:	4b50      	ldr	r3, [pc, #320]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	494d      	ldr	r1, [pc, #308]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	4313      	orrs	r3, r2
 8002878:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d040      	beq.n	8002908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b47      	ldr	r3, [pc, #284]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d115      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e07f      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a6:	4b41      	ldr	r3, [pc, #260]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e073      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b6:	4b3d      	ldr	r3, [pc, #244]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e06b      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c6:	4b39      	ldr	r3, [pc, #228]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f023 0203 	bic.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4936      	ldr	r1, [pc, #216]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d8:	f7ff f972 	bl	8001bc0 <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e0:	f7ff f96e 	bl	8001bc0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e053      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	4b2d      	ldr	r3, [pc, #180]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 020c 	and.w	r2, r3, #12
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	429a      	cmp	r2, r3
 8002906:	d1eb      	bne.n	80028e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002908:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d210      	bcs.n	8002938 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 0207 	bic.w	r2, r3, #7
 800291e:	4922      	ldr	r1, [pc, #136]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e032      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4916      	ldr	r1, [pc, #88]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002962:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	490e      	ldr	r1, [pc, #56]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002976:	f000 f821 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 800297a:	4602      	mov	r2, r0
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	490a      	ldr	r1, [pc, #40]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002988:	5ccb      	ldrb	r3, [r1, r3]
 800298a:	fa22 f303 	lsr.w	r3, r2, r3
 800298e:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff f8d0 	bl	8001b3c <HAL_InitTick>

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40022000 	.word	0x40022000
 80029ac:	40021000 	.word	0x40021000
 80029b0:	08004b68 	.word	0x08004b68
 80029b4:	2000001c 	.word	0x2000001c
 80029b8:	20000020 	.word	0x20000020

080029bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029bc:	b490      	push	{r4, r7}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029c2:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xb0>)
 80029c4:	1d3c      	adds	r4, r7, #4
 80029c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029cc:	f240 2301 	movw	r3, #513	; 0x201
 80029d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
 80029d6:	2300      	movs	r3, #0
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	2300      	movs	r3, #0
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029e6:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d002      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0x40>
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d003      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0x46>
 80029fa:	e02d      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029fe:	623b      	str	r3, [r7, #32]
      break;
 8002a00:	e02d      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	0c9b      	lsrs	r3, r3, #18
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a0e:	4413      	add	r3, r2
 8002a10:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a14:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a20:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	0c5b      	lsrs	r3, r3, #17
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a2e:	4413      	add	r3, r2
 8002a30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a34:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a3a:	fb02 f203 	mul.w	r2, r2, r3
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
 8002a46:	e004      	b.n	8002a52 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	4a0b      	ldr	r2, [pc, #44]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a4c:	fb02 f303 	mul.w	r3, r2, r3
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	623b      	str	r3, [r7, #32]
      break;
 8002a56:	e002      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a5a:	623b      	str	r3, [r7, #32]
      break;
 8002a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3728      	adds	r7, #40	; 0x28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc90      	pop	{r4, r7}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	08004b58 	.word	0x08004b58
 8002a70:	40021000 	.word	0x40021000
 8002a74:	007a1200 	.word	0x007a1200
 8002a78:	003d0900 	.word	0x003d0900

08002a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a80:	4b02      	ldr	r3, [pc, #8]	; (8002a8c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	2000001c 	.word	0x2000001c

08002a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a94:	f7ff fff2 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	08004b78 	.word	0x08004b78

08002ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002abc:	f7ff ffde 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	0adb      	lsrs	r3, r3, #11
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	; (8002adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	08004b78 	.word	0x08004b78

08002ae0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <RCC_Delay+0x34>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <RCC_Delay+0x38>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	0a5b      	lsrs	r3, r3, #9
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002afc:	bf00      	nop
  }
  while (Delay --);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1e5a      	subs	r2, r3, #1
 8002b02:	60fa      	str	r2, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f9      	bne.n	8002afc <RCC_Delay+0x1c>
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	2000001c 	.word	0x2000001c
 8002b18:	10624dd3 	.word	0x10624dd3

08002b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e041      	b.n	8002bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fe fde8 	bl	8001718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3304      	adds	r3, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f000 fc28 	bl	80033b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d001      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e03a      	b.n	8002c4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a18      	ldr	r2, [pc, #96]	; (8002c54 <HAL_TIM_Base_Start_IT+0x98>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00e      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x58>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfe:	d009      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x58>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d004      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x58>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a13      	ldr	r2, [pc, #76]	; (8002c5c <HAL_TIM_Base_Start_IT+0xa0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d111      	bne.n	8002c38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d010      	beq.n	8002c48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c36:	e007      	b.n	8002c48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	40012c00 	.word	0x40012c00
 8002c58:	40000400 	.word	0x40000400
 8002c5c:	40000800 	.word	0x40000800

08002c60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e041      	b.n	8002cf6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f839 	bl	8002cfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	f000 fb86 	bl	80033b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <HAL_TIM_PWM_Start+0x24>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	bf14      	ite	ne
 8002d2c:	2301      	movne	r3, #1
 8002d2e:	2300      	moveq	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e022      	b.n	8002d7a <HAL_TIM_PWM_Start+0x6a>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d109      	bne.n	8002d4e <HAL_TIM_PWM_Start+0x3e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	bf14      	ite	ne
 8002d46:	2301      	movne	r3, #1
 8002d48:	2300      	moveq	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	e015      	b.n	8002d7a <HAL_TIM_PWM_Start+0x6a>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d109      	bne.n	8002d68 <HAL_TIM_PWM_Start+0x58>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	bf14      	ite	ne
 8002d60:	2301      	movne	r3, #1
 8002d62:	2300      	moveq	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	e008      	b.n	8002d7a <HAL_TIM_PWM_Start+0x6a>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	bf14      	ite	ne
 8002d74:	2301      	movne	r3, #1
 8002d76:	2300      	moveq	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e05e      	b.n	8002e40 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d104      	bne.n	8002d92 <HAL_TIM_PWM_Start+0x82>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d90:	e013      	b.n	8002dba <HAL_TIM_PWM_Start+0xaa>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_PWM_Start+0x92>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002da0:	e00b      	b.n	8002dba <HAL_TIM_PWM_Start+0xaa>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d104      	bne.n	8002db2 <HAL_TIM_PWM_Start+0xa2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002db0:	e003      	b.n	8002dba <HAL_TIM_PWM_Start+0xaa>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	6839      	ldr	r1, [r7, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fd74 	bl	80038b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1e      	ldr	r2, [pc, #120]	; (8002e48 <HAL_TIM_PWM_Start+0x138>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d107      	bne.n	8002de2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <HAL_TIM_PWM_Start+0x138>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00e      	beq.n	8002e0a <HAL_TIM_PWM_Start+0xfa>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df4:	d009      	beq.n	8002e0a <HAL_TIM_PWM_Start+0xfa>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <HAL_TIM_PWM_Start+0x13c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d004      	beq.n	8002e0a <HAL_TIM_PWM_Start+0xfa>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <HAL_TIM_PWM_Start+0x140>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d111      	bne.n	8002e2e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b06      	cmp	r3, #6
 8002e1a:	d010      	beq.n	8002e3e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2c:	e007      	b.n	8002e3e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40012c00 	.word	0x40012c00
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40000800 	.word	0x40000800

08002e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d122      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d11b      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0202 	mvn.w	r2, #2
 8002e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fa6f 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 8002e9c:	e005      	b.n	8002eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fa62 	bl	8003368 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fa71 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d122      	bne.n	8002f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d11b      	bne.n	8002f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0204 	mvn.w	r2, #4
 8002ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa45 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fa38 	bl	8003368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fa47 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d122      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d11b      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0208 	mvn.w	r2, #8
 8002f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fa1b 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 8002f44:	e005      	b.n	8002f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fa0e 	bl	8003368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fa1d 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d122      	bne.n	8002fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d11b      	bne.n	8002fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0210 	mvn.w	r2, #16
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2208      	movs	r2, #8
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f9f1 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f9e4 	bl	8003368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f9f3 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d107      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0201 	mvn.w	r2, #1
 8002fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fe fd6a 	bl	8001aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b80      	cmp	r3, #128	; 0x80
 8002fe4:	d10e      	bne.n	8003004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff0:	2b80      	cmp	r3, #128	; 0x80
 8002ff2:	d107      	bne.n	8003004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fce1 	bl	80039c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	d10e      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d107      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f9b7 	bl	800339e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b20      	cmp	r3, #32
 800303c:	d10e      	bne.n	800305c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b20      	cmp	r3, #32
 800304a:	d107      	bne.n	800305c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0220 	mvn.w	r2, #32
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fcac 	bl	80039b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800307a:	2302      	movs	r3, #2
 800307c:	e0ac      	b.n	80031d8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b0c      	cmp	r3, #12
 800308a:	f200 809f 	bhi.w	80031cc <HAL_TIM_PWM_ConfigChannel+0x168>
 800308e:	a201      	add	r2, pc, #4	; (adr r2, 8003094 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003094:	080030c9 	.word	0x080030c9
 8003098:	080031cd 	.word	0x080031cd
 800309c:	080031cd 	.word	0x080031cd
 80030a0:	080031cd 	.word	0x080031cd
 80030a4:	08003109 	.word	0x08003109
 80030a8:	080031cd 	.word	0x080031cd
 80030ac:	080031cd 	.word	0x080031cd
 80030b0:	080031cd 	.word	0x080031cd
 80030b4:	0800314b 	.word	0x0800314b
 80030b8:	080031cd 	.word	0x080031cd
 80030bc:	080031cd 	.word	0x080031cd
 80030c0:	080031cd 	.word	0x080031cd
 80030c4:	0800318b 	.word	0x0800318b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f9d0 	bl	8003474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0208 	orr.w	r2, r2, #8
 80030e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0204 	bic.w	r2, r2, #4
 80030f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6999      	ldr	r1, [r3, #24]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	619a      	str	r2, [r3, #24]
      break;
 8003106:	e062      	b.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fa16 	bl	8003540 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6999      	ldr	r1, [r3, #24]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	021a      	lsls	r2, r3, #8
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	619a      	str	r2, [r3, #24]
      break;
 8003148:	e041      	b.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fa5f 	bl	8003614 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0208 	orr.w	r2, r2, #8
 8003164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0204 	bic.w	r2, r2, #4
 8003174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69d9      	ldr	r1, [r3, #28]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	61da      	str	r2, [r3, #28]
      break;
 8003188:	e021      	b.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	4618      	mov	r0, r3
 8003192:	f000 faa9 	bl	80036e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69da      	ldr	r2, [r3, #28]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69da      	ldr	r2, [r3, #28]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69d9      	ldr	r1, [r3, #28]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	021a      	lsls	r2, r3, #8
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	61da      	str	r2, [r3, #28]
      break;
 80031ca:	e000      	b.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80031cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_TIM_ConfigClockSource+0x18>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e0b3      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x180>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003216:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800321e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003230:	d03e      	beq.n	80032b0 <HAL_TIM_ConfigClockSource+0xd0>
 8003232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003236:	f200 8087 	bhi.w	8003348 <HAL_TIM_ConfigClockSource+0x168>
 800323a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323e:	f000 8085 	beq.w	800334c <HAL_TIM_ConfigClockSource+0x16c>
 8003242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003246:	d87f      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x168>
 8003248:	2b70      	cmp	r3, #112	; 0x70
 800324a:	d01a      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0xa2>
 800324c:	2b70      	cmp	r3, #112	; 0x70
 800324e:	d87b      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x168>
 8003250:	2b60      	cmp	r3, #96	; 0x60
 8003252:	d050      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0x116>
 8003254:	2b60      	cmp	r3, #96	; 0x60
 8003256:	d877      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x168>
 8003258:	2b50      	cmp	r3, #80	; 0x50
 800325a:	d03c      	beq.n	80032d6 <HAL_TIM_ConfigClockSource+0xf6>
 800325c:	2b50      	cmp	r3, #80	; 0x50
 800325e:	d873      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x168>
 8003260:	2b40      	cmp	r3, #64	; 0x40
 8003262:	d058      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0x136>
 8003264:	2b40      	cmp	r3, #64	; 0x40
 8003266:	d86f      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x168>
 8003268:	2b30      	cmp	r3, #48	; 0x30
 800326a:	d064      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0x156>
 800326c:	2b30      	cmp	r3, #48	; 0x30
 800326e:	d86b      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x168>
 8003270:	2b20      	cmp	r3, #32
 8003272:	d060      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0x156>
 8003274:	2b20      	cmp	r3, #32
 8003276:	d867      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x168>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d05c      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0x156>
 800327c:	2b10      	cmp	r3, #16
 800327e:	d05a      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003280:	e062      	b.n	8003348 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6899      	ldr	r1, [r3, #8]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f000 faee 	bl	8003872 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	609a      	str	r2, [r3, #8]
      break;
 80032ae:	e04e      	b.n	800334e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	6899      	ldr	r1, [r3, #8]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f000 fad7 	bl	8003872 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032d2:	609a      	str	r2, [r3, #8]
      break;
 80032d4:	e03b      	b.n	800334e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6859      	ldr	r1, [r3, #4]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	461a      	mov	r2, r3
 80032e4:	f000 fa4e 	bl	8003784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2150      	movs	r1, #80	; 0x50
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 faa5 	bl	800383e <TIM_ITRx_SetConfig>
      break;
 80032f4:	e02b      	b.n	800334e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6859      	ldr	r1, [r3, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	461a      	mov	r2, r3
 8003304:	f000 fa6c 	bl	80037e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2160      	movs	r1, #96	; 0x60
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fa95 	bl	800383e <TIM_ITRx_SetConfig>
      break;
 8003314:	e01b      	b.n	800334e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6859      	ldr	r1, [r3, #4]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	461a      	mov	r2, r3
 8003324:	f000 fa2e 	bl	8003784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2140      	movs	r1, #64	; 0x40
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fa85 	bl	800383e <TIM_ITRx_SetConfig>
      break;
 8003334:	e00b      	b.n	800334e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4619      	mov	r1, r3
 8003340:	4610      	mov	r0, r2
 8003342:	f000 fa7c 	bl	800383e <TIM_ITRx_SetConfig>
        break;
 8003346:	e002      	b.n	800334e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003348:	bf00      	nop
 800334a:	e000      	b.n	800334e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800334c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr

0800337a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr

0800339e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a29      	ldr	r2, [pc, #164]	; (8003468 <TIM_Base_SetConfig+0xb8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00b      	beq.n	80033e0 <TIM_Base_SetConfig+0x30>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ce:	d007      	beq.n	80033e0 <TIM_Base_SetConfig+0x30>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a26      	ldr	r2, [pc, #152]	; (800346c <TIM_Base_SetConfig+0xbc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d003      	beq.n	80033e0 <TIM_Base_SetConfig+0x30>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a25      	ldr	r2, [pc, #148]	; (8003470 <TIM_Base_SetConfig+0xc0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d108      	bne.n	80033f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <TIM_Base_SetConfig+0xb8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00b      	beq.n	8003412 <TIM_Base_SetConfig+0x62>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003400:	d007      	beq.n	8003412 <TIM_Base_SetConfig+0x62>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a19      	ldr	r2, [pc, #100]	; (800346c <TIM_Base_SetConfig+0xbc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d003      	beq.n	8003412 <TIM_Base_SetConfig+0x62>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a18      	ldr	r2, [pc, #96]	; (8003470 <TIM_Base_SetConfig+0xc0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d108      	bne.n	8003424 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a07      	ldr	r2, [pc, #28]	; (8003468 <TIM_Base_SetConfig+0xb8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d103      	bne.n	8003458 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	615a      	str	r2, [r3, #20]
}
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr
 8003468:	40012c00 	.word	0x40012c00
 800346c:	40000400 	.word	0x40000400
 8003470:	40000800 	.word	0x40000800

08003474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	f023 0201 	bic.w	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0303 	bic.w	r3, r3, #3
 80034aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f023 0302 	bic.w	r3, r3, #2
 80034bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a1c      	ldr	r2, [pc, #112]	; (800353c <TIM_OC1_SetConfig+0xc8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d10c      	bne.n	80034ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f023 0308 	bic.w	r3, r3, #8
 80034d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f023 0304 	bic.w	r3, r3, #4
 80034e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a13      	ldr	r2, [pc, #76]	; (800353c <TIM_OC1_SetConfig+0xc8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d111      	bne.n	8003516 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	621a      	str	r2, [r3, #32]
}
 8003530:	bf00      	nop
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40012c00 	.word	0x40012c00

08003540 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	f023 0210 	bic.w	r2, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800356e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	021b      	lsls	r3, r3, #8
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f023 0320 	bic.w	r3, r3, #32
 800358a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a1d      	ldr	r2, [pc, #116]	; (8003610 <TIM_OC2_SetConfig+0xd0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d10d      	bne.n	80035bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a14      	ldr	r2, [pc, #80]	; (8003610 <TIM_OC2_SetConfig+0xd0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d113      	bne.n	80035ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	40012c00 	.word	0x40012c00

08003614 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0303 	bic.w	r3, r3, #3
 800364a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800365c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a1d      	ldr	r2, [pc, #116]	; (80036e4 <TIM_OC3_SetConfig+0xd0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d10d      	bne.n	800368e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	021b      	lsls	r3, r3, #8
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800368c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a14      	ldr	r2, [pc, #80]	; (80036e4 <TIM_OC3_SetConfig+0xd0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d113      	bne.n	80036be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800369c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	621a      	str	r2, [r3, #32]
}
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40012c00 	.word	0x40012c00

080036e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003732:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	031b      	lsls	r3, r3, #12
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a0f      	ldr	r2, [pc, #60]	; (8003780 <TIM_OC4_SetConfig+0x98>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d109      	bne.n	800375c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800374e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	019b      	lsls	r3, r3, #6
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	621a      	str	r2, [r3, #32]
}
 8003776:	bf00      	nop
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	40012c00 	.word	0x40012c00

08003784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f023 0201 	bic.w	r2, r3, #1
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f023 030a 	bic.w	r3, r3, #10
 80037c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr

080037e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f023 0210 	bic.w	r2, r3, #16
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800380a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	031b      	lsls	r3, r3, #12
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800381c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	621a      	str	r2, [r3, #32]
}
 8003834:	bf00      	nop
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr

0800383e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800383e:	b480      	push	{r7}
 8003840:	b085      	sub	sp, #20
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003854:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	f043 0307 	orr.w	r3, r3, #7
 8003860:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	609a      	str	r2, [r3, #8]
}
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003872:	b480      	push	{r7}
 8003874:	b087      	sub	sp, #28
 8003876:	af00      	add	r7, sp, #0
 8003878:	60f8      	str	r0, [r7, #12]
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	607a      	str	r2, [r7, #4]
 800387e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800388c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	021a      	lsls	r2, r3, #8
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	431a      	orrs	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	4313      	orrs	r3, r2
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	609a      	str	r2, [r3, #8]
}
 80038a6:	bf00      	nop
 80038a8:	371c      	adds	r7, #28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	2201      	movs	r2, #1
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a1a      	ldr	r2, [r3, #32]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	401a      	ands	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a1a      	ldr	r2, [r3, #32]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	fa01 f303 	lsl.w	r3, r1, r3
 80038e8:	431a      	orrs	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	621a      	str	r2, [r3, #32]
}
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr

080038f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800390c:	2302      	movs	r3, #2
 800390e:	e046      	b.n	800399e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a16      	ldr	r2, [pc, #88]	; (80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00e      	beq.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395c:	d009      	beq.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a12      	ldr	r2, [pc, #72]	; (80039ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d004      	beq.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a10      	ldr	r2, [pc, #64]	; (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d10c      	bne.n	800398c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	4313      	orrs	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40000800 	.word	0x40000800

080039b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr

080039c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr

080039d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e03f      	b.n	8003a6a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fd fef4 	bl	80017ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2224      	movs	r2, #36	; 0x24
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fb8d 	bl	800413c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b085      	sub	sp, #20
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	d130      	bne.n	8003aee <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_UART_Transmit_IT+0x26>
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e029      	b.n	8003af0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Transmit_IT+0x38>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e022      	b.n	8003af0 <HAL_UART_Transmit_IT+0x7e>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	88fa      	ldrh	r2, [r7, #6]
 8003abc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	88fa      	ldrh	r2, [r7, #6]
 8003ac2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2221      	movs	r2, #33	; 0x21
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ae8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	e000      	b.n	8003af0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003aee:	2302      	movs	r3, #2
  }
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr
	...

08003afc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	; 0x28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10d      	bne.n	8003b4e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_UART_IRQHandler+0x52>
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fa4f 	bl	8003fea <UART_Receive_IT>
      return;
 8003b4c:	e17b      	b.n	8003e46 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80b1 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x1bc>
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <HAL_UART_IRQHandler+0x70>
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80a6 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_UART_IRQHandler+0x90>
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	f043 0201 	orr.w	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_UART_IRQHandler+0xb0>
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f043 0202 	orr.w	r2, r3, #2
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_UART_IRQHandler+0xd0>
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f043 0204 	orr.w	r2, r3, #4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00f      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xfa>
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d104      	bne.n	8003bea <HAL_UART_IRQHandler+0xee>
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f043 0208 	orr.w	r2, r3, #8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 811e 	beq.w	8003e3c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d007      	beq.n	8003c1a <HAL_UART_IRQHandler+0x11e>
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f9e8 	bl	8003fea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf14      	ite	ne
 8003c28:	2301      	movne	r3, #1
 8003c2a:	2300      	moveq	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d102      	bne.n	8003c42 <HAL_UART_IRQHandler+0x146>
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d031      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f92a 	bl	8003e9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d023      	beq.n	8003c9e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c64:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d013      	beq.n	8003c96 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	4a76      	ldr	r2, [pc, #472]	; (8003e4c <HAL_UART_IRQHandler+0x350>)
 8003c74:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe f8f2 	bl	8001e64 <HAL_DMA_Abort_IT>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d016      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c90:	4610      	mov	r0, r2
 8003c92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c94:	e00e      	b.n	8003cb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f8ec 	bl	8003e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	e00a      	b.n	8003cb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f8e8 	bl	8003e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca4:	e006      	b.n	8003cb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f8e4 	bl	8003e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003cb2:	e0c3      	b.n	8003e3c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	bf00      	nop
    return;
 8003cb6:	e0c1      	b.n	8003e3c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	f040 80a1 	bne.w	8003e04 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 809b 	beq.w	8003e04 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 8095 	beq.w	8003e04 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d04e      	beq.n	8003d9c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003d08:	8a3b      	ldrh	r3, [r7, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8098 	beq.w	8003e40 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d14:	8a3a      	ldrh	r2, [r7, #16]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	f080 8092 	bcs.w	8003e40 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8a3a      	ldrh	r2, [r7, #16]
 8003d20:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d02b      	beq.n	8003d84 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d3a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0201 	bic.w	r2, r2, #1
 8003d4a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d5a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0210 	bic.w	r2, r2, #16
 8003d78:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe f835 	bl	8001dee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	4619      	mov	r1, r3
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f876 	bl	8003e86 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d9a:	e051      	b.n	8003e40 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d047      	beq.n	8003e44 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003db4:	8a7b      	ldrh	r3, [r7, #18]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d044      	beq.n	8003e44 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003dc8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0210 	bic.w	r2, r2, #16
 8003df6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003df8:	8a7b      	ldrh	r3, [r7, #18]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f842 	bl	8003e86 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e02:	e01f      	b.n	8003e44 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_UART_IRQHandler+0x324>
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f87f 	bl	8003f1c <UART_Transmit_IT>
    return;
 8003e1e:	e012      	b.n	8003e46 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00d      	beq.n	8003e46 <HAL_UART_IRQHandler+0x34a>
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f8c0 	bl	8003fba <UART_EndTransmit_IT>
    return;
 8003e3a:	e004      	b.n	8003e46 <HAL_UART_IRQHandler+0x34a>
    return;
 8003e3c:	bf00      	nop
 8003e3e:	e002      	b.n	8003e46 <HAL_UART_IRQHandler+0x34a>
      return;
 8003e40:	bf00      	nop
 8003e42:	e000      	b.n	8003e46 <HAL_UART_IRQHandler+0x34a>
      return;
 8003e44:	bf00      	nop
  }
}
 8003e46:	3728      	adds	r7, #40	; 0x28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	08003ef5 	.word	0x08003ef5

08003e50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr

08003e62 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr

08003e74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr

08003e9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003eb2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d107      	bne.n	8003edc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0210 	bic.w	r2, r2, #16
 8003eda:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr

08003ef4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f7ff ffb0 	bl	8003e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b21      	cmp	r3, #33	; 0x21
 8003f2e:	d13e      	bne.n	8003fae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f38:	d114      	bne.n	8003f64 <UART_Transmit_IT+0x48>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d110      	bne.n	8003f64 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	1c9a      	adds	r2, r3, #2
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	621a      	str	r2, [r3, #32]
 8003f62:	e008      	b.n	8003f76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	1c59      	adds	r1, r3, #1
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6211      	str	r1, [r2, #32]
 8003f6e:	781a      	ldrb	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	4619      	mov	r1, r3
 8003f84:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10f      	bne.n	8003faa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fa8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e000      	b.n	8003fb0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fae:	2302      	movs	r3, #2
  }
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr

08003fba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff ff38 	bl	8003e50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b086      	sub	sp, #24
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b22      	cmp	r3, #34	; 0x22
 8003ffc:	f040 8099 	bne.w	8004132 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004008:	d117      	bne.n	800403a <UART_Receive_IT+0x50>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d113      	bne.n	800403a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	b29b      	uxth	r3, r3
 8004024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004028:	b29a      	uxth	r2, r3
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	1c9a      	adds	r2, r3, #2
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	629a      	str	r2, [r3, #40]	; 0x28
 8004038:	e026      	b.n	8004088 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004040:	2300      	movs	r3, #0
 8004042:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404c:	d007      	beq.n	800405e <UART_Receive_IT+0x74>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10a      	bne.n	800406c <UART_Receive_IT+0x82>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	b2da      	uxtb	r2, r3
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	701a      	strb	r2, [r3, #0]
 800406a:	e008      	b.n	800407e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004078:	b2da      	uxtb	r2, r3
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29b      	uxth	r3, r3
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	4619      	mov	r1, r3
 8004096:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004098:	2b00      	cmp	r3, #0
 800409a:	d148      	bne.n	800412e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0220 	bic.w	r2, r2, #32
 80040aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0201 	bic.w	r2, r2, #1
 80040ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d123      	bne.n	8004124 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0210 	bic.w	r2, r2, #16
 80040f0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d10a      	bne.n	8004116 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800411a:	4619      	mov	r1, r3
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff feb2 	bl	8003e86 <HAL_UARTEx_RxEventCallback>
 8004122:	e002      	b.n	800412a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff fe9c 	bl	8003e62 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	e002      	b.n	8004134 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e000      	b.n	8004134 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004132:	2302      	movs	r3, #2
  }
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004176:	f023 030c 	bic.w	r3, r3, #12
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	430b      	orrs	r3, r1
 8004182:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a2c      	ldr	r2, [pc, #176]	; (8004250 <UART_SetConfig+0x114>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d103      	bne.n	80041ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041a4:	f7fe fc88 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	e002      	b.n	80041b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041ac:	f7fe fc70 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 80041b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	009a      	lsls	r2, r3, #2
 80041bc:	441a      	add	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	4a22      	ldr	r2, [pc, #136]	; (8004254 <UART_SetConfig+0x118>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	0119      	lsls	r1, r3, #4
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	009a      	lsls	r2, r3, #2
 80041dc:	441a      	add	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041e8:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <UART_SetConfig+0x118>)
 80041ea:	fba3 0302 	umull	r0, r3, r3, r2
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	2064      	movs	r0, #100	; 0x64
 80041f2:	fb00 f303 	mul.w	r3, r0, r3
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	3332      	adds	r3, #50	; 0x32
 80041fc:	4a15      	ldr	r2, [pc, #84]	; (8004254 <UART_SetConfig+0x118>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004208:	4419      	add	r1, r3
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	009a      	lsls	r2, r3, #2
 8004214:	441a      	add	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004220:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <UART_SetConfig+0x118>)
 8004222:	fba3 0302 	umull	r0, r3, r3, r2
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	2064      	movs	r0, #100	; 0x64
 800422a:	fb00 f303 	mul.w	r3, r0, r3
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	3332      	adds	r3, #50	; 0x32
 8004234:	4a07      	ldr	r2, [pc, #28]	; (8004254 <UART_SetConfig+0x118>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	f003 020f 	and.w	r2, r3, #15
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	440a      	add	r2, r1
 8004246:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40013800 	.word	0x40013800
 8004254:	51eb851f 	.word	0x51eb851f

08004258 <__errno>:
 8004258:	4b01      	ldr	r3, [pc, #4]	; (8004260 <__errno+0x8>)
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20000028 	.word	0x20000028

08004264 <__libc_init_array>:
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	2600      	movs	r6, #0
 8004268:	4d0c      	ldr	r5, [pc, #48]	; (800429c <__libc_init_array+0x38>)
 800426a:	4c0d      	ldr	r4, [pc, #52]	; (80042a0 <__libc_init_array+0x3c>)
 800426c:	1b64      	subs	r4, r4, r5
 800426e:	10a4      	asrs	r4, r4, #2
 8004270:	42a6      	cmp	r6, r4
 8004272:	d109      	bne.n	8004288 <__libc_init_array+0x24>
 8004274:	f000 fc5c 	bl	8004b30 <_init>
 8004278:	2600      	movs	r6, #0
 800427a:	4d0a      	ldr	r5, [pc, #40]	; (80042a4 <__libc_init_array+0x40>)
 800427c:	4c0a      	ldr	r4, [pc, #40]	; (80042a8 <__libc_init_array+0x44>)
 800427e:	1b64      	subs	r4, r4, r5
 8004280:	10a4      	asrs	r4, r4, #2
 8004282:	42a6      	cmp	r6, r4
 8004284:	d105      	bne.n	8004292 <__libc_init_array+0x2e>
 8004286:	bd70      	pop	{r4, r5, r6, pc}
 8004288:	f855 3b04 	ldr.w	r3, [r5], #4
 800428c:	4798      	blx	r3
 800428e:	3601      	adds	r6, #1
 8004290:	e7ee      	b.n	8004270 <__libc_init_array+0xc>
 8004292:	f855 3b04 	ldr.w	r3, [r5], #4
 8004296:	4798      	blx	r3
 8004298:	3601      	adds	r6, #1
 800429a:	e7f2      	b.n	8004282 <__libc_init_array+0x1e>
 800429c:	08004bb4 	.word	0x08004bb4
 80042a0:	08004bb4 	.word	0x08004bb4
 80042a4:	08004bb4 	.word	0x08004bb4
 80042a8:	08004bb8 	.word	0x08004bb8

080042ac <memset>:
 80042ac:	4603      	mov	r3, r0
 80042ae:	4402      	add	r2, r0
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d100      	bne.n	80042b6 <memset+0xa>
 80042b4:	4770      	bx	lr
 80042b6:	f803 1b01 	strb.w	r1, [r3], #1
 80042ba:	e7f9      	b.n	80042b0 <memset+0x4>

080042bc <siprintf>:
 80042bc:	b40e      	push	{r1, r2, r3}
 80042be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042c2:	b500      	push	{lr}
 80042c4:	b09c      	sub	sp, #112	; 0x70
 80042c6:	ab1d      	add	r3, sp, #116	; 0x74
 80042c8:	9002      	str	r0, [sp, #8]
 80042ca:	9006      	str	r0, [sp, #24]
 80042cc:	9107      	str	r1, [sp, #28]
 80042ce:	9104      	str	r1, [sp, #16]
 80042d0:	4808      	ldr	r0, [pc, #32]	; (80042f4 <siprintf+0x38>)
 80042d2:	4909      	ldr	r1, [pc, #36]	; (80042f8 <siprintf+0x3c>)
 80042d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80042d8:	9105      	str	r1, [sp, #20]
 80042da:	6800      	ldr	r0, [r0, #0]
 80042dc:	a902      	add	r1, sp, #8
 80042de:	9301      	str	r3, [sp, #4]
 80042e0:	f000 f868 	bl	80043b4 <_svfiprintf_r>
 80042e4:	2200      	movs	r2, #0
 80042e6:	9b02      	ldr	r3, [sp, #8]
 80042e8:	701a      	strb	r2, [r3, #0]
 80042ea:	b01c      	add	sp, #112	; 0x70
 80042ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80042f0:	b003      	add	sp, #12
 80042f2:	4770      	bx	lr
 80042f4:	20000028 	.word	0x20000028
 80042f8:	ffff0208 	.word	0xffff0208

080042fc <__ssputs_r>:
 80042fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004300:	688e      	ldr	r6, [r1, #8]
 8004302:	4682      	mov	sl, r0
 8004304:	429e      	cmp	r6, r3
 8004306:	460c      	mov	r4, r1
 8004308:	4690      	mov	r8, r2
 800430a:	461f      	mov	r7, r3
 800430c:	d838      	bhi.n	8004380 <__ssputs_r+0x84>
 800430e:	898a      	ldrh	r2, [r1, #12]
 8004310:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004314:	d032      	beq.n	800437c <__ssputs_r+0x80>
 8004316:	6825      	ldr	r5, [r4, #0]
 8004318:	6909      	ldr	r1, [r1, #16]
 800431a:	3301      	adds	r3, #1
 800431c:	eba5 0901 	sub.w	r9, r5, r1
 8004320:	6965      	ldr	r5, [r4, #20]
 8004322:	444b      	add	r3, r9
 8004324:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004328:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800432c:	106d      	asrs	r5, r5, #1
 800432e:	429d      	cmp	r5, r3
 8004330:	bf38      	it	cc
 8004332:	461d      	movcc	r5, r3
 8004334:	0553      	lsls	r3, r2, #21
 8004336:	d531      	bpl.n	800439c <__ssputs_r+0xa0>
 8004338:	4629      	mov	r1, r5
 800433a:	f000 fb53 	bl	80049e4 <_malloc_r>
 800433e:	4606      	mov	r6, r0
 8004340:	b950      	cbnz	r0, 8004358 <__ssputs_r+0x5c>
 8004342:	230c      	movs	r3, #12
 8004344:	f04f 30ff 	mov.w	r0, #4294967295
 8004348:	f8ca 3000 	str.w	r3, [sl]
 800434c:	89a3      	ldrh	r3, [r4, #12]
 800434e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004352:	81a3      	strh	r3, [r4, #12]
 8004354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004358:	464a      	mov	r2, r9
 800435a:	6921      	ldr	r1, [r4, #16]
 800435c:	f000 face 	bl	80048fc <memcpy>
 8004360:	89a3      	ldrh	r3, [r4, #12]
 8004362:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436a:	81a3      	strh	r3, [r4, #12]
 800436c:	6126      	str	r6, [r4, #16]
 800436e:	444e      	add	r6, r9
 8004370:	6026      	str	r6, [r4, #0]
 8004372:	463e      	mov	r6, r7
 8004374:	6165      	str	r5, [r4, #20]
 8004376:	eba5 0509 	sub.w	r5, r5, r9
 800437a:	60a5      	str	r5, [r4, #8]
 800437c:	42be      	cmp	r6, r7
 800437e:	d900      	bls.n	8004382 <__ssputs_r+0x86>
 8004380:	463e      	mov	r6, r7
 8004382:	4632      	mov	r2, r6
 8004384:	4641      	mov	r1, r8
 8004386:	6820      	ldr	r0, [r4, #0]
 8004388:	f000 fac6 	bl	8004918 <memmove>
 800438c:	68a3      	ldr	r3, [r4, #8]
 800438e:	6822      	ldr	r2, [r4, #0]
 8004390:	1b9b      	subs	r3, r3, r6
 8004392:	4432      	add	r2, r6
 8004394:	2000      	movs	r0, #0
 8004396:	60a3      	str	r3, [r4, #8]
 8004398:	6022      	str	r2, [r4, #0]
 800439a:	e7db      	b.n	8004354 <__ssputs_r+0x58>
 800439c:	462a      	mov	r2, r5
 800439e:	f000 fb7b 	bl	8004a98 <_realloc_r>
 80043a2:	4606      	mov	r6, r0
 80043a4:	2800      	cmp	r0, #0
 80043a6:	d1e1      	bne.n	800436c <__ssputs_r+0x70>
 80043a8:	4650      	mov	r0, sl
 80043aa:	6921      	ldr	r1, [r4, #16]
 80043ac:	f000 face 	bl	800494c <_free_r>
 80043b0:	e7c7      	b.n	8004342 <__ssputs_r+0x46>
	...

080043b4 <_svfiprintf_r>:
 80043b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b8:	4698      	mov	r8, r3
 80043ba:	898b      	ldrh	r3, [r1, #12]
 80043bc:	4607      	mov	r7, r0
 80043be:	061b      	lsls	r3, r3, #24
 80043c0:	460d      	mov	r5, r1
 80043c2:	4614      	mov	r4, r2
 80043c4:	b09d      	sub	sp, #116	; 0x74
 80043c6:	d50e      	bpl.n	80043e6 <_svfiprintf_r+0x32>
 80043c8:	690b      	ldr	r3, [r1, #16]
 80043ca:	b963      	cbnz	r3, 80043e6 <_svfiprintf_r+0x32>
 80043cc:	2140      	movs	r1, #64	; 0x40
 80043ce:	f000 fb09 	bl	80049e4 <_malloc_r>
 80043d2:	6028      	str	r0, [r5, #0]
 80043d4:	6128      	str	r0, [r5, #16]
 80043d6:	b920      	cbnz	r0, 80043e2 <_svfiprintf_r+0x2e>
 80043d8:	230c      	movs	r3, #12
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	f04f 30ff 	mov.w	r0, #4294967295
 80043e0:	e0d1      	b.n	8004586 <_svfiprintf_r+0x1d2>
 80043e2:	2340      	movs	r3, #64	; 0x40
 80043e4:	616b      	str	r3, [r5, #20]
 80043e6:	2300      	movs	r3, #0
 80043e8:	9309      	str	r3, [sp, #36]	; 0x24
 80043ea:	2320      	movs	r3, #32
 80043ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043f0:	2330      	movs	r3, #48	; 0x30
 80043f2:	f04f 0901 	mov.w	r9, #1
 80043f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80043fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80045a0 <_svfiprintf_r+0x1ec>
 80043fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004402:	4623      	mov	r3, r4
 8004404:	469a      	mov	sl, r3
 8004406:	f813 2b01 	ldrb.w	r2, [r3], #1
 800440a:	b10a      	cbz	r2, 8004410 <_svfiprintf_r+0x5c>
 800440c:	2a25      	cmp	r2, #37	; 0x25
 800440e:	d1f9      	bne.n	8004404 <_svfiprintf_r+0x50>
 8004410:	ebba 0b04 	subs.w	fp, sl, r4
 8004414:	d00b      	beq.n	800442e <_svfiprintf_r+0x7a>
 8004416:	465b      	mov	r3, fp
 8004418:	4622      	mov	r2, r4
 800441a:	4629      	mov	r1, r5
 800441c:	4638      	mov	r0, r7
 800441e:	f7ff ff6d 	bl	80042fc <__ssputs_r>
 8004422:	3001      	adds	r0, #1
 8004424:	f000 80aa 	beq.w	800457c <_svfiprintf_r+0x1c8>
 8004428:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800442a:	445a      	add	r2, fp
 800442c:	9209      	str	r2, [sp, #36]	; 0x24
 800442e:	f89a 3000 	ldrb.w	r3, [sl]
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80a2 	beq.w	800457c <_svfiprintf_r+0x1c8>
 8004438:	2300      	movs	r3, #0
 800443a:	f04f 32ff 	mov.w	r2, #4294967295
 800443e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004442:	f10a 0a01 	add.w	sl, sl, #1
 8004446:	9304      	str	r3, [sp, #16]
 8004448:	9307      	str	r3, [sp, #28]
 800444a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800444e:	931a      	str	r3, [sp, #104]	; 0x68
 8004450:	4654      	mov	r4, sl
 8004452:	2205      	movs	r2, #5
 8004454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004458:	4851      	ldr	r0, [pc, #324]	; (80045a0 <_svfiprintf_r+0x1ec>)
 800445a:	f000 fa41 	bl	80048e0 <memchr>
 800445e:	9a04      	ldr	r2, [sp, #16]
 8004460:	b9d8      	cbnz	r0, 800449a <_svfiprintf_r+0xe6>
 8004462:	06d0      	lsls	r0, r2, #27
 8004464:	bf44      	itt	mi
 8004466:	2320      	movmi	r3, #32
 8004468:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800446c:	0711      	lsls	r1, r2, #28
 800446e:	bf44      	itt	mi
 8004470:	232b      	movmi	r3, #43	; 0x2b
 8004472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004476:	f89a 3000 	ldrb.w	r3, [sl]
 800447a:	2b2a      	cmp	r3, #42	; 0x2a
 800447c:	d015      	beq.n	80044aa <_svfiprintf_r+0xf6>
 800447e:	4654      	mov	r4, sl
 8004480:	2000      	movs	r0, #0
 8004482:	f04f 0c0a 	mov.w	ip, #10
 8004486:	9a07      	ldr	r2, [sp, #28]
 8004488:	4621      	mov	r1, r4
 800448a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800448e:	3b30      	subs	r3, #48	; 0x30
 8004490:	2b09      	cmp	r3, #9
 8004492:	d94e      	bls.n	8004532 <_svfiprintf_r+0x17e>
 8004494:	b1b0      	cbz	r0, 80044c4 <_svfiprintf_r+0x110>
 8004496:	9207      	str	r2, [sp, #28]
 8004498:	e014      	b.n	80044c4 <_svfiprintf_r+0x110>
 800449a:	eba0 0308 	sub.w	r3, r0, r8
 800449e:	fa09 f303 	lsl.w	r3, r9, r3
 80044a2:	4313      	orrs	r3, r2
 80044a4:	46a2      	mov	sl, r4
 80044a6:	9304      	str	r3, [sp, #16]
 80044a8:	e7d2      	b.n	8004450 <_svfiprintf_r+0x9c>
 80044aa:	9b03      	ldr	r3, [sp, #12]
 80044ac:	1d19      	adds	r1, r3, #4
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	9103      	str	r1, [sp, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	bfbb      	ittet	lt
 80044b6:	425b      	neglt	r3, r3
 80044b8:	f042 0202 	orrlt.w	r2, r2, #2
 80044bc:	9307      	strge	r3, [sp, #28]
 80044be:	9307      	strlt	r3, [sp, #28]
 80044c0:	bfb8      	it	lt
 80044c2:	9204      	strlt	r2, [sp, #16]
 80044c4:	7823      	ldrb	r3, [r4, #0]
 80044c6:	2b2e      	cmp	r3, #46	; 0x2e
 80044c8:	d10c      	bne.n	80044e4 <_svfiprintf_r+0x130>
 80044ca:	7863      	ldrb	r3, [r4, #1]
 80044cc:	2b2a      	cmp	r3, #42	; 0x2a
 80044ce:	d135      	bne.n	800453c <_svfiprintf_r+0x188>
 80044d0:	9b03      	ldr	r3, [sp, #12]
 80044d2:	3402      	adds	r4, #2
 80044d4:	1d1a      	adds	r2, r3, #4
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	9203      	str	r2, [sp, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bfb8      	it	lt
 80044de:	f04f 33ff 	movlt.w	r3, #4294967295
 80044e2:	9305      	str	r3, [sp, #20]
 80044e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80045b0 <_svfiprintf_r+0x1fc>
 80044e8:	2203      	movs	r2, #3
 80044ea:	4650      	mov	r0, sl
 80044ec:	7821      	ldrb	r1, [r4, #0]
 80044ee:	f000 f9f7 	bl	80048e0 <memchr>
 80044f2:	b140      	cbz	r0, 8004506 <_svfiprintf_r+0x152>
 80044f4:	2340      	movs	r3, #64	; 0x40
 80044f6:	eba0 000a 	sub.w	r0, r0, sl
 80044fa:	fa03 f000 	lsl.w	r0, r3, r0
 80044fe:	9b04      	ldr	r3, [sp, #16]
 8004500:	3401      	adds	r4, #1
 8004502:	4303      	orrs	r3, r0
 8004504:	9304      	str	r3, [sp, #16]
 8004506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800450a:	2206      	movs	r2, #6
 800450c:	4825      	ldr	r0, [pc, #148]	; (80045a4 <_svfiprintf_r+0x1f0>)
 800450e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004512:	f000 f9e5 	bl	80048e0 <memchr>
 8004516:	2800      	cmp	r0, #0
 8004518:	d038      	beq.n	800458c <_svfiprintf_r+0x1d8>
 800451a:	4b23      	ldr	r3, [pc, #140]	; (80045a8 <_svfiprintf_r+0x1f4>)
 800451c:	bb1b      	cbnz	r3, 8004566 <_svfiprintf_r+0x1b2>
 800451e:	9b03      	ldr	r3, [sp, #12]
 8004520:	3307      	adds	r3, #7
 8004522:	f023 0307 	bic.w	r3, r3, #7
 8004526:	3308      	adds	r3, #8
 8004528:	9303      	str	r3, [sp, #12]
 800452a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800452c:	4433      	add	r3, r6
 800452e:	9309      	str	r3, [sp, #36]	; 0x24
 8004530:	e767      	b.n	8004402 <_svfiprintf_r+0x4e>
 8004532:	460c      	mov	r4, r1
 8004534:	2001      	movs	r0, #1
 8004536:	fb0c 3202 	mla	r2, ip, r2, r3
 800453a:	e7a5      	b.n	8004488 <_svfiprintf_r+0xd4>
 800453c:	2300      	movs	r3, #0
 800453e:	f04f 0c0a 	mov.w	ip, #10
 8004542:	4619      	mov	r1, r3
 8004544:	3401      	adds	r4, #1
 8004546:	9305      	str	r3, [sp, #20]
 8004548:	4620      	mov	r0, r4
 800454a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800454e:	3a30      	subs	r2, #48	; 0x30
 8004550:	2a09      	cmp	r2, #9
 8004552:	d903      	bls.n	800455c <_svfiprintf_r+0x1a8>
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0c5      	beq.n	80044e4 <_svfiprintf_r+0x130>
 8004558:	9105      	str	r1, [sp, #20]
 800455a:	e7c3      	b.n	80044e4 <_svfiprintf_r+0x130>
 800455c:	4604      	mov	r4, r0
 800455e:	2301      	movs	r3, #1
 8004560:	fb0c 2101 	mla	r1, ip, r1, r2
 8004564:	e7f0      	b.n	8004548 <_svfiprintf_r+0x194>
 8004566:	ab03      	add	r3, sp, #12
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	462a      	mov	r2, r5
 800456c:	4638      	mov	r0, r7
 800456e:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <_svfiprintf_r+0x1f8>)
 8004570:	a904      	add	r1, sp, #16
 8004572:	f3af 8000 	nop.w
 8004576:	1c42      	adds	r2, r0, #1
 8004578:	4606      	mov	r6, r0
 800457a:	d1d6      	bne.n	800452a <_svfiprintf_r+0x176>
 800457c:	89ab      	ldrh	r3, [r5, #12]
 800457e:	065b      	lsls	r3, r3, #25
 8004580:	f53f af2c 	bmi.w	80043dc <_svfiprintf_r+0x28>
 8004584:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004586:	b01d      	add	sp, #116	; 0x74
 8004588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800458c:	ab03      	add	r3, sp, #12
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	462a      	mov	r2, r5
 8004592:	4638      	mov	r0, r7
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <_svfiprintf_r+0x1f8>)
 8004596:	a904      	add	r1, sp, #16
 8004598:	f000 f87c 	bl	8004694 <_printf_i>
 800459c:	e7eb      	b.n	8004576 <_svfiprintf_r+0x1c2>
 800459e:	bf00      	nop
 80045a0:	08004b80 	.word	0x08004b80
 80045a4:	08004b8a 	.word	0x08004b8a
 80045a8:	00000000 	.word	0x00000000
 80045ac:	080042fd 	.word	0x080042fd
 80045b0:	08004b86 	.word	0x08004b86

080045b4 <_printf_common>:
 80045b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045b8:	4616      	mov	r6, r2
 80045ba:	4699      	mov	r9, r3
 80045bc:	688a      	ldr	r2, [r1, #8]
 80045be:	690b      	ldr	r3, [r1, #16]
 80045c0:	4607      	mov	r7, r0
 80045c2:	4293      	cmp	r3, r2
 80045c4:	bfb8      	it	lt
 80045c6:	4613      	movlt	r3, r2
 80045c8:	6033      	str	r3, [r6, #0]
 80045ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045ce:	460c      	mov	r4, r1
 80045d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045d4:	b10a      	cbz	r2, 80045da <_printf_common+0x26>
 80045d6:	3301      	adds	r3, #1
 80045d8:	6033      	str	r3, [r6, #0]
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	0699      	lsls	r1, r3, #26
 80045de:	bf42      	ittt	mi
 80045e0:	6833      	ldrmi	r3, [r6, #0]
 80045e2:	3302      	addmi	r3, #2
 80045e4:	6033      	strmi	r3, [r6, #0]
 80045e6:	6825      	ldr	r5, [r4, #0]
 80045e8:	f015 0506 	ands.w	r5, r5, #6
 80045ec:	d106      	bne.n	80045fc <_printf_common+0x48>
 80045ee:	f104 0a19 	add.w	sl, r4, #25
 80045f2:	68e3      	ldr	r3, [r4, #12]
 80045f4:	6832      	ldr	r2, [r6, #0]
 80045f6:	1a9b      	subs	r3, r3, r2
 80045f8:	42ab      	cmp	r3, r5
 80045fa:	dc28      	bgt.n	800464e <_printf_common+0x9a>
 80045fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004600:	1e13      	subs	r3, r2, #0
 8004602:	6822      	ldr	r2, [r4, #0]
 8004604:	bf18      	it	ne
 8004606:	2301      	movne	r3, #1
 8004608:	0692      	lsls	r2, r2, #26
 800460a:	d42d      	bmi.n	8004668 <_printf_common+0xb4>
 800460c:	4649      	mov	r1, r9
 800460e:	4638      	mov	r0, r7
 8004610:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004614:	47c0      	blx	r8
 8004616:	3001      	adds	r0, #1
 8004618:	d020      	beq.n	800465c <_printf_common+0xa8>
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	68e5      	ldr	r5, [r4, #12]
 800461e:	f003 0306 	and.w	r3, r3, #6
 8004622:	2b04      	cmp	r3, #4
 8004624:	bf18      	it	ne
 8004626:	2500      	movne	r5, #0
 8004628:	6832      	ldr	r2, [r6, #0]
 800462a:	f04f 0600 	mov.w	r6, #0
 800462e:	68a3      	ldr	r3, [r4, #8]
 8004630:	bf08      	it	eq
 8004632:	1aad      	subeq	r5, r5, r2
 8004634:	6922      	ldr	r2, [r4, #16]
 8004636:	bf08      	it	eq
 8004638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800463c:	4293      	cmp	r3, r2
 800463e:	bfc4      	itt	gt
 8004640:	1a9b      	subgt	r3, r3, r2
 8004642:	18ed      	addgt	r5, r5, r3
 8004644:	341a      	adds	r4, #26
 8004646:	42b5      	cmp	r5, r6
 8004648:	d11a      	bne.n	8004680 <_printf_common+0xcc>
 800464a:	2000      	movs	r0, #0
 800464c:	e008      	b.n	8004660 <_printf_common+0xac>
 800464e:	2301      	movs	r3, #1
 8004650:	4652      	mov	r2, sl
 8004652:	4649      	mov	r1, r9
 8004654:	4638      	mov	r0, r7
 8004656:	47c0      	blx	r8
 8004658:	3001      	adds	r0, #1
 800465a:	d103      	bne.n	8004664 <_printf_common+0xb0>
 800465c:	f04f 30ff 	mov.w	r0, #4294967295
 8004660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004664:	3501      	adds	r5, #1
 8004666:	e7c4      	b.n	80045f2 <_printf_common+0x3e>
 8004668:	2030      	movs	r0, #48	; 0x30
 800466a:	18e1      	adds	r1, r4, r3
 800466c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004676:	4422      	add	r2, r4
 8004678:	3302      	adds	r3, #2
 800467a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800467e:	e7c5      	b.n	800460c <_printf_common+0x58>
 8004680:	2301      	movs	r3, #1
 8004682:	4622      	mov	r2, r4
 8004684:	4649      	mov	r1, r9
 8004686:	4638      	mov	r0, r7
 8004688:	47c0      	blx	r8
 800468a:	3001      	adds	r0, #1
 800468c:	d0e6      	beq.n	800465c <_printf_common+0xa8>
 800468e:	3601      	adds	r6, #1
 8004690:	e7d9      	b.n	8004646 <_printf_common+0x92>
	...

08004694 <_printf_i>:
 8004694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004698:	460c      	mov	r4, r1
 800469a:	7e27      	ldrb	r7, [r4, #24]
 800469c:	4691      	mov	r9, r2
 800469e:	2f78      	cmp	r7, #120	; 0x78
 80046a0:	4680      	mov	r8, r0
 80046a2:	469a      	mov	sl, r3
 80046a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80046a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046aa:	d807      	bhi.n	80046bc <_printf_i+0x28>
 80046ac:	2f62      	cmp	r7, #98	; 0x62
 80046ae:	d80a      	bhi.n	80046c6 <_printf_i+0x32>
 80046b0:	2f00      	cmp	r7, #0
 80046b2:	f000 80d9 	beq.w	8004868 <_printf_i+0x1d4>
 80046b6:	2f58      	cmp	r7, #88	; 0x58
 80046b8:	f000 80a4 	beq.w	8004804 <_printf_i+0x170>
 80046bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046c4:	e03a      	b.n	800473c <_printf_i+0xa8>
 80046c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046ca:	2b15      	cmp	r3, #21
 80046cc:	d8f6      	bhi.n	80046bc <_printf_i+0x28>
 80046ce:	a001      	add	r0, pc, #4	; (adr r0, 80046d4 <_printf_i+0x40>)
 80046d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80046d4:	0800472d 	.word	0x0800472d
 80046d8:	08004741 	.word	0x08004741
 80046dc:	080046bd 	.word	0x080046bd
 80046e0:	080046bd 	.word	0x080046bd
 80046e4:	080046bd 	.word	0x080046bd
 80046e8:	080046bd 	.word	0x080046bd
 80046ec:	08004741 	.word	0x08004741
 80046f0:	080046bd 	.word	0x080046bd
 80046f4:	080046bd 	.word	0x080046bd
 80046f8:	080046bd 	.word	0x080046bd
 80046fc:	080046bd 	.word	0x080046bd
 8004700:	0800484f 	.word	0x0800484f
 8004704:	08004771 	.word	0x08004771
 8004708:	08004831 	.word	0x08004831
 800470c:	080046bd 	.word	0x080046bd
 8004710:	080046bd 	.word	0x080046bd
 8004714:	08004871 	.word	0x08004871
 8004718:	080046bd 	.word	0x080046bd
 800471c:	08004771 	.word	0x08004771
 8004720:	080046bd 	.word	0x080046bd
 8004724:	080046bd 	.word	0x080046bd
 8004728:	08004839 	.word	0x08004839
 800472c:	680b      	ldr	r3, [r1, #0]
 800472e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004732:	1d1a      	adds	r2, r3, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	600a      	str	r2, [r1, #0]
 8004738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800473c:	2301      	movs	r3, #1
 800473e:	e0a4      	b.n	800488a <_printf_i+0x1f6>
 8004740:	6825      	ldr	r5, [r4, #0]
 8004742:	6808      	ldr	r0, [r1, #0]
 8004744:	062e      	lsls	r6, r5, #24
 8004746:	f100 0304 	add.w	r3, r0, #4
 800474a:	d50a      	bpl.n	8004762 <_printf_i+0xce>
 800474c:	6805      	ldr	r5, [r0, #0]
 800474e:	600b      	str	r3, [r1, #0]
 8004750:	2d00      	cmp	r5, #0
 8004752:	da03      	bge.n	800475c <_printf_i+0xc8>
 8004754:	232d      	movs	r3, #45	; 0x2d
 8004756:	426d      	negs	r5, r5
 8004758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800475c:	230a      	movs	r3, #10
 800475e:	485e      	ldr	r0, [pc, #376]	; (80048d8 <_printf_i+0x244>)
 8004760:	e019      	b.n	8004796 <_printf_i+0x102>
 8004762:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004766:	6805      	ldr	r5, [r0, #0]
 8004768:	600b      	str	r3, [r1, #0]
 800476a:	bf18      	it	ne
 800476c:	b22d      	sxthne	r5, r5
 800476e:	e7ef      	b.n	8004750 <_printf_i+0xbc>
 8004770:	680b      	ldr	r3, [r1, #0]
 8004772:	6825      	ldr	r5, [r4, #0]
 8004774:	1d18      	adds	r0, r3, #4
 8004776:	6008      	str	r0, [r1, #0]
 8004778:	0628      	lsls	r0, r5, #24
 800477a:	d501      	bpl.n	8004780 <_printf_i+0xec>
 800477c:	681d      	ldr	r5, [r3, #0]
 800477e:	e002      	b.n	8004786 <_printf_i+0xf2>
 8004780:	0669      	lsls	r1, r5, #25
 8004782:	d5fb      	bpl.n	800477c <_printf_i+0xe8>
 8004784:	881d      	ldrh	r5, [r3, #0]
 8004786:	2f6f      	cmp	r7, #111	; 0x6f
 8004788:	bf0c      	ite	eq
 800478a:	2308      	moveq	r3, #8
 800478c:	230a      	movne	r3, #10
 800478e:	4852      	ldr	r0, [pc, #328]	; (80048d8 <_printf_i+0x244>)
 8004790:	2100      	movs	r1, #0
 8004792:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004796:	6866      	ldr	r6, [r4, #4]
 8004798:	2e00      	cmp	r6, #0
 800479a:	bfa8      	it	ge
 800479c:	6821      	ldrge	r1, [r4, #0]
 800479e:	60a6      	str	r6, [r4, #8]
 80047a0:	bfa4      	itt	ge
 80047a2:	f021 0104 	bicge.w	r1, r1, #4
 80047a6:	6021      	strge	r1, [r4, #0]
 80047a8:	b90d      	cbnz	r5, 80047ae <_printf_i+0x11a>
 80047aa:	2e00      	cmp	r6, #0
 80047ac:	d04d      	beq.n	800484a <_printf_i+0x1b6>
 80047ae:	4616      	mov	r6, r2
 80047b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80047b4:	fb03 5711 	mls	r7, r3, r1, r5
 80047b8:	5dc7      	ldrb	r7, [r0, r7]
 80047ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047be:	462f      	mov	r7, r5
 80047c0:	42bb      	cmp	r3, r7
 80047c2:	460d      	mov	r5, r1
 80047c4:	d9f4      	bls.n	80047b0 <_printf_i+0x11c>
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d10b      	bne.n	80047e2 <_printf_i+0x14e>
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	07df      	lsls	r7, r3, #31
 80047ce:	d508      	bpl.n	80047e2 <_printf_i+0x14e>
 80047d0:	6923      	ldr	r3, [r4, #16]
 80047d2:	6861      	ldr	r1, [r4, #4]
 80047d4:	4299      	cmp	r1, r3
 80047d6:	bfde      	ittt	le
 80047d8:	2330      	movle	r3, #48	; 0x30
 80047da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047e2:	1b92      	subs	r2, r2, r6
 80047e4:	6122      	str	r2, [r4, #16]
 80047e6:	464b      	mov	r3, r9
 80047e8:	4621      	mov	r1, r4
 80047ea:	4640      	mov	r0, r8
 80047ec:	f8cd a000 	str.w	sl, [sp]
 80047f0:	aa03      	add	r2, sp, #12
 80047f2:	f7ff fedf 	bl	80045b4 <_printf_common>
 80047f6:	3001      	adds	r0, #1
 80047f8:	d14c      	bne.n	8004894 <_printf_i+0x200>
 80047fa:	f04f 30ff 	mov.w	r0, #4294967295
 80047fe:	b004      	add	sp, #16
 8004800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004804:	4834      	ldr	r0, [pc, #208]	; (80048d8 <_printf_i+0x244>)
 8004806:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800480a:	680e      	ldr	r6, [r1, #0]
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004812:	061f      	lsls	r7, r3, #24
 8004814:	600e      	str	r6, [r1, #0]
 8004816:	d514      	bpl.n	8004842 <_printf_i+0x1ae>
 8004818:	07d9      	lsls	r1, r3, #31
 800481a:	bf44      	itt	mi
 800481c:	f043 0320 	orrmi.w	r3, r3, #32
 8004820:	6023      	strmi	r3, [r4, #0]
 8004822:	b91d      	cbnz	r5, 800482c <_printf_i+0x198>
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	f023 0320 	bic.w	r3, r3, #32
 800482a:	6023      	str	r3, [r4, #0]
 800482c:	2310      	movs	r3, #16
 800482e:	e7af      	b.n	8004790 <_printf_i+0xfc>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	f043 0320 	orr.w	r3, r3, #32
 8004836:	6023      	str	r3, [r4, #0]
 8004838:	2378      	movs	r3, #120	; 0x78
 800483a:	4828      	ldr	r0, [pc, #160]	; (80048dc <_printf_i+0x248>)
 800483c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004840:	e7e3      	b.n	800480a <_printf_i+0x176>
 8004842:	065e      	lsls	r6, r3, #25
 8004844:	bf48      	it	mi
 8004846:	b2ad      	uxthmi	r5, r5
 8004848:	e7e6      	b.n	8004818 <_printf_i+0x184>
 800484a:	4616      	mov	r6, r2
 800484c:	e7bb      	b.n	80047c6 <_printf_i+0x132>
 800484e:	680b      	ldr	r3, [r1, #0]
 8004850:	6826      	ldr	r6, [r4, #0]
 8004852:	1d1d      	adds	r5, r3, #4
 8004854:	6960      	ldr	r0, [r4, #20]
 8004856:	600d      	str	r5, [r1, #0]
 8004858:	0635      	lsls	r5, r6, #24
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	d501      	bpl.n	8004862 <_printf_i+0x1ce>
 800485e:	6018      	str	r0, [r3, #0]
 8004860:	e002      	b.n	8004868 <_printf_i+0x1d4>
 8004862:	0671      	lsls	r1, r6, #25
 8004864:	d5fb      	bpl.n	800485e <_printf_i+0x1ca>
 8004866:	8018      	strh	r0, [r3, #0]
 8004868:	2300      	movs	r3, #0
 800486a:	4616      	mov	r6, r2
 800486c:	6123      	str	r3, [r4, #16]
 800486e:	e7ba      	b.n	80047e6 <_printf_i+0x152>
 8004870:	680b      	ldr	r3, [r1, #0]
 8004872:	1d1a      	adds	r2, r3, #4
 8004874:	600a      	str	r2, [r1, #0]
 8004876:	681e      	ldr	r6, [r3, #0]
 8004878:	2100      	movs	r1, #0
 800487a:	4630      	mov	r0, r6
 800487c:	6862      	ldr	r2, [r4, #4]
 800487e:	f000 f82f 	bl	80048e0 <memchr>
 8004882:	b108      	cbz	r0, 8004888 <_printf_i+0x1f4>
 8004884:	1b80      	subs	r0, r0, r6
 8004886:	6060      	str	r0, [r4, #4]
 8004888:	6863      	ldr	r3, [r4, #4]
 800488a:	6123      	str	r3, [r4, #16]
 800488c:	2300      	movs	r3, #0
 800488e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004892:	e7a8      	b.n	80047e6 <_printf_i+0x152>
 8004894:	4632      	mov	r2, r6
 8004896:	4649      	mov	r1, r9
 8004898:	4640      	mov	r0, r8
 800489a:	6923      	ldr	r3, [r4, #16]
 800489c:	47d0      	blx	sl
 800489e:	3001      	adds	r0, #1
 80048a0:	d0ab      	beq.n	80047fa <_printf_i+0x166>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	079b      	lsls	r3, r3, #30
 80048a6:	d413      	bmi.n	80048d0 <_printf_i+0x23c>
 80048a8:	68e0      	ldr	r0, [r4, #12]
 80048aa:	9b03      	ldr	r3, [sp, #12]
 80048ac:	4298      	cmp	r0, r3
 80048ae:	bfb8      	it	lt
 80048b0:	4618      	movlt	r0, r3
 80048b2:	e7a4      	b.n	80047fe <_printf_i+0x16a>
 80048b4:	2301      	movs	r3, #1
 80048b6:	4632      	mov	r2, r6
 80048b8:	4649      	mov	r1, r9
 80048ba:	4640      	mov	r0, r8
 80048bc:	47d0      	blx	sl
 80048be:	3001      	adds	r0, #1
 80048c0:	d09b      	beq.n	80047fa <_printf_i+0x166>
 80048c2:	3501      	adds	r5, #1
 80048c4:	68e3      	ldr	r3, [r4, #12]
 80048c6:	9903      	ldr	r1, [sp, #12]
 80048c8:	1a5b      	subs	r3, r3, r1
 80048ca:	42ab      	cmp	r3, r5
 80048cc:	dcf2      	bgt.n	80048b4 <_printf_i+0x220>
 80048ce:	e7eb      	b.n	80048a8 <_printf_i+0x214>
 80048d0:	2500      	movs	r5, #0
 80048d2:	f104 0619 	add.w	r6, r4, #25
 80048d6:	e7f5      	b.n	80048c4 <_printf_i+0x230>
 80048d8:	08004b91 	.word	0x08004b91
 80048dc:	08004ba2 	.word	0x08004ba2

080048e0 <memchr>:
 80048e0:	4603      	mov	r3, r0
 80048e2:	b510      	push	{r4, lr}
 80048e4:	b2c9      	uxtb	r1, r1
 80048e6:	4402      	add	r2, r0
 80048e8:	4293      	cmp	r3, r2
 80048ea:	4618      	mov	r0, r3
 80048ec:	d101      	bne.n	80048f2 <memchr+0x12>
 80048ee:	2000      	movs	r0, #0
 80048f0:	e003      	b.n	80048fa <memchr+0x1a>
 80048f2:	7804      	ldrb	r4, [r0, #0]
 80048f4:	3301      	adds	r3, #1
 80048f6:	428c      	cmp	r4, r1
 80048f8:	d1f6      	bne.n	80048e8 <memchr+0x8>
 80048fa:	bd10      	pop	{r4, pc}

080048fc <memcpy>:
 80048fc:	440a      	add	r2, r1
 80048fe:	4291      	cmp	r1, r2
 8004900:	f100 33ff 	add.w	r3, r0, #4294967295
 8004904:	d100      	bne.n	8004908 <memcpy+0xc>
 8004906:	4770      	bx	lr
 8004908:	b510      	push	{r4, lr}
 800490a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800490e:	4291      	cmp	r1, r2
 8004910:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004914:	d1f9      	bne.n	800490a <memcpy+0xe>
 8004916:	bd10      	pop	{r4, pc}

08004918 <memmove>:
 8004918:	4288      	cmp	r0, r1
 800491a:	b510      	push	{r4, lr}
 800491c:	eb01 0402 	add.w	r4, r1, r2
 8004920:	d902      	bls.n	8004928 <memmove+0x10>
 8004922:	4284      	cmp	r4, r0
 8004924:	4623      	mov	r3, r4
 8004926:	d807      	bhi.n	8004938 <memmove+0x20>
 8004928:	1e43      	subs	r3, r0, #1
 800492a:	42a1      	cmp	r1, r4
 800492c:	d008      	beq.n	8004940 <memmove+0x28>
 800492e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004932:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004936:	e7f8      	b.n	800492a <memmove+0x12>
 8004938:	4601      	mov	r1, r0
 800493a:	4402      	add	r2, r0
 800493c:	428a      	cmp	r2, r1
 800493e:	d100      	bne.n	8004942 <memmove+0x2a>
 8004940:	bd10      	pop	{r4, pc}
 8004942:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004946:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800494a:	e7f7      	b.n	800493c <memmove+0x24>

0800494c <_free_r>:
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	4605      	mov	r5, r0
 8004950:	2900      	cmp	r1, #0
 8004952:	d043      	beq.n	80049dc <_free_r+0x90>
 8004954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004958:	1f0c      	subs	r4, r1, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	bfb8      	it	lt
 800495e:	18e4      	addlt	r4, r4, r3
 8004960:	f000 f8d0 	bl	8004b04 <__malloc_lock>
 8004964:	4a1e      	ldr	r2, [pc, #120]	; (80049e0 <_free_r+0x94>)
 8004966:	6813      	ldr	r3, [r2, #0]
 8004968:	4610      	mov	r0, r2
 800496a:	b933      	cbnz	r3, 800497a <_free_r+0x2e>
 800496c:	6063      	str	r3, [r4, #4]
 800496e:	6014      	str	r4, [r2, #0]
 8004970:	4628      	mov	r0, r5
 8004972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004976:	f000 b8cb 	b.w	8004b10 <__malloc_unlock>
 800497a:	42a3      	cmp	r3, r4
 800497c:	d90a      	bls.n	8004994 <_free_r+0x48>
 800497e:	6821      	ldr	r1, [r4, #0]
 8004980:	1862      	adds	r2, r4, r1
 8004982:	4293      	cmp	r3, r2
 8004984:	bf01      	itttt	eq
 8004986:	681a      	ldreq	r2, [r3, #0]
 8004988:	685b      	ldreq	r3, [r3, #4]
 800498a:	1852      	addeq	r2, r2, r1
 800498c:	6022      	streq	r2, [r4, #0]
 800498e:	6063      	str	r3, [r4, #4]
 8004990:	6004      	str	r4, [r0, #0]
 8004992:	e7ed      	b.n	8004970 <_free_r+0x24>
 8004994:	461a      	mov	r2, r3
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	b10b      	cbz	r3, 800499e <_free_r+0x52>
 800499a:	42a3      	cmp	r3, r4
 800499c:	d9fa      	bls.n	8004994 <_free_r+0x48>
 800499e:	6811      	ldr	r1, [r2, #0]
 80049a0:	1850      	adds	r0, r2, r1
 80049a2:	42a0      	cmp	r0, r4
 80049a4:	d10b      	bne.n	80049be <_free_r+0x72>
 80049a6:	6820      	ldr	r0, [r4, #0]
 80049a8:	4401      	add	r1, r0
 80049aa:	1850      	adds	r0, r2, r1
 80049ac:	4283      	cmp	r3, r0
 80049ae:	6011      	str	r1, [r2, #0]
 80049b0:	d1de      	bne.n	8004970 <_free_r+0x24>
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	4401      	add	r1, r0
 80049b8:	6011      	str	r1, [r2, #0]
 80049ba:	6053      	str	r3, [r2, #4]
 80049bc:	e7d8      	b.n	8004970 <_free_r+0x24>
 80049be:	d902      	bls.n	80049c6 <_free_r+0x7a>
 80049c0:	230c      	movs	r3, #12
 80049c2:	602b      	str	r3, [r5, #0]
 80049c4:	e7d4      	b.n	8004970 <_free_r+0x24>
 80049c6:	6820      	ldr	r0, [r4, #0]
 80049c8:	1821      	adds	r1, r4, r0
 80049ca:	428b      	cmp	r3, r1
 80049cc:	bf01      	itttt	eq
 80049ce:	6819      	ldreq	r1, [r3, #0]
 80049d0:	685b      	ldreq	r3, [r3, #4]
 80049d2:	1809      	addeq	r1, r1, r0
 80049d4:	6021      	streq	r1, [r4, #0]
 80049d6:	6063      	str	r3, [r4, #4]
 80049d8:	6054      	str	r4, [r2, #4]
 80049da:	e7c9      	b.n	8004970 <_free_r+0x24>
 80049dc:	bd38      	pop	{r3, r4, r5, pc}
 80049de:	bf00      	nop
 80049e0:	20000134 	.word	0x20000134

080049e4 <_malloc_r>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	1ccd      	adds	r5, r1, #3
 80049e8:	f025 0503 	bic.w	r5, r5, #3
 80049ec:	3508      	adds	r5, #8
 80049ee:	2d0c      	cmp	r5, #12
 80049f0:	bf38      	it	cc
 80049f2:	250c      	movcc	r5, #12
 80049f4:	2d00      	cmp	r5, #0
 80049f6:	4606      	mov	r6, r0
 80049f8:	db01      	blt.n	80049fe <_malloc_r+0x1a>
 80049fa:	42a9      	cmp	r1, r5
 80049fc:	d903      	bls.n	8004a06 <_malloc_r+0x22>
 80049fe:	230c      	movs	r3, #12
 8004a00:	6033      	str	r3, [r6, #0]
 8004a02:	2000      	movs	r0, #0
 8004a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a06:	f000 f87d 	bl	8004b04 <__malloc_lock>
 8004a0a:	4921      	ldr	r1, [pc, #132]	; (8004a90 <_malloc_r+0xac>)
 8004a0c:	680a      	ldr	r2, [r1, #0]
 8004a0e:	4614      	mov	r4, r2
 8004a10:	b99c      	cbnz	r4, 8004a3a <_malloc_r+0x56>
 8004a12:	4f20      	ldr	r7, [pc, #128]	; (8004a94 <_malloc_r+0xb0>)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	b923      	cbnz	r3, 8004a22 <_malloc_r+0x3e>
 8004a18:	4621      	mov	r1, r4
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	f000 f862 	bl	8004ae4 <_sbrk_r>
 8004a20:	6038      	str	r0, [r7, #0]
 8004a22:	4629      	mov	r1, r5
 8004a24:	4630      	mov	r0, r6
 8004a26:	f000 f85d 	bl	8004ae4 <_sbrk_r>
 8004a2a:	1c43      	adds	r3, r0, #1
 8004a2c:	d123      	bne.n	8004a76 <_malloc_r+0x92>
 8004a2e:	230c      	movs	r3, #12
 8004a30:	4630      	mov	r0, r6
 8004a32:	6033      	str	r3, [r6, #0]
 8004a34:	f000 f86c 	bl	8004b10 <__malloc_unlock>
 8004a38:	e7e3      	b.n	8004a02 <_malloc_r+0x1e>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	1b5b      	subs	r3, r3, r5
 8004a3e:	d417      	bmi.n	8004a70 <_malloc_r+0x8c>
 8004a40:	2b0b      	cmp	r3, #11
 8004a42:	d903      	bls.n	8004a4c <_malloc_r+0x68>
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	441c      	add	r4, r3
 8004a48:	6025      	str	r5, [r4, #0]
 8004a4a:	e004      	b.n	8004a56 <_malloc_r+0x72>
 8004a4c:	6863      	ldr	r3, [r4, #4]
 8004a4e:	42a2      	cmp	r2, r4
 8004a50:	bf0c      	ite	eq
 8004a52:	600b      	streq	r3, [r1, #0]
 8004a54:	6053      	strne	r3, [r2, #4]
 8004a56:	4630      	mov	r0, r6
 8004a58:	f000 f85a 	bl	8004b10 <__malloc_unlock>
 8004a5c:	f104 000b 	add.w	r0, r4, #11
 8004a60:	1d23      	adds	r3, r4, #4
 8004a62:	f020 0007 	bic.w	r0, r0, #7
 8004a66:	1ac2      	subs	r2, r0, r3
 8004a68:	d0cc      	beq.n	8004a04 <_malloc_r+0x20>
 8004a6a:	1a1b      	subs	r3, r3, r0
 8004a6c:	50a3      	str	r3, [r4, r2]
 8004a6e:	e7c9      	b.n	8004a04 <_malloc_r+0x20>
 8004a70:	4622      	mov	r2, r4
 8004a72:	6864      	ldr	r4, [r4, #4]
 8004a74:	e7cc      	b.n	8004a10 <_malloc_r+0x2c>
 8004a76:	1cc4      	adds	r4, r0, #3
 8004a78:	f024 0403 	bic.w	r4, r4, #3
 8004a7c:	42a0      	cmp	r0, r4
 8004a7e:	d0e3      	beq.n	8004a48 <_malloc_r+0x64>
 8004a80:	1a21      	subs	r1, r4, r0
 8004a82:	4630      	mov	r0, r6
 8004a84:	f000 f82e 	bl	8004ae4 <_sbrk_r>
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d1dd      	bne.n	8004a48 <_malloc_r+0x64>
 8004a8c:	e7cf      	b.n	8004a2e <_malloc_r+0x4a>
 8004a8e:	bf00      	nop
 8004a90:	20000134 	.word	0x20000134
 8004a94:	20000138 	.word	0x20000138

08004a98 <_realloc_r>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	4607      	mov	r7, r0
 8004a9c:	4614      	mov	r4, r2
 8004a9e:	460e      	mov	r6, r1
 8004aa0:	b921      	cbnz	r1, 8004aac <_realloc_r+0x14>
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004aa8:	f7ff bf9c 	b.w	80049e4 <_malloc_r>
 8004aac:	b922      	cbnz	r2, 8004ab8 <_realloc_r+0x20>
 8004aae:	f7ff ff4d 	bl	800494c <_free_r>
 8004ab2:	4625      	mov	r5, r4
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ab8:	f000 f830 	bl	8004b1c <_malloc_usable_size_r>
 8004abc:	42a0      	cmp	r0, r4
 8004abe:	d20f      	bcs.n	8004ae0 <_realloc_r+0x48>
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	f7ff ff8e 	bl	80049e4 <_malloc_r>
 8004ac8:	4605      	mov	r5, r0
 8004aca:	2800      	cmp	r0, #0
 8004acc:	d0f2      	beq.n	8004ab4 <_realloc_r+0x1c>
 8004ace:	4631      	mov	r1, r6
 8004ad0:	4622      	mov	r2, r4
 8004ad2:	f7ff ff13 	bl	80048fc <memcpy>
 8004ad6:	4631      	mov	r1, r6
 8004ad8:	4638      	mov	r0, r7
 8004ada:	f7ff ff37 	bl	800494c <_free_r>
 8004ade:	e7e9      	b.n	8004ab4 <_realloc_r+0x1c>
 8004ae0:	4635      	mov	r5, r6
 8004ae2:	e7e7      	b.n	8004ab4 <_realloc_r+0x1c>

08004ae4 <_sbrk_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	4d05      	ldr	r5, [pc, #20]	; (8004b00 <_sbrk_r+0x1c>)
 8004aea:	4604      	mov	r4, r0
 8004aec:	4608      	mov	r0, r1
 8004aee:	602b      	str	r3, [r5, #0]
 8004af0:	f7fc ff0a 	bl	8001908 <_sbrk>
 8004af4:	1c43      	adds	r3, r0, #1
 8004af6:	d102      	bne.n	8004afe <_sbrk_r+0x1a>
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	b103      	cbz	r3, 8004afe <_sbrk_r+0x1a>
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	bd38      	pop	{r3, r4, r5, pc}
 8004b00:	20000214 	.word	0x20000214

08004b04 <__malloc_lock>:
 8004b04:	4801      	ldr	r0, [pc, #4]	; (8004b0c <__malloc_lock+0x8>)
 8004b06:	f000 b811 	b.w	8004b2c <__retarget_lock_acquire_recursive>
 8004b0a:	bf00      	nop
 8004b0c:	2000021c 	.word	0x2000021c

08004b10 <__malloc_unlock>:
 8004b10:	4801      	ldr	r0, [pc, #4]	; (8004b18 <__malloc_unlock+0x8>)
 8004b12:	f000 b80c 	b.w	8004b2e <__retarget_lock_release_recursive>
 8004b16:	bf00      	nop
 8004b18:	2000021c 	.word	0x2000021c

08004b1c <_malloc_usable_size_r>:
 8004b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b20:	1f18      	subs	r0, r3, #4
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bfbc      	itt	lt
 8004b26:	580b      	ldrlt	r3, [r1, r0]
 8004b28:	18c0      	addlt	r0, r0, r3
 8004b2a:	4770      	bx	lr

08004b2c <__retarget_lock_acquire_recursive>:
 8004b2c:	4770      	bx	lr

08004b2e <__retarget_lock_release_recursive>:
 8004b2e:	4770      	bx	lr

08004b30 <_init>:
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	bf00      	nop
 8004b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b36:	bc08      	pop	{r3}
 8004b38:	469e      	mov	lr, r3
 8004b3a:	4770      	bx	lr

08004b3c <_fini>:
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	bf00      	nop
 8004b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b42:	bc08      	pop	{r3}
 8004b44:	469e      	mov	lr, r3
 8004b46:	4770      	bx	lr
